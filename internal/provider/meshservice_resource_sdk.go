// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/Kong/shared-speakeasy/customtypes/kumalabels"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-kong-mesh/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-kong-mesh/internal/provider/types"
	"github.com/kong/terraform-provider-kong-mesh/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-kong-mesh/internal/sdk/models/shared"
)

func (r *MeshServiceResourceModel) RefreshFromSharedMeshServiceCreateOrUpdateSuccessResponse(ctx context.Context, resp *shared.MeshServiceCreateOrUpdateSuccessResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Warnings = make([]types.String, 0, len(resp.Warnings))
		for _, v := range resp.Warnings {
			r.Warnings = append(r.Warnings, types.StringValue(v))
		}
	}

	return diags
}

func (r *MeshServiceResourceModel) RefreshFromSharedMeshServiceItem(ctx context.Context, resp *shared.MeshServiceItem) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreationTime))
		labelsValue, labelsDiags := types.MapValueFrom(ctx, types.StringType, resp.Labels)
		diags.Append(labelsDiags...)
		labelsValuable, labelsDiags := kumalabels.KumaLabelsMapType{MapType: types.MapType{ElemType: types.StringType}}.ValueFromMap(ctx, labelsValue)
		diags.Append(labelsDiags...)
		r.Labels, _ = labelsValuable.(kumalabels.KumaLabelsMapValue)
		r.Mesh = types.StringPointerValue(resp.Mesh)
		r.ModificationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.ModificationTime))
		r.Name = types.StringValue(resp.Name)
		r.Spec.Identities = []tfTypes.MeshFaultInjectionItemSpiffeID{}

		for _, identitiesItem := range resp.Spec.Identities {
			var identities tfTypes.MeshFaultInjectionItemSpiffeID

			identities.Type = types.StringValue(string(identitiesItem.Type))
			identities.Value = types.StringValue(identitiesItem.Value)

			r.Spec.Identities = append(r.Spec.Identities, identities)
		}
		r.Spec.Ports = []tfTypes.MeshServiceItemPorts{}

		for _, portsItem := range resp.Spec.Ports {
			var ports tfTypes.MeshServiceItemPorts

			ports.AppProtocol = types.StringPointerValue(portsItem.AppProtocol)
			ports.Name = types.StringPointerValue(portsItem.Name)
			ports.Port = types.Int32Value(int32(portsItem.Port))
			if portsItem.TargetPort != nil {
				ports.TargetPort = &tfTypes.Mode{}
				if portsItem.TargetPort.Integer != nil {
					ports.TargetPort.Integer = types.Int64PointerValue(portsItem.TargetPort.Integer)
				}
				if portsItem.TargetPort.Str != nil {
					ports.TargetPort.Str = types.StringPointerValue(portsItem.TargetPort.Str)
				}
			}

			r.Spec.Ports = append(r.Spec.Ports, ports)
		}
		if resp.Spec.Selector == nil {
			r.Spec.Selector = nil
		} else {
			r.Spec.Selector = &tfTypes.MeshServiceItemSelector{}
			if resp.Spec.Selector.DataplaneRef == nil {
				r.Spec.Selector.DataplaneRef = nil
			} else {
				r.Spec.Selector.DataplaneRef = &tfTypes.DataplaneRef{}
				r.Spec.Selector.DataplaneRef.Name = types.StringPointerValue(resp.Spec.Selector.DataplaneRef.Name)
			}
			if len(resp.Spec.Selector.DataplaneTags) > 0 {
				r.Spec.Selector.DataplaneTags = make(map[string]types.String, len(resp.Spec.Selector.DataplaneTags))
				for key, value := range resp.Spec.Selector.DataplaneTags {
					r.Spec.Selector.DataplaneTags[key] = types.StringValue(value)
				}
			}
		}
		if resp.Spec.State != nil {
			r.Spec.State = types.StringValue(string(*resp.Spec.State))
		} else {
			r.Spec.State = types.StringNull()
		}
		if resp.Status == nil {
			r.Status = nil
		} else {
			r.Status = &tfTypes.MeshServiceItemStatus{}
			r.Status.Addresses = []tfTypes.Addresses{}

			for _, addressesItem := range resp.Status.Addresses {
				var addresses tfTypes.Addresses

				addresses.Hostname = types.StringPointerValue(addressesItem.Hostname)
				if addressesItem.HostnameGeneratorRef == nil {
					addresses.HostnameGeneratorRef = nil
				} else {
					addresses.HostnameGeneratorRef = &tfTypes.HostnameGeneratorRef{}
					addresses.HostnameGeneratorRef.CoreName = types.StringValue(addressesItem.HostnameGeneratorRef.CoreName)
				}
				addresses.Origin = types.StringPointerValue(addressesItem.Origin)

				r.Status.Addresses = append(r.Status.Addresses, addresses)
			}
			if resp.Status.DataplaneProxies == nil {
				r.Status.DataplaneProxies = nil
			} else {
				r.Status.DataplaneProxies = &tfTypes.DataplaneProxies{}
				r.Status.DataplaneProxies.Connected = types.Int64PointerValue(resp.Status.DataplaneProxies.Connected)
				r.Status.DataplaneProxies.Healthy = types.Int64PointerValue(resp.Status.DataplaneProxies.Healthy)
				r.Status.DataplaneProxies.Total = types.Int64PointerValue(resp.Status.DataplaneProxies.Total)
			}
			r.Status.HostnameGenerators = []tfTypes.HostnameGenerators{}

			for _, hostnameGeneratorsItem := range resp.Status.HostnameGenerators {
				var hostnameGenerators tfTypes.HostnameGenerators

				hostnameGenerators.Conditions = []tfTypes.MeshExternalServiceItemConditions{}

				for _, conditionsItem := range hostnameGeneratorsItem.Conditions {
					var conditions tfTypes.MeshExternalServiceItemConditions

					conditions.Message = types.StringValue(conditionsItem.Message)
					conditions.Reason = types.StringValue(conditionsItem.Reason)
					conditions.Status = types.StringValue(string(conditionsItem.Status))
					conditions.Type = types.StringValue(conditionsItem.Type)

					hostnameGenerators.Conditions = append(hostnameGenerators.Conditions, conditions)
				}
				hostnameGenerators.HostnameGeneratorRef.CoreName = types.StringValue(hostnameGeneratorsItem.HostnameGeneratorRef.CoreName)

				r.Status.HostnameGenerators = append(r.Status.HostnameGenerators, hostnameGenerators)
			}
			if resp.Status.TLS == nil {
				r.Status.TLS = nil
			} else {
				r.Status.TLS = &tfTypes.MeshServiceItemTLS{}
				if resp.Status.TLS.Status != nil {
					r.Status.TLS.Status = types.StringValue(string(*resp.Status.TLS.Status))
				} else {
					r.Status.TLS.Status = types.StringNull()
				}
			}
			r.Status.Vips = []tfTypes.Vip{}

			for _, vipsItem := range resp.Status.Vips {
				var vips tfTypes.Vip

				vips.IP = types.StringPointerValue(vipsItem.IP)

				r.Status.Vips = append(r.Status.Vips, vips)
			}
		}
		r.Type = types.StringValue(string(resp.Type))
	}

	return diags
}

func (r *MeshServiceResourceModel) ToOperationsDeleteMeshServiceRequest(ctx context.Context) (*operations.DeleteMeshServiceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var mesh string
	mesh = r.Mesh.ValueString()

	var name string
	name = r.Name.ValueString()

	out := operations.DeleteMeshServiceRequest{
		Mesh: mesh,
		Name: name,
	}

	return &out, diags
}

func (r *MeshServiceResourceModel) ToOperationsGetMeshServiceRequest(ctx context.Context) (*operations.GetMeshServiceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var mesh string
	mesh = r.Mesh.ValueString()

	var name string
	name = r.Name.ValueString()

	out := operations.GetMeshServiceRequest{
		Mesh: mesh,
		Name: name,
	}

	return &out, diags
}

func (r *MeshServiceResourceModel) ToOperationsPutMeshServiceRequest(ctx context.Context) (*operations.PutMeshServiceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var mesh string
	mesh = r.Mesh.ValueString()

	var name string
	name = r.Name.ValueString()

	meshServiceItem, meshServiceItemDiags := r.ToSharedMeshServiceItemInput(ctx)
	diags.Append(meshServiceItemDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PutMeshServiceRequest{
		Mesh:            mesh,
		Name:            name,
		MeshServiceItem: *meshServiceItem,
	}

	return &out, diags
}

func (r *MeshServiceResourceModel) ToSharedMeshServiceItemInput(ctx context.Context) (*shared.MeshServiceItemInput, diag.Diagnostics) {
	var diags diag.Diagnostics

	typeVar := shared.MeshServiceItemType(r.Type.ValueString())
	mesh := new(string)
	if !r.Mesh.IsUnknown() && !r.Mesh.IsNull() {
		*mesh = r.Mesh.ValueString()
	} else {
		mesh = nil
	}
	var name string
	name = r.Name.ValueString()

	var labels map[string]string
	if !r.Labels.IsUnknown() && !r.Labels.IsNull() {
		diags.Append(r.Labels.ElementsAs(ctx, &labels, true)...)
	}
	identities := make([]shared.Identities, 0, len(r.Spec.Identities))
	for _, identitiesItem := range r.Spec.Identities {
		type1 := shared.MeshServiceItemSpecType(identitiesItem.Type.ValueString())
		var value string
		value = identitiesItem.Value.ValueString()

		identities = append(identities, shared.Identities{
			Type:  type1,
			Value: value,
		})
	}
	ports := make([]shared.MeshServiceItemPorts, 0, len(r.Spec.Ports))
	for _, portsItem := range r.Spec.Ports {
		appProtocol := new(string)
		if !portsItem.AppProtocol.IsUnknown() && !portsItem.AppProtocol.IsNull() {
			*appProtocol = portsItem.AppProtocol.ValueString()
		} else {
			appProtocol = nil
		}
		name1 := new(string)
		if !portsItem.Name.IsUnknown() && !portsItem.Name.IsNull() {
			*name1 = portsItem.Name.ValueString()
		} else {
			name1 = nil
		}
		var port int
		port = int(portsItem.Port.ValueInt32())

		var targetPort *shared.TargetPort
		if portsItem.TargetPort != nil {
			integer := new(int64)
			if !portsItem.TargetPort.Integer.IsUnknown() && !portsItem.TargetPort.Integer.IsNull() {
				*integer = portsItem.TargetPort.Integer.ValueInt64()
			} else {
				integer = nil
			}
			if integer != nil {
				targetPort = &shared.TargetPort{
					Integer: integer,
				}
			}
			str := new(string)
			if !portsItem.TargetPort.Str.IsUnknown() && !portsItem.TargetPort.Str.IsNull() {
				*str = portsItem.TargetPort.Str.ValueString()
			} else {
				str = nil
			}
			if str != nil {
				targetPort = &shared.TargetPort{
					Str: str,
				}
			}
		}
		ports = append(ports, shared.MeshServiceItemPorts{
			AppProtocol: appProtocol,
			Name:        name1,
			Port:        port,
			TargetPort:  targetPort,
		})
	}
	var selector *shared.MeshServiceItemSelector
	if r.Spec.Selector != nil {
		var dataplaneRef *shared.DataplaneRef
		if r.Spec.Selector.DataplaneRef != nil {
			name2 := new(string)
			if !r.Spec.Selector.DataplaneRef.Name.IsUnknown() && !r.Spec.Selector.DataplaneRef.Name.IsNull() {
				*name2 = r.Spec.Selector.DataplaneRef.Name.ValueString()
			} else {
				name2 = nil
			}
			dataplaneRef = &shared.DataplaneRef{
				Name: name2,
			}
		}
		dataplaneTags := make(map[string]string)
		for dataplaneTagsKey, dataplaneTagsValue := range r.Spec.Selector.DataplaneTags {
			var dataplaneTagsInst string
			dataplaneTagsInst = dataplaneTagsValue.ValueString()

			dataplaneTags[dataplaneTagsKey] = dataplaneTagsInst
		}
		selector = &shared.MeshServiceItemSelector{
			DataplaneRef:  dataplaneRef,
			DataplaneTags: dataplaneTags,
		}
	}
	state := new(shared.State)
	if !r.Spec.State.IsUnknown() && !r.Spec.State.IsNull() {
		*state = shared.State(r.Spec.State.ValueString())
	} else {
		state = nil
	}
	spec := shared.MeshServiceItemSpec{
		Identities: identities,
		Ports:      ports,
		Selector:   selector,
		State:      state,
	}
	out := shared.MeshServiceItemInput{
		Type:   typeVar,
		Mesh:   mesh,
		Name:   name,
		Labels: labels,
		Spec:   spec,
	}

	return &out, diags
}
