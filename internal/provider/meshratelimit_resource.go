// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/Kong/shared-speakeasy/customtypes/kumalabels"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	custom_listplanmodifier "github.com/kong/terraform-provider-kong-mesh/internal/planmodifiers/listplanmodifier"
	speakeasy_listplanmodifier "github.com/kong/terraform-provider-kong-mesh/internal/planmodifiers/listplanmodifier"
	speakeasy_stringplanmodifier "github.com/kong/terraform-provider-kong-mesh/internal/planmodifiers/stringplanmodifier"
	tfTypes "github.com/kong/terraform-provider-kong-mesh/internal/provider/types"
	"github.com/kong/terraform-provider-kong-mesh/internal/sdk"
	"github.com/kong/terraform-provider-kong-mesh/internal/validators"
	speakeasy_int32validators "github.com/kong/terraform-provider-kong-mesh/internal/validators/int32validators"
	speakeasy_objectvalidators "github.com/kong/terraform-provider-kong-mesh/internal/validators/objectvalidators"
	speakeasy_stringvalidators "github.com/kong/terraform-provider-kong-mesh/internal/validators/stringvalidators"
	"regexp"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &MeshRateLimitResource{}
var _ resource.ResourceWithImportState = &MeshRateLimitResource{}

func NewMeshRateLimitResource() resource.Resource {
	return &MeshRateLimitResource{}
}

// MeshRateLimitResource defines the resource implementation.
type MeshRateLimitResource struct {
	// Provider configured SDK client.
	client *sdk.KongMesh
}

// MeshRateLimitResourceModel describes the resource data model.
type MeshRateLimitResourceModel struct {
	CreationTime     types.String                  `tfsdk:"creation_time"`
	Labels           kumalabels.KumaLabelsMapValue `tfsdk:"labels"`
	Mesh             types.String                  `tfsdk:"mesh"`
	ModificationTime types.String                  `tfsdk:"modification_time"`
	Name             types.String                  `tfsdk:"name"`
	Spec             tfTypes.MeshRateLimitItemSpec `tfsdk:"spec"`
	Type             types.String                  `tfsdk:"type"`
	Warnings         []types.String                `tfsdk:"warnings"`
}

func (r *MeshRateLimitResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_mesh_rate_limit"
}

func (r *MeshRateLimitResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "MeshRateLimit Resource",
		Attributes: map[string]schema.Attribute{
			"creation_time": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `Time at which the resource was created`,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"labels": schema.MapAttribute{
				CustomType:  kumalabels.KumaLabelsMapType{MapType: types.MapType{ElemType: types.StringType}},
				Optional:    true,
				ElementType: types.StringType,
				Description: `The labels to help identity resources`,
			},
			"mesh": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `name of the mesh. Requires replacement if changed.`,
			},
			"modification_time": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `Time at which the resource was updated`,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"name": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `name of the MeshRateLimit. Requires replacement if changed.`,
			},
			"spec": schema.SingleNestedAttribute{
				Required: true,
				Attributes: map[string]schema.Attribute{
					"from": schema.ListNestedAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.List{
							custom_listplanmodifier.SupressZeroNullModifier(),
						},
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"default": schema.SingleNestedAttribute{
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"local": schema.SingleNestedAttribute{
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"http": schema.SingleNestedAttribute{
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"disabled": schema.BoolAttribute{
															Optional:    true,
															Description: `Define if rate limiting should be disabled.`,
														},
														"on_rate_limit": schema.SingleNestedAttribute{
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"headers": schema.SingleNestedAttribute{
																	Optional: true,
																	Attributes: map[string]schema.Attribute{
																		"add": schema.ListNestedAttribute{
																			Computed: true,
																			Optional: true,
																			PlanModifiers: []planmodifier.List{
																				custom_listplanmodifier.SupressZeroNullModifier(),
																			},
																			NestedObject: schema.NestedAttributeObject{
																				Validators: []validator.Object{
																					speakeasy_objectvalidators.NotNull(),
																				},
																				Attributes: map[string]schema.Attribute{
																					"name": schema.StringAttribute{
																						Optional:    true,
																						Description: `Not Null`,
																						Validators: []validator.String{
																							speakeasy_stringvalidators.NotNull(),
																							stringvalidator.UTF8LengthBetween(1, 256),
																							stringvalidator.RegexMatches(regexp.MustCompile(`^[a-z0-9!#$%&'*+\-.^_\x60|~]+$`), "must match pattern "+regexp.MustCompile(`^[a-z0-9!#$%&'*+\-.^_\x60|~]+$`).String()),
																						},
																					},
																					"value": schema.StringAttribute{
																						Optional:    true,
																						Description: `Not Null`,
																						Validators: []validator.String{
																							speakeasy_stringvalidators.NotNull(),
																						},
																					},
																				},
																			},
																			Validators: []validator.List{
																				listvalidator.SizeAtMost(16),
																			},
																		},
																		"set": schema.ListNestedAttribute{
																			Computed: true,
																			Optional: true,
																			PlanModifiers: []planmodifier.List{
																				custom_listplanmodifier.SupressZeroNullModifier(),
																			},
																			NestedObject: schema.NestedAttributeObject{
																				Validators: []validator.Object{
																					speakeasy_objectvalidators.NotNull(),
																				},
																				Attributes: map[string]schema.Attribute{
																					"name": schema.StringAttribute{
																						Optional:    true,
																						Description: `Not Null`,
																						Validators: []validator.String{
																							speakeasy_stringvalidators.NotNull(),
																							stringvalidator.UTF8LengthBetween(1, 256),
																							stringvalidator.RegexMatches(regexp.MustCompile(`^[a-z0-9!#$%&'*+\-.^_\x60|~]+$`), "must match pattern "+regexp.MustCompile(`^[a-z0-9!#$%&'*+\-.^_\x60|~]+$`).String()),
																						},
																					},
																					"value": schema.StringAttribute{
																						Optional:    true,
																						Description: `Not Null`,
																						Validators: []validator.String{
																							speakeasy_stringvalidators.NotNull(),
																						},
																					},
																				},
																			},
																			Validators: []validator.List{
																				listvalidator.SizeAtMost(16),
																			},
																		},
																	},
																	Description: `The Headers to be added to the HTTP response on a rate limit event`,
																},
																"status": schema.Int32Attribute{
																	Computed:    true,
																	Optional:    true,
																	Description: `The HTTP status code to be set on a rate limit event`,
																},
															},
															Description: `Describes the actions to take on a rate limit event`,
														},
														"request_rate": schema.SingleNestedAttribute{
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"interval": schema.StringAttribute{
																	Optional:    true,
																	Description: `The interval the number of units is accounted for. Not Null`,
																	Validators: []validator.String{
																		speakeasy_stringvalidators.NotNull(),
																	},
																},
																"num": schema.Int32Attribute{
																	Optional: true,
																	MarkdownDescription: `Number of units per interval (depending on usage it can be a number of requests,` + "\n" +
																		`or a number of connections).` + "\n" +
																		`Not Null`,
																	Validators: []validator.Int32{
																		speakeasy_int32validators.NotNull(),
																	},
																},
															},
															Description: `Defines how many requests are allowed per interval.`,
														},
													},
													MarkdownDescription: `LocalHTTP defines configuration of local HTTP rate limiting` + "\n" +
														`https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/local_rate_limit_filter`,
												},
												"tcp": schema.SingleNestedAttribute{
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"connection_rate": schema.SingleNestedAttribute{
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"interval": schema.StringAttribute{
																	Optional:    true,
																	Description: `The interval the number of units is accounted for. Not Null`,
																	Validators: []validator.String{
																		speakeasy_stringvalidators.NotNull(),
																	},
																},
																"num": schema.Int32Attribute{
																	Optional: true,
																	MarkdownDescription: `Number of units per interval (depending on usage it can be a number of requests,` + "\n" +
																		`or a number of connections).` + "\n" +
																		`Not Null`,
																	Validators: []validator.Int32{
																		speakeasy_int32validators.NotNull(),
																	},
																},
															},
															Description: `Defines how many connections are allowed per interval.`,
														},
														"disabled": schema.BoolAttribute{
															Optional: true,
															MarkdownDescription: `Define if rate limiting should be disabled.` + "\n" +
																`Default: false`,
														},
													},
													MarkdownDescription: `LocalTCP defines confguration of local TCP rate limiting` + "\n" +
														`https://www.envoyproxy.io/docs/envoy/latest/configuration/listeners/network_filters/local_rate_limit_filter`,
												},
											},
											Description: `LocalConf defines local http or/and tcp rate limit configuration`,
										},
									},
									MarkdownDescription: `Default is a configuration specific to the group of clients referenced in` + "\n" +
										`'targetRef'`,
								},
								"target_ref": schema.SingleNestedAttribute{
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"kind": schema.StringAttribute{
											Optional:    true,
											Description: `Kind of the referenced resource. Not Null; must be one of ["Mesh", "MeshSubset", "MeshGateway", "MeshService", "MeshExternalService", "MeshMultiZoneService", "MeshServiceSubset", "MeshHTTPRoute", "Dataplane"]`,
											Validators: []validator.String{
												speakeasy_stringvalidators.NotNull(),
												stringvalidator.OneOf(
													"Mesh",
													"MeshSubset",
													"MeshGateway",
													"MeshService",
													"MeshExternalService",
													"MeshMultiZoneService",
													"MeshServiceSubset",
													"MeshHTTPRoute",
													"Dataplane",
												),
											},
										},
										"labels": schema.MapAttribute{
											Optional:    true,
											ElementType: types.StringType,
											MarkdownDescription: `Labels are used to select group of MeshServices that match labels. Either Labels or` + "\n" +
												`Name and Namespace can be used.`,
										},
										"mesh": schema.StringAttribute{
											Optional:    true,
											Description: `Mesh is reserved for future use to identify cross mesh resources.`,
										},
										"name": schema.StringAttribute{
											Optional: true,
											MarkdownDescription: `Name of the referenced resource. Can only be used with kinds: ` + "`" + `MeshService` + "`" + `,` + "\n" +
												`` + "`" + `MeshServiceSubset` + "`" + ` and ` + "`" + `MeshGatewayRoute` + "`" + ``,
										},
										"namespace": schema.StringAttribute{
											Optional: true,
											MarkdownDescription: `Namespace specifies the namespace of target resource. If empty only resources in policy namespace` + "\n" +
												`will be targeted.`,
										},
										"proxy_types": schema.ListAttribute{
											Computed: true,
											Optional: true,
											PlanModifiers: []planmodifier.List{
												custom_listplanmodifier.SupressZeroNullModifier(),
											},
											ElementType: types.StringType,
											MarkdownDescription: `ProxyTypes specifies the data plane types that are subject to the policy. When not specified,` + "\n" +
												`all data plane types are targeted by the policy.`,
										},
										"section_name": schema.StringAttribute{
											Optional: true,
											MarkdownDescription: `SectionName is used to target specific section of resource.` + "\n" +
												`For example, you can target port from MeshService.ports[] by its name. Only traffic to this port will be affected.`,
										},
										"tags": schema.MapAttribute{
											Optional:    true,
											ElementType: types.StringType,
											MarkdownDescription: `Tags used to select a subset of proxies by tags. Can only be used with kinds` + "\n" +
												`` + "`" + `MeshSubset` + "`" + ` and ` + "`" + `MeshServiceSubset` + "`" + ``,
										},
									},
									MarkdownDescription: `TargetRef is a reference to the resource that represents a group of` + "\n" +
										`clients.` + "\n" +
										`Not Null`,
									Validators: []validator.Object{
										speakeasy_objectvalidators.NotNull(),
									},
								},
							},
						},
						Description: `From list makes a match between clients and corresponding configurations`,
					},
					"rules": schema.ListNestedAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.List{
							custom_listplanmodifier.SupressZeroNullModifier(),
						},
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"default": schema.SingleNestedAttribute{
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"local": schema.SingleNestedAttribute{
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"http": schema.SingleNestedAttribute{
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"disabled": schema.BoolAttribute{
															Optional:    true,
															Description: `Define if rate limiting should be disabled.`,
														},
														"on_rate_limit": schema.SingleNestedAttribute{
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"headers": schema.SingleNestedAttribute{
																	Optional: true,
																	Attributes: map[string]schema.Attribute{
																		"add": schema.ListNestedAttribute{
																			Computed: true,
																			Optional: true,
																			PlanModifiers: []planmodifier.List{
																				custom_listplanmodifier.SupressZeroNullModifier(),
																			},
																			NestedObject: schema.NestedAttributeObject{
																				Validators: []validator.Object{
																					speakeasy_objectvalidators.NotNull(),
																				},
																				Attributes: map[string]schema.Attribute{
																					"name": schema.StringAttribute{
																						Optional:    true,
																						Description: `Not Null`,
																						Validators: []validator.String{
																							speakeasy_stringvalidators.NotNull(),
																							stringvalidator.UTF8LengthBetween(1, 256),
																							stringvalidator.RegexMatches(regexp.MustCompile(`^[a-z0-9!#$%&'*+\-.^_\x60|~]+$`), "must match pattern "+regexp.MustCompile(`^[a-z0-9!#$%&'*+\-.^_\x60|~]+$`).String()),
																						},
																					},
																					"value": schema.StringAttribute{
																						Optional:    true,
																						Description: `Not Null`,
																						Validators: []validator.String{
																							speakeasy_stringvalidators.NotNull(),
																						},
																					},
																				},
																			},
																			Validators: []validator.List{
																				listvalidator.SizeAtMost(16),
																			},
																		},
																		"set": schema.ListNestedAttribute{
																			Computed: true,
																			Optional: true,
																			PlanModifiers: []planmodifier.List{
																				custom_listplanmodifier.SupressZeroNullModifier(),
																			},
																			NestedObject: schema.NestedAttributeObject{
																				Validators: []validator.Object{
																					speakeasy_objectvalidators.NotNull(),
																				},
																				Attributes: map[string]schema.Attribute{
																					"name": schema.StringAttribute{
																						Optional:    true,
																						Description: `Not Null`,
																						Validators: []validator.String{
																							speakeasy_stringvalidators.NotNull(),
																							stringvalidator.UTF8LengthBetween(1, 256),
																							stringvalidator.RegexMatches(regexp.MustCompile(`^[a-z0-9!#$%&'*+\-.^_\x60|~]+$`), "must match pattern "+regexp.MustCompile(`^[a-z0-9!#$%&'*+\-.^_\x60|~]+$`).String()),
																						},
																					},
																					"value": schema.StringAttribute{
																						Optional:    true,
																						Description: `Not Null`,
																						Validators: []validator.String{
																							speakeasy_stringvalidators.NotNull(),
																						},
																					},
																				},
																			},
																			Validators: []validator.List{
																				listvalidator.SizeAtMost(16),
																			},
																		},
																	},
																	Description: `The Headers to be added to the HTTP response on a rate limit event`,
																},
																"status": schema.Int32Attribute{
																	Computed:    true,
																	Optional:    true,
																	Description: `The HTTP status code to be set on a rate limit event`,
																},
															},
															Description: `Describes the actions to take on a rate limit event`,
														},
														"request_rate": schema.SingleNestedAttribute{
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"interval": schema.StringAttribute{
																	Optional:    true,
																	Description: `The interval the number of units is accounted for. Not Null`,
																	Validators: []validator.String{
																		speakeasy_stringvalidators.NotNull(),
																	},
																},
																"num": schema.Int32Attribute{
																	Optional: true,
																	MarkdownDescription: `Number of units per interval (depending on usage it can be a number of requests,` + "\n" +
																		`or a number of connections).` + "\n" +
																		`Not Null`,
																	Validators: []validator.Int32{
																		speakeasy_int32validators.NotNull(),
																	},
																},
															},
															Description: `Defines how many requests are allowed per interval.`,
														},
													},
													MarkdownDescription: `LocalHTTP defines configuration of local HTTP rate limiting` + "\n" +
														`https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/local_rate_limit_filter`,
												},
												"tcp": schema.SingleNestedAttribute{
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"connection_rate": schema.SingleNestedAttribute{
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"interval": schema.StringAttribute{
																	Optional:    true,
																	Description: `The interval the number of units is accounted for. Not Null`,
																	Validators: []validator.String{
																		speakeasy_stringvalidators.NotNull(),
																	},
																},
																"num": schema.Int32Attribute{
																	Optional: true,
																	MarkdownDescription: `Number of units per interval (depending on usage it can be a number of requests,` + "\n" +
																		`or a number of connections).` + "\n" +
																		`Not Null`,
																	Validators: []validator.Int32{
																		speakeasy_int32validators.NotNull(),
																	},
																},
															},
															Description: `Defines how many connections are allowed per interval.`,
														},
														"disabled": schema.BoolAttribute{
															Optional: true,
															MarkdownDescription: `Define if rate limiting should be disabled.` + "\n" +
																`Default: false`,
														},
													},
													MarkdownDescription: `LocalTCP defines confguration of local TCP rate limiting` + "\n" +
														`https://www.envoyproxy.io/docs/envoy/latest/configuration/listeners/network_filters/local_rate_limit_filter`,
												},
											},
											Description: `LocalConf defines local http or/and tcp rate limit configuration`,
										},
									},
									Description: `Default contains configuration of the inbound rate limits`,
								},
							},
						},
						MarkdownDescription: `Rules defines inbound rate limiting configurations. Currently limited to` + "\n" +
							`selecting all inbound traffic, as L7 matching is not yet implemented.`,
					},
					"target_ref": schema.SingleNestedAttribute{
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"kind": schema.StringAttribute{
								Required:    true,
								Description: `Kind of the referenced resource. must be one of ["Mesh", "MeshSubset", "MeshGateway", "MeshService", "MeshExternalService", "MeshMultiZoneService", "MeshServiceSubset", "MeshHTTPRoute", "Dataplane"]`,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"Mesh",
										"MeshSubset",
										"MeshGateway",
										"MeshService",
										"MeshExternalService",
										"MeshMultiZoneService",
										"MeshServiceSubset",
										"MeshHTTPRoute",
										"Dataplane",
									),
								},
							},
							"labels": schema.MapAttribute{
								Optional:    true,
								ElementType: types.StringType,
								MarkdownDescription: `Labels are used to select group of MeshServices that match labels. Either Labels or` + "\n" +
									`Name and Namespace can be used.`,
							},
							"mesh": schema.StringAttribute{
								Optional:    true,
								Description: `Mesh is reserved for future use to identify cross mesh resources.`,
							},
							"name": schema.StringAttribute{
								Optional: true,
								MarkdownDescription: `Name of the referenced resource. Can only be used with kinds: ` + "`" + `MeshService` + "`" + `,` + "\n" +
									`` + "`" + `MeshServiceSubset` + "`" + ` and ` + "`" + `MeshGatewayRoute` + "`" + ``,
							},
							"namespace": schema.StringAttribute{
								Optional: true,
								MarkdownDescription: `Namespace specifies the namespace of target resource. If empty only resources in policy namespace` + "\n" +
									`will be targeted.`,
							},
							"proxy_types": schema.ListAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.List{
									custom_listplanmodifier.SupressZeroNullModifier(),
								},
								ElementType: types.StringType,
								MarkdownDescription: `ProxyTypes specifies the data plane types that are subject to the policy. When not specified,` + "\n" +
									`all data plane types are targeted by the policy.`,
							},
							"section_name": schema.StringAttribute{
								Optional: true,
								MarkdownDescription: `SectionName is used to target specific section of resource.` + "\n" +
									`For example, you can target port from MeshService.ports[] by its name. Only traffic to this port will be affected.`,
							},
							"tags": schema.MapAttribute{
								Optional:    true,
								ElementType: types.StringType,
								MarkdownDescription: `Tags used to select a subset of proxies by tags. Can only be used with kinds` + "\n" +
									`` + "`" + `MeshSubset` + "`" + ` and ` + "`" + `MeshServiceSubset` + "`" + ``,
							},
						},
						MarkdownDescription: `TargetRef is a reference to the resource the policy takes an effect on.` + "\n" +
							`The resource could be either a real store object or virtual resource` + "\n" +
							`defined inplace.`,
					},
					"to": schema.ListNestedAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.List{
							custom_listplanmodifier.SupressZeroNullModifier(),
						},
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"default": schema.SingleNestedAttribute{
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"local": schema.SingleNestedAttribute{
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"http": schema.SingleNestedAttribute{
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"disabled": schema.BoolAttribute{
															Optional:    true,
															Description: `Define if rate limiting should be disabled.`,
														},
														"on_rate_limit": schema.SingleNestedAttribute{
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"headers": schema.SingleNestedAttribute{
																	Optional: true,
																	Attributes: map[string]schema.Attribute{
																		"add": schema.ListNestedAttribute{
																			Computed: true,
																			Optional: true,
																			PlanModifiers: []planmodifier.List{
																				custom_listplanmodifier.SupressZeroNullModifier(),
																			},
																			NestedObject: schema.NestedAttributeObject{
																				Validators: []validator.Object{
																					speakeasy_objectvalidators.NotNull(),
																				},
																				Attributes: map[string]schema.Attribute{
																					"name": schema.StringAttribute{
																						Optional:    true,
																						Description: `Not Null`,
																						Validators: []validator.String{
																							speakeasy_stringvalidators.NotNull(),
																							stringvalidator.UTF8LengthBetween(1, 256),
																							stringvalidator.RegexMatches(regexp.MustCompile(`^[a-z0-9!#$%&'*+\-.^_\x60|~]+$`), "must match pattern "+regexp.MustCompile(`^[a-z0-9!#$%&'*+\-.^_\x60|~]+$`).String()),
																						},
																					},
																					"value": schema.StringAttribute{
																						Optional:    true,
																						Description: `Not Null`,
																						Validators: []validator.String{
																							speakeasy_stringvalidators.NotNull(),
																						},
																					},
																				},
																			},
																			Validators: []validator.List{
																				listvalidator.SizeAtMost(16),
																			},
																		},
																		"set": schema.ListNestedAttribute{
																			Computed: true,
																			Optional: true,
																			PlanModifiers: []planmodifier.List{
																				custom_listplanmodifier.SupressZeroNullModifier(),
																			},
																			NestedObject: schema.NestedAttributeObject{
																				Validators: []validator.Object{
																					speakeasy_objectvalidators.NotNull(),
																				},
																				Attributes: map[string]schema.Attribute{
																					"name": schema.StringAttribute{
																						Optional:    true,
																						Description: `Not Null`,
																						Validators: []validator.String{
																							speakeasy_stringvalidators.NotNull(),
																							stringvalidator.UTF8LengthBetween(1, 256),
																							stringvalidator.RegexMatches(regexp.MustCompile(`^[a-z0-9!#$%&'*+\-.^_\x60|~]+$`), "must match pattern "+regexp.MustCompile(`^[a-z0-9!#$%&'*+\-.^_\x60|~]+$`).String()),
																						},
																					},
																					"value": schema.StringAttribute{
																						Optional:    true,
																						Description: `Not Null`,
																						Validators: []validator.String{
																							speakeasy_stringvalidators.NotNull(),
																						},
																					},
																				},
																			},
																			Validators: []validator.List{
																				listvalidator.SizeAtMost(16),
																			},
																		},
																	},
																	Description: `The Headers to be added to the HTTP response on a rate limit event`,
																},
																"status": schema.Int32Attribute{
																	Computed:    true,
																	Optional:    true,
																	Description: `The HTTP status code to be set on a rate limit event`,
																},
															},
															Description: `Describes the actions to take on a rate limit event`,
														},
														"request_rate": schema.SingleNestedAttribute{
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"interval": schema.StringAttribute{
																	Optional:    true,
																	Description: `The interval the number of units is accounted for. Not Null`,
																	Validators: []validator.String{
																		speakeasy_stringvalidators.NotNull(),
																	},
																},
																"num": schema.Int32Attribute{
																	Optional: true,
																	MarkdownDescription: `Number of units per interval (depending on usage it can be a number of requests,` + "\n" +
																		`or a number of connections).` + "\n" +
																		`Not Null`,
																	Validators: []validator.Int32{
																		speakeasy_int32validators.NotNull(),
																	},
																},
															},
															Description: `Defines how many requests are allowed per interval.`,
														},
													},
													MarkdownDescription: `LocalHTTP defines configuration of local HTTP rate limiting` + "\n" +
														`https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/local_rate_limit_filter`,
												},
												"tcp": schema.SingleNestedAttribute{
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"connection_rate": schema.SingleNestedAttribute{
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"interval": schema.StringAttribute{
																	Optional:    true,
																	Description: `The interval the number of units is accounted for. Not Null`,
																	Validators: []validator.String{
																		speakeasy_stringvalidators.NotNull(),
																	},
																},
																"num": schema.Int32Attribute{
																	Optional: true,
																	MarkdownDescription: `Number of units per interval (depending on usage it can be a number of requests,` + "\n" +
																		`or a number of connections).` + "\n" +
																		`Not Null`,
																	Validators: []validator.Int32{
																		speakeasy_int32validators.NotNull(),
																	},
																},
															},
															Description: `Defines how many connections are allowed per interval.`,
														},
														"disabled": schema.BoolAttribute{
															Optional: true,
															MarkdownDescription: `Define if rate limiting should be disabled.` + "\n" +
																`Default: false`,
														},
													},
													MarkdownDescription: `LocalTCP defines confguration of local TCP rate limiting` + "\n" +
														`https://www.envoyproxy.io/docs/envoy/latest/configuration/listeners/network_filters/local_rate_limit_filter`,
												},
											},
											Description: `LocalConf defines local http or/and tcp rate limit configuration`,
										},
									},
									MarkdownDescription: `Default is a configuration specific to the group of clients referenced in` + "\n" +
										`'targetRef'`,
								},
								"target_ref": schema.SingleNestedAttribute{
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"kind": schema.StringAttribute{
											Optional:    true,
											Description: `Kind of the referenced resource. Not Null; must be one of ["Mesh", "MeshSubset", "MeshGateway", "MeshService", "MeshExternalService", "MeshMultiZoneService", "MeshServiceSubset", "MeshHTTPRoute", "Dataplane"]`,
											Validators: []validator.String{
												speakeasy_stringvalidators.NotNull(),
												stringvalidator.OneOf(
													"Mesh",
													"MeshSubset",
													"MeshGateway",
													"MeshService",
													"MeshExternalService",
													"MeshMultiZoneService",
													"MeshServiceSubset",
													"MeshHTTPRoute",
													"Dataplane",
												),
											},
										},
										"labels": schema.MapAttribute{
											Optional:    true,
											ElementType: types.StringType,
											MarkdownDescription: `Labels are used to select group of MeshServices that match labels. Either Labels or` + "\n" +
												`Name and Namespace can be used.`,
										},
										"mesh": schema.StringAttribute{
											Optional:    true,
											Description: `Mesh is reserved for future use to identify cross mesh resources.`,
										},
										"name": schema.StringAttribute{
											Optional: true,
											MarkdownDescription: `Name of the referenced resource. Can only be used with kinds: ` + "`" + `MeshService` + "`" + `,` + "\n" +
												`` + "`" + `MeshServiceSubset` + "`" + ` and ` + "`" + `MeshGatewayRoute` + "`" + ``,
										},
										"namespace": schema.StringAttribute{
											Optional: true,
											MarkdownDescription: `Namespace specifies the namespace of target resource. If empty only resources in policy namespace` + "\n" +
												`will be targeted.`,
										},
										"proxy_types": schema.ListAttribute{
											Computed: true,
											Optional: true,
											PlanModifiers: []planmodifier.List{
												custom_listplanmodifier.SupressZeroNullModifier(),
											},
											ElementType: types.StringType,
											MarkdownDescription: `ProxyTypes specifies the data plane types that are subject to the policy. When not specified,` + "\n" +
												`all data plane types are targeted by the policy.`,
										},
										"section_name": schema.StringAttribute{
											Optional: true,
											MarkdownDescription: `SectionName is used to target specific section of resource.` + "\n" +
												`For example, you can target port from MeshService.ports[] by its name. Only traffic to this port will be affected.`,
										},
										"tags": schema.MapAttribute{
											Optional:    true,
											ElementType: types.StringType,
											MarkdownDescription: `Tags used to select a subset of proxies by tags. Can only be used with kinds` + "\n" +
												`` + "`" + `MeshSubset` + "`" + ` and ` + "`" + `MeshServiceSubset` + "`" + ``,
										},
									},
									MarkdownDescription: `TargetRef is a reference to the resource that represents a group of` + "\n" +
										`clients.` + "\n" +
										`Not Null`,
									Validators: []validator.Object{
										speakeasy_objectvalidators.NotNull(),
									},
								},
							},
						},
						Description: `To list makes a match between clients and corresponding configurations`,
					},
				},
				Description: `Spec is the specification of the Kuma MeshRateLimit resource.`,
			},
			"type": schema.StringAttribute{
				Required:    true,
				Description: `the type of the resource. must be "MeshRateLimit"`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"MeshRateLimit",
					),
				},
			},
			"warnings": schema.ListAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.List{
					custom_listplanmodifier.SupressZeroNullModifier(),
					speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
				},
				ElementType: types.StringType,
				MarkdownDescription: `warnings is a list of warning messages to return to the requesting Kuma API clients.` + "\n" +
					`Warning messages describe a problem the client making the API request should correct or be aware of.`,
			},
		},
	}
}

func (r *MeshRateLimitResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.KongMesh)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.KongMesh, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *MeshRateLimitResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *MeshRateLimitResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsPutMeshRateLimitRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.MeshRateLimit.PutMeshRateLimit(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	switch res.StatusCode {
	case 200, 201:
		break
	default:
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.MeshRateLimitCreateOrUpdateSuccessResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedMeshRateLimitCreateOrUpdateSuccessResponse(ctx, res.MeshRateLimitCreateOrUpdateSuccessResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}
	request1, request1Diags := data.ToOperationsGetMeshRateLimitRequest(ctx)
	resp.Diagnostics.Append(request1Diags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res1, err := r.client.MeshRateLimit.GetMeshRateLimit(ctx, *request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.MeshRateLimitItem != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedMeshRateLimitItem(ctx, res1.MeshRateLimitItem)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *MeshRateLimitResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *MeshRateLimitResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetMeshRateLimitRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.MeshRateLimit.GetMeshRateLimit(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.MeshRateLimitItem != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedMeshRateLimitItem(ctx, res.MeshRateLimitItem)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *MeshRateLimitResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *MeshRateLimitResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsPutMeshRateLimitRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.MeshRateLimit.PutMeshRateLimit(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	switch res.StatusCode {
	case 200, 201:
		break
	default:
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.MeshRateLimitCreateOrUpdateSuccessResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedMeshRateLimitCreateOrUpdateSuccessResponse(ctx, res.MeshRateLimitCreateOrUpdateSuccessResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}
	request1, request1Diags := data.ToOperationsGetMeshRateLimitRequest(ctx)
	resp.Diagnostics.Append(request1Diags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res1, err := r.client.MeshRateLimit.GetMeshRateLimit(ctx, *request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.MeshRateLimitItem != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedMeshRateLimitItem(ctx, res1.MeshRateLimitItem)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *MeshRateLimitResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *MeshRateLimitResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDeleteMeshRateLimitRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.MeshRateLimit.DeleteMeshRateLimit(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *MeshRateLimitResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	dec := json.NewDecoder(bytes.NewReader([]byte(req.ID)))
	dec.DisallowUnknownFields()
	var data struct {
		Mesh string `json:"mesh"`
		Name string `json:"name"`
	}

	if err := dec.Decode(&data); err != nil {
		resp.Diagnostics.AddError("Invalid ID", `The import ID is not valid. It is expected to be a JSON object string with the format: '{"mesh": "...", "name": "..."}': `+err.Error())
		return
	}

	if len(data.Mesh) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field mesh is required but was not found in the json encoded ID. It's expected to be a value alike '""`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("mesh"), data.Mesh)...)
	if len(data.Name) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field name is required but was not found in the json encoded ID. It's expected to be a value alike '""`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("name"), data.Name)...)
}
