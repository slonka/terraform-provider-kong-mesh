// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/Kong/shared-speakeasy/customtypes/kumalabels"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-kong-mesh/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-kong-mesh/internal/provider/types"
	"github.com/kong/terraform-provider-kong-mesh/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-kong-mesh/internal/sdk/models/shared"
)

func (r *MeshFaultInjectionResourceModel) RefreshFromSharedMeshFaultInjectionCreateOrUpdateSuccessResponse(ctx context.Context, resp *shared.MeshFaultInjectionCreateOrUpdateSuccessResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Warnings = make([]types.String, 0, len(resp.Warnings))
		for _, v := range resp.Warnings {
			r.Warnings = append(r.Warnings, types.StringValue(v))
		}
	}

	return diags
}

func (r *MeshFaultInjectionResourceModel) RefreshFromSharedMeshFaultInjectionItem(ctx context.Context, resp *shared.MeshFaultInjectionItem) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreationTime))
		labelsValue, labelsDiags := types.MapValueFrom(ctx, types.StringType, resp.Labels)
		diags.Append(labelsDiags...)
		labelsValuable, labelsDiags := kumalabels.KumaLabelsMapType{MapType: types.MapType{ElemType: types.StringType}}.ValueFromMap(ctx, labelsValue)
		diags.Append(labelsDiags...)
		r.Labels, _ = labelsValuable.(kumalabels.KumaLabelsMapValue)
		r.Mesh = types.StringPointerValue(resp.Mesh)
		r.ModificationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.ModificationTime))
		r.Name = types.StringValue(resp.Name)
		r.Spec.From = []tfTypes.MeshFaultInjectionItemFrom{}

		for _, fromItem := range resp.Spec.From {
			var from tfTypes.MeshFaultInjectionItemFrom

			if fromItem.Default == nil {
				from.Default = nil
			} else {
				from.Default = &tfTypes.MeshFaultInjectionItemDefault{}
				from.Default.HTTP = []tfTypes.HTTP{}

				for _, httpItem := range fromItem.Default.HTTP {
					var http tfTypes.HTTP

					if httpItem.Abort == nil {
						http.Abort = nil
					} else {
						http.Abort = &tfTypes.Abort{}
						http.Abort.HTTPStatus = types.Int32Value(int32(httpItem.Abort.HTTPStatus))
						if httpItem.Abort.Percentage.Integer != nil {
							http.Abort.Percentage.Integer = types.Int64PointerValue(httpItem.Abort.Percentage.Integer)
						}
						if httpItem.Abort.Percentage.Str != nil {
							http.Abort.Percentage.Str = types.StringPointerValue(httpItem.Abort.Percentage.Str)
						}
					}
					if httpItem.Delay == nil {
						http.Delay = nil
					} else {
						http.Delay = &tfTypes.Delay{}
						if httpItem.Delay.Percentage.Integer != nil {
							http.Delay.Percentage.Integer = types.Int64PointerValue(httpItem.Delay.Percentage.Integer)
						}
						if httpItem.Delay.Percentage.Str != nil {
							http.Delay.Percentage.Str = types.StringPointerValue(httpItem.Delay.Percentage.Str)
						}
						http.Delay.Value = types.StringValue(httpItem.Delay.Value)
					}
					if httpItem.ResponseBandwidth == nil {
						http.ResponseBandwidth = nil
					} else {
						http.ResponseBandwidth = &tfTypes.ResponseBandwidth{}
						http.ResponseBandwidth.Limit = types.StringValue(httpItem.ResponseBandwidth.Limit)
						if httpItem.ResponseBandwidth.Percentage.Integer != nil {
							http.ResponseBandwidth.Percentage.Integer = types.Int64PointerValue(httpItem.ResponseBandwidth.Percentage.Integer)
						}
						if httpItem.ResponseBandwidth.Percentage.Str != nil {
							http.ResponseBandwidth.Percentage.Str = types.StringPointerValue(httpItem.ResponseBandwidth.Percentage.Str)
						}
					}

					from.Default.HTTP = append(from.Default.HTTP, http)
				}
			}
			from.TargetRef.Kind = types.StringValue(string(fromItem.TargetRef.Kind))
			if len(fromItem.TargetRef.Labels) > 0 {
				from.TargetRef.Labels = make(map[string]types.String, len(fromItem.TargetRef.Labels))
				for key, value := range fromItem.TargetRef.Labels {
					from.TargetRef.Labels[key] = types.StringValue(value)
				}
			}
			from.TargetRef.Mesh = types.StringPointerValue(fromItem.TargetRef.Mesh)
			from.TargetRef.Name = types.StringPointerValue(fromItem.TargetRef.Name)
			from.TargetRef.Namespace = types.StringPointerValue(fromItem.TargetRef.Namespace)
			from.TargetRef.ProxyTypes = make([]types.String, 0, len(fromItem.TargetRef.ProxyTypes))
			for _, v := range fromItem.TargetRef.ProxyTypes {
				from.TargetRef.ProxyTypes = append(from.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			from.TargetRef.SectionName = types.StringPointerValue(fromItem.TargetRef.SectionName)
			if len(fromItem.TargetRef.Tags) > 0 {
				from.TargetRef.Tags = make(map[string]types.String, len(fromItem.TargetRef.Tags))
				for key1, value1 := range fromItem.TargetRef.Tags {
					from.TargetRef.Tags[key1] = types.StringValue(value1)
				}
			}

			r.Spec.From = append(r.Spec.From, from)
		}
		r.Spec.Rules = []tfTypes.MeshFaultInjectionItemRules{}

		for _, rulesItem := range resp.Spec.Rules {
			var rules tfTypes.MeshFaultInjectionItemRules

			rules.Default.HTTP = []tfTypes.HTTP{}

			for _, httpItem1 := range rulesItem.Default.HTTP {
				var http1 tfTypes.HTTP

				if httpItem1.Abort == nil {
					http1.Abort = nil
				} else {
					http1.Abort = &tfTypes.Abort{}
					http1.Abort.HTTPStatus = types.Int32Value(int32(httpItem1.Abort.HTTPStatus))
					if httpItem1.Abort.Percentage.Integer != nil {
						http1.Abort.Percentage.Integer = types.Int64PointerValue(httpItem1.Abort.Percentage.Integer)
					}
					if httpItem1.Abort.Percentage.Str != nil {
						http1.Abort.Percentage.Str = types.StringPointerValue(httpItem1.Abort.Percentage.Str)
					}
				}
				if httpItem1.Delay == nil {
					http1.Delay = nil
				} else {
					http1.Delay = &tfTypes.Delay{}
					if httpItem1.Delay.Percentage.Integer != nil {
						http1.Delay.Percentage.Integer = types.Int64PointerValue(httpItem1.Delay.Percentage.Integer)
					}
					if httpItem1.Delay.Percentage.Str != nil {
						http1.Delay.Percentage.Str = types.StringPointerValue(httpItem1.Delay.Percentage.Str)
					}
					http1.Delay.Value = types.StringValue(httpItem1.Delay.Value)
				}
				if httpItem1.ResponseBandwidth == nil {
					http1.ResponseBandwidth = nil
				} else {
					http1.ResponseBandwidth = &tfTypes.ResponseBandwidth{}
					http1.ResponseBandwidth.Limit = types.StringValue(httpItem1.ResponseBandwidth.Limit)
					if httpItem1.ResponseBandwidth.Percentage.Integer != nil {
						http1.ResponseBandwidth.Percentage.Integer = types.Int64PointerValue(httpItem1.ResponseBandwidth.Percentage.Integer)
					}
					if httpItem1.ResponseBandwidth.Percentage.Str != nil {
						http1.ResponseBandwidth.Percentage.Str = types.StringPointerValue(httpItem1.ResponseBandwidth.Percentage.Str)
					}
				}

				rules.Default.HTTP = append(rules.Default.HTTP, http1)
			}
			rules.Matches = []tfTypes.Matches{}

			for _, matchesItem := range rulesItem.Matches {
				var matches tfTypes.Matches

				if matchesItem.SpiffeID == nil {
					matches.SpiffeID = nil
				} else {
					matches.SpiffeID = &tfTypes.MeshFaultInjectionItemSpiffeID{}
					matches.SpiffeID.Type = types.StringValue(string(matchesItem.SpiffeID.Type))
					matches.SpiffeID.Value = types.StringValue(matchesItem.SpiffeID.Value)
				}

				rules.Matches = append(rules.Matches, matches)
			}

			r.Spec.Rules = append(r.Spec.Rules, rules)
		}
		if resp.Spec.TargetRef == nil {
			r.Spec.TargetRef = nil
		} else {
			r.Spec.TargetRef = &tfTypes.MeshAccessLogItemTargetRef{}
			r.Spec.TargetRef.Kind = types.StringValue(string(resp.Spec.TargetRef.Kind))
			if len(resp.Spec.TargetRef.Labels) > 0 {
				r.Spec.TargetRef.Labels = make(map[string]types.String, len(resp.Spec.TargetRef.Labels))
				for key2, value2 := range resp.Spec.TargetRef.Labels {
					r.Spec.TargetRef.Labels[key2] = types.StringValue(value2)
				}
			}
			r.Spec.TargetRef.Mesh = types.StringPointerValue(resp.Spec.TargetRef.Mesh)
			r.Spec.TargetRef.Name = types.StringPointerValue(resp.Spec.TargetRef.Name)
			r.Spec.TargetRef.Namespace = types.StringPointerValue(resp.Spec.TargetRef.Namespace)
			r.Spec.TargetRef.ProxyTypes = make([]types.String, 0, len(resp.Spec.TargetRef.ProxyTypes))
			for _, v := range resp.Spec.TargetRef.ProxyTypes {
				r.Spec.TargetRef.ProxyTypes = append(r.Spec.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			r.Spec.TargetRef.SectionName = types.StringPointerValue(resp.Spec.TargetRef.SectionName)
			if len(resp.Spec.TargetRef.Tags) > 0 {
				r.Spec.TargetRef.Tags = make(map[string]types.String, len(resp.Spec.TargetRef.Tags))
				for key3, value3 := range resp.Spec.TargetRef.Tags {
					r.Spec.TargetRef.Tags[key3] = types.StringValue(value3)
				}
			}
		}
		r.Spec.To = []tfTypes.MeshFaultInjectionItemFrom{}

		for _, toItem := range resp.Spec.To {
			var to tfTypes.MeshFaultInjectionItemFrom

			if toItem.Default == nil {
				to.Default = nil
			} else {
				to.Default = &tfTypes.MeshFaultInjectionItemDefault{}
				to.Default.HTTP = []tfTypes.HTTP{}

				for _, httpItem2 := range toItem.Default.HTTP {
					var http2 tfTypes.HTTP

					if httpItem2.Abort == nil {
						http2.Abort = nil
					} else {
						http2.Abort = &tfTypes.Abort{}
						http2.Abort.HTTPStatus = types.Int32Value(int32(httpItem2.Abort.HTTPStatus))
						if httpItem2.Abort.Percentage.Integer != nil {
							http2.Abort.Percentage.Integer = types.Int64PointerValue(httpItem2.Abort.Percentage.Integer)
						}
						if httpItem2.Abort.Percentage.Str != nil {
							http2.Abort.Percentage.Str = types.StringPointerValue(httpItem2.Abort.Percentage.Str)
						}
					}
					if httpItem2.Delay == nil {
						http2.Delay = nil
					} else {
						http2.Delay = &tfTypes.Delay{}
						if httpItem2.Delay.Percentage.Integer != nil {
							http2.Delay.Percentage.Integer = types.Int64PointerValue(httpItem2.Delay.Percentage.Integer)
						}
						if httpItem2.Delay.Percentage.Str != nil {
							http2.Delay.Percentage.Str = types.StringPointerValue(httpItem2.Delay.Percentage.Str)
						}
						http2.Delay.Value = types.StringValue(httpItem2.Delay.Value)
					}
					if httpItem2.ResponseBandwidth == nil {
						http2.ResponseBandwidth = nil
					} else {
						http2.ResponseBandwidth = &tfTypes.ResponseBandwidth{}
						http2.ResponseBandwidth.Limit = types.StringValue(httpItem2.ResponseBandwidth.Limit)
						if httpItem2.ResponseBandwidth.Percentage.Integer != nil {
							http2.ResponseBandwidth.Percentage.Integer = types.Int64PointerValue(httpItem2.ResponseBandwidth.Percentage.Integer)
						}
						if httpItem2.ResponseBandwidth.Percentage.Str != nil {
							http2.ResponseBandwidth.Percentage.Str = types.StringPointerValue(httpItem2.ResponseBandwidth.Percentage.Str)
						}
					}

					to.Default.HTTP = append(to.Default.HTTP, http2)
				}
			}
			to.TargetRef.Kind = types.StringValue(string(toItem.TargetRef.Kind))
			if len(toItem.TargetRef.Labels) > 0 {
				to.TargetRef.Labels = make(map[string]types.String, len(toItem.TargetRef.Labels))
				for key4, value4 := range toItem.TargetRef.Labels {
					to.TargetRef.Labels[key4] = types.StringValue(value4)
				}
			}
			to.TargetRef.Mesh = types.StringPointerValue(toItem.TargetRef.Mesh)
			to.TargetRef.Name = types.StringPointerValue(toItem.TargetRef.Name)
			to.TargetRef.Namespace = types.StringPointerValue(toItem.TargetRef.Namespace)
			to.TargetRef.ProxyTypes = make([]types.String, 0, len(toItem.TargetRef.ProxyTypes))
			for _, v := range toItem.TargetRef.ProxyTypes {
				to.TargetRef.ProxyTypes = append(to.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			to.TargetRef.SectionName = types.StringPointerValue(toItem.TargetRef.SectionName)
			if len(toItem.TargetRef.Tags) > 0 {
				to.TargetRef.Tags = make(map[string]types.String, len(toItem.TargetRef.Tags))
				for key5, value5 := range toItem.TargetRef.Tags {
					to.TargetRef.Tags[key5] = types.StringValue(value5)
				}
			}

			r.Spec.To = append(r.Spec.To, to)
		}
		r.Type = types.StringValue(string(resp.Type))
	}

	return diags
}

func (r *MeshFaultInjectionResourceModel) ToOperationsDeleteMeshFaultInjectionRequest(ctx context.Context) (*operations.DeleteMeshFaultInjectionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var mesh string
	mesh = r.Mesh.ValueString()

	var name string
	name = r.Name.ValueString()

	out := operations.DeleteMeshFaultInjectionRequest{
		Mesh: mesh,
		Name: name,
	}

	return &out, diags
}

func (r *MeshFaultInjectionResourceModel) ToOperationsGetMeshFaultInjectionRequest(ctx context.Context) (*operations.GetMeshFaultInjectionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var mesh string
	mesh = r.Mesh.ValueString()

	var name string
	name = r.Name.ValueString()

	out := operations.GetMeshFaultInjectionRequest{
		Mesh: mesh,
		Name: name,
	}

	return &out, diags
}

func (r *MeshFaultInjectionResourceModel) ToOperationsPutMeshFaultInjectionRequest(ctx context.Context) (*operations.PutMeshFaultInjectionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var mesh string
	mesh = r.Mesh.ValueString()

	var name string
	name = r.Name.ValueString()

	meshFaultInjectionItem, meshFaultInjectionItemDiags := r.ToSharedMeshFaultInjectionItemInput(ctx)
	diags.Append(meshFaultInjectionItemDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PutMeshFaultInjectionRequest{
		Mesh:                   mesh,
		Name:                   name,
		MeshFaultInjectionItem: *meshFaultInjectionItem,
	}

	return &out, diags
}

func (r *MeshFaultInjectionResourceModel) ToSharedMeshFaultInjectionItemInput(ctx context.Context) (*shared.MeshFaultInjectionItemInput, diag.Diagnostics) {
	var diags diag.Diagnostics

	typeVar := shared.MeshFaultInjectionItemType(r.Type.ValueString())
	mesh := new(string)
	if !r.Mesh.IsUnknown() && !r.Mesh.IsNull() {
		*mesh = r.Mesh.ValueString()
	} else {
		mesh = nil
	}
	var name string
	name = r.Name.ValueString()

	var labels map[string]string
	if !r.Labels.IsUnknown() && !r.Labels.IsNull() {
		diags.Append(r.Labels.ElementsAs(ctx, &labels, true)...)
	}
	from := make([]shared.MeshFaultInjectionItemFrom, 0, len(r.Spec.From))
	for _, fromItem := range r.Spec.From {
		var defaultVar *shared.MeshFaultInjectionItemDefault
		if fromItem.Default != nil {
			http := make([]shared.HTTP, 0, len(fromItem.Default.HTTP))
			for _, httpItem := range fromItem.Default.HTTP {
				var abort *shared.Abort
				if httpItem.Abort != nil {
					var httpStatus int
					httpStatus = int(httpItem.Abort.HTTPStatus.ValueInt32())

					var percentage shared.Percentage
					integer := new(int64)
					if !httpItem.Abort.Percentage.Integer.IsUnknown() && !httpItem.Abort.Percentage.Integer.IsNull() {
						*integer = httpItem.Abort.Percentage.Integer.ValueInt64()
					} else {
						integer = nil
					}
					if integer != nil {
						percentage = shared.Percentage{
							Integer: integer,
						}
					}
					str := new(string)
					if !httpItem.Abort.Percentage.Str.IsUnknown() && !httpItem.Abort.Percentage.Str.IsNull() {
						*str = httpItem.Abort.Percentage.Str.ValueString()
					} else {
						str = nil
					}
					if str != nil {
						percentage = shared.Percentage{
							Str: str,
						}
					}
					abort = &shared.Abort{
						HTTPStatus: httpStatus,
						Percentage: percentage,
					}
				}
				var delay *shared.Delay
				if httpItem.Delay != nil {
					var percentage1 shared.MeshFaultInjectionItemPercentage
					integer1 := new(int64)
					if !httpItem.Delay.Percentage.Integer.IsUnknown() && !httpItem.Delay.Percentage.Integer.IsNull() {
						*integer1 = httpItem.Delay.Percentage.Integer.ValueInt64()
					} else {
						integer1 = nil
					}
					if integer1 != nil {
						percentage1 = shared.MeshFaultInjectionItemPercentage{
							Integer: integer1,
						}
					}
					str1 := new(string)
					if !httpItem.Delay.Percentage.Str.IsUnknown() && !httpItem.Delay.Percentage.Str.IsNull() {
						*str1 = httpItem.Delay.Percentage.Str.ValueString()
					} else {
						str1 = nil
					}
					if str1 != nil {
						percentage1 = shared.MeshFaultInjectionItemPercentage{
							Str: str1,
						}
					}
					var value string
					value = httpItem.Delay.Value.ValueString()

					delay = &shared.Delay{
						Percentage: percentage1,
						Value:      value,
					}
				}
				var responseBandwidth *shared.ResponseBandwidth
				if httpItem.ResponseBandwidth != nil {
					var limit string
					limit = httpItem.ResponseBandwidth.Limit.ValueString()

					var percentage2 shared.MeshFaultInjectionItemSpecPercentage
					integer2 := new(int64)
					if !httpItem.ResponseBandwidth.Percentage.Integer.IsUnknown() && !httpItem.ResponseBandwidth.Percentage.Integer.IsNull() {
						*integer2 = httpItem.ResponseBandwidth.Percentage.Integer.ValueInt64()
					} else {
						integer2 = nil
					}
					if integer2 != nil {
						percentage2 = shared.MeshFaultInjectionItemSpecPercentage{
							Integer: integer2,
						}
					}
					str2 := new(string)
					if !httpItem.ResponseBandwidth.Percentage.Str.IsUnknown() && !httpItem.ResponseBandwidth.Percentage.Str.IsNull() {
						*str2 = httpItem.ResponseBandwidth.Percentage.Str.ValueString()
					} else {
						str2 = nil
					}
					if str2 != nil {
						percentage2 = shared.MeshFaultInjectionItemSpecPercentage{
							Str: str2,
						}
					}
					responseBandwidth = &shared.ResponseBandwidth{
						Limit:      limit,
						Percentage: percentage2,
					}
				}
				http = append(http, shared.HTTP{
					Abort:             abort,
					Delay:             delay,
					ResponseBandwidth: responseBandwidth,
				})
			}
			defaultVar = &shared.MeshFaultInjectionItemDefault{
				HTTP: http,
			}
		}
		kind := shared.MeshFaultInjectionItemSpecKind(fromItem.TargetRef.Kind.ValueString())
		labels1 := make(map[string]string)
		for labelsKey, labelsValue := range fromItem.TargetRef.Labels {
			var labelsInst string
			labelsInst = labelsValue.ValueString()

			labels1[labelsKey] = labelsInst
		}
		mesh1 := new(string)
		if !fromItem.TargetRef.Mesh.IsUnknown() && !fromItem.TargetRef.Mesh.IsNull() {
			*mesh1 = fromItem.TargetRef.Mesh.ValueString()
		} else {
			mesh1 = nil
		}
		name1 := new(string)
		if !fromItem.TargetRef.Name.IsUnknown() && !fromItem.TargetRef.Name.IsNull() {
			*name1 = fromItem.TargetRef.Name.ValueString()
		} else {
			name1 = nil
		}
		namespace := new(string)
		if !fromItem.TargetRef.Namespace.IsUnknown() && !fromItem.TargetRef.Namespace.IsNull() {
			*namespace = fromItem.TargetRef.Namespace.ValueString()
		} else {
			namespace = nil
		}
		proxyTypes := make([]shared.MeshFaultInjectionItemSpecProxyTypes, 0, len(fromItem.TargetRef.ProxyTypes))
		for _, proxyTypesItem := range fromItem.TargetRef.ProxyTypes {
			proxyTypes = append(proxyTypes, shared.MeshFaultInjectionItemSpecProxyTypes(proxyTypesItem.ValueString()))
		}
		sectionName := new(string)
		if !fromItem.TargetRef.SectionName.IsUnknown() && !fromItem.TargetRef.SectionName.IsNull() {
			*sectionName = fromItem.TargetRef.SectionName.ValueString()
		} else {
			sectionName = nil
		}
		tags := make(map[string]string)
		for tagsKey, tagsValue := range fromItem.TargetRef.Tags {
			var tagsInst string
			tagsInst = tagsValue.ValueString()

			tags[tagsKey] = tagsInst
		}
		targetRef := shared.MeshFaultInjectionItemSpecTargetRef{
			Kind:        kind,
			Labels:      labels1,
			Mesh:        mesh1,
			Name:        name1,
			Namespace:   namespace,
			ProxyTypes:  proxyTypes,
			SectionName: sectionName,
			Tags:        tags,
		}
		from = append(from, shared.MeshFaultInjectionItemFrom{
			Default:   defaultVar,
			TargetRef: targetRef,
		})
	}
	rules := make([]shared.MeshFaultInjectionItemRules, 0, len(r.Spec.Rules))
	for _, rulesItem := range r.Spec.Rules {
		http1 := make([]shared.MeshFaultInjectionItemHTTP, 0, len(rulesItem.Default.HTTP))
		for _, httpItem1 := range rulesItem.Default.HTTP {
			var abort1 *shared.MeshFaultInjectionItemAbort
			if httpItem1.Abort != nil {
				var httpStatus1 int
				httpStatus1 = int(httpItem1.Abort.HTTPStatus.ValueInt32())

				var percentage3 shared.MeshFaultInjectionItemSpecRulesPercentage
				integer3 := new(int64)
				if !httpItem1.Abort.Percentage.Integer.IsUnknown() && !httpItem1.Abort.Percentage.Integer.IsNull() {
					*integer3 = httpItem1.Abort.Percentage.Integer.ValueInt64()
				} else {
					integer3 = nil
				}
				if integer3 != nil {
					percentage3 = shared.MeshFaultInjectionItemSpecRulesPercentage{
						Integer: integer3,
					}
				}
				str3 := new(string)
				if !httpItem1.Abort.Percentage.Str.IsUnknown() && !httpItem1.Abort.Percentage.Str.IsNull() {
					*str3 = httpItem1.Abort.Percentage.Str.ValueString()
				} else {
					str3 = nil
				}
				if str3 != nil {
					percentage3 = shared.MeshFaultInjectionItemSpecRulesPercentage{
						Str: str3,
					}
				}
				abort1 = &shared.MeshFaultInjectionItemAbort{
					HTTPStatus: httpStatus1,
					Percentage: percentage3,
				}
			}
			var delay1 *shared.MeshFaultInjectionItemDelay
			if httpItem1.Delay != nil {
				var percentage4 shared.MeshFaultInjectionItemSpecRulesDefaultPercentage
				integer4 := new(int64)
				if !httpItem1.Delay.Percentage.Integer.IsUnknown() && !httpItem1.Delay.Percentage.Integer.IsNull() {
					*integer4 = httpItem1.Delay.Percentage.Integer.ValueInt64()
				} else {
					integer4 = nil
				}
				if integer4 != nil {
					percentage4 = shared.MeshFaultInjectionItemSpecRulesDefaultPercentage{
						Integer: integer4,
					}
				}
				str4 := new(string)
				if !httpItem1.Delay.Percentage.Str.IsUnknown() && !httpItem1.Delay.Percentage.Str.IsNull() {
					*str4 = httpItem1.Delay.Percentage.Str.ValueString()
				} else {
					str4 = nil
				}
				if str4 != nil {
					percentage4 = shared.MeshFaultInjectionItemSpecRulesDefaultPercentage{
						Str: str4,
					}
				}
				var value1 string
				value1 = httpItem1.Delay.Value.ValueString()

				delay1 = &shared.MeshFaultInjectionItemDelay{
					Percentage: percentage4,
					Value:      value1,
				}
			}
			var responseBandwidth1 *shared.MeshFaultInjectionItemResponseBandwidth
			if httpItem1.ResponseBandwidth != nil {
				var limit1 string
				limit1 = httpItem1.ResponseBandwidth.Limit.ValueString()

				var percentage5 shared.MeshFaultInjectionItemSpecRulesDefaultHTTPPercentage
				integer5 := new(int64)
				if !httpItem1.ResponseBandwidth.Percentage.Integer.IsUnknown() && !httpItem1.ResponseBandwidth.Percentage.Integer.IsNull() {
					*integer5 = httpItem1.ResponseBandwidth.Percentage.Integer.ValueInt64()
				} else {
					integer5 = nil
				}
				if integer5 != nil {
					percentage5 = shared.MeshFaultInjectionItemSpecRulesDefaultHTTPPercentage{
						Integer: integer5,
					}
				}
				str5 := new(string)
				if !httpItem1.ResponseBandwidth.Percentage.Str.IsUnknown() && !httpItem1.ResponseBandwidth.Percentage.Str.IsNull() {
					*str5 = httpItem1.ResponseBandwidth.Percentage.Str.ValueString()
				} else {
					str5 = nil
				}
				if str5 != nil {
					percentage5 = shared.MeshFaultInjectionItemSpecRulesDefaultHTTPPercentage{
						Str: str5,
					}
				}
				responseBandwidth1 = &shared.MeshFaultInjectionItemResponseBandwidth{
					Limit:      limit1,
					Percentage: percentage5,
				}
			}
			http1 = append(http1, shared.MeshFaultInjectionItemHTTP{
				Abort:             abort1,
				Delay:             delay1,
				ResponseBandwidth: responseBandwidth1,
			})
		}
		default1 := shared.MeshFaultInjectionItemSpecDefault{
			HTTP: http1,
		}
		matches := make([]shared.Matches, 0, len(rulesItem.Matches))
		for _, matchesItem := range rulesItem.Matches {
			var spiffeID *shared.MeshFaultInjectionItemSpiffeID
			if matchesItem.SpiffeID != nil {
				typeVar1 := shared.MeshFaultInjectionItemSpecType(matchesItem.SpiffeID.Type.ValueString())
				var value2 string
				value2 = matchesItem.SpiffeID.Value.ValueString()

				spiffeID = &shared.MeshFaultInjectionItemSpiffeID{
					Type:  typeVar1,
					Value: value2,
				}
			}
			matches = append(matches, shared.Matches{
				SpiffeID: spiffeID,
			})
		}
		rules = append(rules, shared.MeshFaultInjectionItemRules{
			Default: default1,
			Matches: matches,
		})
	}
	var targetRef1 *shared.MeshFaultInjectionItemTargetRef
	if r.Spec.TargetRef != nil {
		kind1 := shared.MeshFaultInjectionItemKind(r.Spec.TargetRef.Kind.ValueString())
		labels2 := make(map[string]string)
		for labelsKey1, labelsValue1 := range r.Spec.TargetRef.Labels {
			var labelsInst1 string
			labelsInst1 = labelsValue1.ValueString()

			labels2[labelsKey1] = labelsInst1
		}
		mesh2 := new(string)
		if !r.Spec.TargetRef.Mesh.IsUnknown() && !r.Spec.TargetRef.Mesh.IsNull() {
			*mesh2 = r.Spec.TargetRef.Mesh.ValueString()
		} else {
			mesh2 = nil
		}
		name2 := new(string)
		if !r.Spec.TargetRef.Name.IsUnknown() && !r.Spec.TargetRef.Name.IsNull() {
			*name2 = r.Spec.TargetRef.Name.ValueString()
		} else {
			name2 = nil
		}
		namespace1 := new(string)
		if !r.Spec.TargetRef.Namespace.IsUnknown() && !r.Spec.TargetRef.Namespace.IsNull() {
			*namespace1 = r.Spec.TargetRef.Namespace.ValueString()
		} else {
			namespace1 = nil
		}
		proxyTypes1 := make([]shared.MeshFaultInjectionItemProxyTypes, 0, len(r.Spec.TargetRef.ProxyTypes))
		for _, proxyTypesItem1 := range r.Spec.TargetRef.ProxyTypes {
			proxyTypes1 = append(proxyTypes1, shared.MeshFaultInjectionItemProxyTypes(proxyTypesItem1.ValueString()))
		}
		sectionName1 := new(string)
		if !r.Spec.TargetRef.SectionName.IsUnknown() && !r.Spec.TargetRef.SectionName.IsNull() {
			*sectionName1 = r.Spec.TargetRef.SectionName.ValueString()
		} else {
			sectionName1 = nil
		}
		tags1 := make(map[string]string)
		for tagsKey1, tagsValue1 := range r.Spec.TargetRef.Tags {
			var tagsInst1 string
			tagsInst1 = tagsValue1.ValueString()

			tags1[tagsKey1] = tagsInst1
		}
		targetRef1 = &shared.MeshFaultInjectionItemTargetRef{
			Kind:        kind1,
			Labels:      labels2,
			Mesh:        mesh2,
			Name:        name2,
			Namespace:   namespace1,
			ProxyTypes:  proxyTypes1,
			SectionName: sectionName1,
			Tags:        tags1,
		}
	}
	to := make([]shared.MeshFaultInjectionItemTo, 0, len(r.Spec.To))
	for _, toItem := range r.Spec.To {
		var default2 *shared.MeshFaultInjectionItemSpecToDefault
		if toItem.Default != nil {
			http2 := make([]shared.MeshFaultInjectionItemSpecHTTP, 0, len(toItem.Default.HTTP))
			for _, httpItem2 := range toItem.Default.HTTP {
				var abort2 *shared.MeshFaultInjectionItemSpecAbort
				if httpItem2.Abort != nil {
					var httpStatus2 int
					httpStatus2 = int(httpItem2.Abort.HTTPStatus.ValueInt32())

					var percentage6 shared.MeshFaultInjectionItemSpecToPercentage
					integer6 := new(int64)
					if !httpItem2.Abort.Percentage.Integer.IsUnknown() && !httpItem2.Abort.Percentage.Integer.IsNull() {
						*integer6 = httpItem2.Abort.Percentage.Integer.ValueInt64()
					} else {
						integer6 = nil
					}
					if integer6 != nil {
						percentage6 = shared.MeshFaultInjectionItemSpecToPercentage{
							Integer: integer6,
						}
					}
					str6 := new(string)
					if !httpItem2.Abort.Percentage.Str.IsUnknown() && !httpItem2.Abort.Percentage.Str.IsNull() {
						*str6 = httpItem2.Abort.Percentage.Str.ValueString()
					} else {
						str6 = nil
					}
					if str6 != nil {
						percentage6 = shared.MeshFaultInjectionItemSpecToPercentage{
							Str: str6,
						}
					}
					abort2 = &shared.MeshFaultInjectionItemSpecAbort{
						HTTPStatus: httpStatus2,
						Percentage: percentage6,
					}
				}
				var delay2 *shared.MeshFaultInjectionItemSpecDelay
				if httpItem2.Delay != nil {
					var percentage7 shared.MeshFaultInjectionItemSpecToDefaultPercentage
					integer7 := new(int64)
					if !httpItem2.Delay.Percentage.Integer.IsUnknown() && !httpItem2.Delay.Percentage.Integer.IsNull() {
						*integer7 = httpItem2.Delay.Percentage.Integer.ValueInt64()
					} else {
						integer7 = nil
					}
					if integer7 != nil {
						percentage7 = shared.MeshFaultInjectionItemSpecToDefaultPercentage{
							Integer: integer7,
						}
					}
					str7 := new(string)
					if !httpItem2.Delay.Percentage.Str.IsUnknown() && !httpItem2.Delay.Percentage.Str.IsNull() {
						*str7 = httpItem2.Delay.Percentage.Str.ValueString()
					} else {
						str7 = nil
					}
					if str7 != nil {
						percentage7 = shared.MeshFaultInjectionItemSpecToDefaultPercentage{
							Str: str7,
						}
					}
					var value3 string
					value3 = httpItem2.Delay.Value.ValueString()

					delay2 = &shared.MeshFaultInjectionItemSpecDelay{
						Percentage: percentage7,
						Value:      value3,
					}
				}
				var responseBandwidth2 *shared.MeshFaultInjectionItemSpecResponseBandwidth
				if httpItem2.ResponseBandwidth != nil {
					var limit2 string
					limit2 = httpItem2.ResponseBandwidth.Limit.ValueString()

					var percentage8 shared.MeshFaultInjectionItemSpecToDefaultHTTPPercentage
					integer8 := new(int64)
					if !httpItem2.ResponseBandwidth.Percentage.Integer.IsUnknown() && !httpItem2.ResponseBandwidth.Percentage.Integer.IsNull() {
						*integer8 = httpItem2.ResponseBandwidth.Percentage.Integer.ValueInt64()
					} else {
						integer8 = nil
					}
					if integer8 != nil {
						percentage8 = shared.MeshFaultInjectionItemSpecToDefaultHTTPPercentage{
							Integer: integer8,
						}
					}
					str8 := new(string)
					if !httpItem2.ResponseBandwidth.Percentage.Str.IsUnknown() && !httpItem2.ResponseBandwidth.Percentage.Str.IsNull() {
						*str8 = httpItem2.ResponseBandwidth.Percentage.Str.ValueString()
					} else {
						str8 = nil
					}
					if str8 != nil {
						percentage8 = shared.MeshFaultInjectionItemSpecToDefaultHTTPPercentage{
							Str: str8,
						}
					}
					responseBandwidth2 = &shared.MeshFaultInjectionItemSpecResponseBandwidth{
						Limit:      limit2,
						Percentage: percentage8,
					}
				}
				http2 = append(http2, shared.MeshFaultInjectionItemSpecHTTP{
					Abort:             abort2,
					Delay:             delay2,
					ResponseBandwidth: responseBandwidth2,
				})
			}
			default2 = &shared.MeshFaultInjectionItemSpecToDefault{
				HTTP: http2,
			}
		}
		kind2 := shared.MeshFaultInjectionItemSpecToKind(toItem.TargetRef.Kind.ValueString())
		labels3 := make(map[string]string)
		for labelsKey2, labelsValue2 := range toItem.TargetRef.Labels {
			var labelsInst2 string
			labelsInst2 = labelsValue2.ValueString()

			labels3[labelsKey2] = labelsInst2
		}
		mesh3 := new(string)
		if !toItem.TargetRef.Mesh.IsUnknown() && !toItem.TargetRef.Mesh.IsNull() {
			*mesh3 = toItem.TargetRef.Mesh.ValueString()
		} else {
			mesh3 = nil
		}
		name3 := new(string)
		if !toItem.TargetRef.Name.IsUnknown() && !toItem.TargetRef.Name.IsNull() {
			*name3 = toItem.TargetRef.Name.ValueString()
		} else {
			name3 = nil
		}
		namespace2 := new(string)
		if !toItem.TargetRef.Namespace.IsUnknown() && !toItem.TargetRef.Namespace.IsNull() {
			*namespace2 = toItem.TargetRef.Namespace.ValueString()
		} else {
			namespace2 = nil
		}
		proxyTypes2 := make([]shared.MeshFaultInjectionItemSpecToProxyTypes, 0, len(toItem.TargetRef.ProxyTypes))
		for _, proxyTypesItem2 := range toItem.TargetRef.ProxyTypes {
			proxyTypes2 = append(proxyTypes2, shared.MeshFaultInjectionItemSpecToProxyTypes(proxyTypesItem2.ValueString()))
		}
		sectionName2 := new(string)
		if !toItem.TargetRef.SectionName.IsUnknown() && !toItem.TargetRef.SectionName.IsNull() {
			*sectionName2 = toItem.TargetRef.SectionName.ValueString()
		} else {
			sectionName2 = nil
		}
		tags2 := make(map[string]string)
		for tagsKey2, tagsValue2 := range toItem.TargetRef.Tags {
			var tagsInst2 string
			tagsInst2 = tagsValue2.ValueString()

			tags2[tagsKey2] = tagsInst2
		}
		targetRef2 := shared.MeshFaultInjectionItemSpecToTargetRef{
			Kind:        kind2,
			Labels:      labels3,
			Mesh:        mesh3,
			Name:        name3,
			Namespace:   namespace2,
			ProxyTypes:  proxyTypes2,
			SectionName: sectionName2,
			Tags:        tags2,
		}
		to = append(to, shared.MeshFaultInjectionItemTo{
			Default:   default2,
			TargetRef: targetRef2,
		})
	}
	spec := shared.MeshFaultInjectionItemSpec{
		From:      from,
		Rules:     rules,
		TargetRef: targetRef1,
		To:        to,
	}
	out := shared.MeshFaultInjectionItemInput{
		Type:   typeVar,
		Mesh:   mesh,
		Name:   name,
		Labels: labels,
		Spec:   spec,
	}

	return &out, diags
}
