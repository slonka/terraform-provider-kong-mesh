// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-kong-mesh/internal/provider/types"
	"github.com/kong/terraform-provider-kong-mesh/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-kong-mesh/internal/sdk/models/shared"
)

func (r *MeshResourceModel) RefreshFromSharedMeshCreateOrUpdateSuccessResponse(ctx context.Context, resp *shared.MeshCreateOrUpdateSuccessResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Warnings = make([]types.String, 0, len(resp.Warnings))
		for _, v := range resp.Warnings {
			r.Warnings = append(r.Warnings, types.StringValue(v))
		}
	}

	return diags
}

func (r *MeshResourceModel) RefreshFromSharedMeshItem(ctx context.Context, resp *shared.MeshItem) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Constraints == nil {
			r.Constraints = nil
		} else {
			r.Constraints = &tfTypes.Constraints{}
			if resp.Constraints.DataplaneProxy == nil {
				r.Constraints.DataplaneProxy = nil
			} else {
				r.Constraints.DataplaneProxy = &tfTypes.DataplaneProxy{}
				r.Constraints.DataplaneProxy.Requirements = []tfTypes.Requirements{}

				for _, requirementsItem := range resp.Constraints.DataplaneProxy.Requirements {
					var requirements tfTypes.Requirements

					if len(requirementsItem.Tags) > 0 {
						requirements.Tags = make(map[string]types.String, len(requirementsItem.Tags))
						for key, value := range requirementsItem.Tags {
							requirements.Tags[key] = types.StringValue(value)
						}
					}

					r.Constraints.DataplaneProxy.Requirements = append(r.Constraints.DataplaneProxy.Requirements, requirements)
				}
				r.Constraints.DataplaneProxy.Restrictions = []tfTypes.Requirements{}

				for _, restrictionsItem := range resp.Constraints.DataplaneProxy.Restrictions {
					var restrictions tfTypes.Requirements

					if len(restrictionsItem.Tags) > 0 {
						restrictions.Tags = make(map[string]types.String, len(restrictionsItem.Tags))
						for key1, value1 := range restrictionsItem.Tags {
							restrictions.Tags[key1] = types.StringValue(value1)
						}
					}

					r.Constraints.DataplaneProxy.Restrictions = append(r.Constraints.DataplaneProxy.Restrictions, restrictions)
				}
			}
		}
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key2, value2 := range resp.Labels {
				r.Labels[key2] = types.StringValue(value2)
			}
		}
		if resp.Logging == nil {
			r.Logging = nil
		} else {
			r.Logging = &tfTypes.Logging{}
			r.Logging.Backends = []tfTypes.Backends{}

			for _, backendsItem := range resp.Logging.Backends {
				var backends tfTypes.Backends

				if backendsItem.Conf != nil {
					backends.Conf = &tfTypes.MeshItemLoggingConf{}
					if backendsItem.Conf.FileLoggingBackendConfig != nil {
						backends.Conf.FileLoggingBackendConfig = &tfTypes.FileLoggingBackendConfig{}
						backends.Conf.FileLoggingBackendConfig.Path = types.StringPointerValue(backendsItem.Conf.FileLoggingBackendConfig.Path)
					}
					if backendsItem.Conf.TCPLoggingBackendConfig != nil {
						backends.Conf.TCPLoggingBackendConfig = &tfTypes.TCPLoggingBackendConfig{}
						backends.Conf.TCPLoggingBackendConfig.Address = types.StringPointerValue(backendsItem.Conf.TCPLoggingBackendConfig.Address)
					}
				}
				backends.Format = types.StringPointerValue(backendsItem.Format)
				backends.Name = types.StringPointerValue(backendsItem.Name)
				backends.Type = types.StringPointerValue(backendsItem.Type)

				r.Logging.Backends = append(r.Logging.Backends, backends)
			}
			r.Logging.DefaultBackend = types.StringPointerValue(resp.Logging.DefaultBackend)
		}
		if resp.MeshServices == nil {
			r.MeshServices = nil
		} else {
			r.MeshServices = &tfTypes.MeshServices{}
			if resp.MeshServices.Mode != nil {
				r.MeshServices.Mode = &tfTypes.Mode{}
				if resp.MeshServices.Mode.Str != nil {
					r.MeshServices.Mode.Str = types.StringPointerValue(resp.MeshServices.Mode.Str)
				}
				if resp.MeshServices.Mode.Integer != nil {
					r.MeshServices.Mode.Integer = types.Int64PointerValue(resp.MeshServices.Mode.Integer)
				}
			}
		}
		if resp.Metrics == nil {
			r.Metrics = nil
		} else {
			r.Metrics = &tfTypes.Metrics{}
			r.Metrics.Backends = []tfTypes.MeshItemBackends{}

			for _, backendsItem1 := range resp.Metrics.Backends {
				var backends1 tfTypes.MeshItemBackends

				if backendsItem1.Conf != nil {
					backends1.Conf = &tfTypes.MeshItemConf{}
					if backendsItem1.Conf.PrometheusMetricsBackendConfig != nil {
						backends1.Conf.PrometheusMetricsBackendConfig = &tfTypes.PrometheusMetricsBackendConfig{}
						backends1.Conf.PrometheusMetricsBackendConfig.Aggregate = []tfTypes.Aggregate{}

						for _, aggregateItem := range backendsItem1.Conf.PrometheusMetricsBackendConfig.Aggregate {
							var aggregate tfTypes.Aggregate

							aggregate.Address = types.StringPointerValue(aggregateItem.Address)
							aggregate.Enabled = types.BoolPointerValue(aggregateItem.Enabled)
							aggregate.Name = types.StringPointerValue(aggregateItem.Name)
							aggregate.Path = types.StringPointerValue(aggregateItem.Path)
							aggregate.Port = types.Int64PointerValue(aggregateItem.Port)

							backends1.Conf.PrometheusMetricsBackendConfig.Aggregate = append(backends1.Conf.PrometheusMetricsBackendConfig.Aggregate, aggregate)
						}
						if backendsItem1.Conf.PrometheusMetricsBackendConfig.Envoy == nil {
							backends1.Conf.PrometheusMetricsBackendConfig.Envoy = nil
						} else {
							backends1.Conf.PrometheusMetricsBackendConfig.Envoy = &tfTypes.Envoy{}
							backends1.Conf.PrometheusMetricsBackendConfig.Envoy.FilterRegex = types.StringPointerValue(backendsItem1.Conf.PrometheusMetricsBackendConfig.Envoy.FilterRegex)
							backends1.Conf.PrometheusMetricsBackendConfig.Envoy.UsedOnly = types.BoolPointerValue(backendsItem1.Conf.PrometheusMetricsBackendConfig.Envoy.UsedOnly)
						}
						backends1.Conf.PrometheusMetricsBackendConfig.Path = types.StringPointerValue(backendsItem1.Conf.PrometheusMetricsBackendConfig.Path)
						backends1.Conf.PrometheusMetricsBackendConfig.Port = types.Int64PointerValue(backendsItem1.Conf.PrometheusMetricsBackendConfig.Port)
						backends1.Conf.PrometheusMetricsBackendConfig.SkipMTLS = types.BoolPointerValue(backendsItem1.Conf.PrometheusMetricsBackendConfig.SkipMTLS)
						if len(backendsItem1.Conf.PrometheusMetricsBackendConfig.Tags) > 0 {
							backends1.Conf.PrometheusMetricsBackendConfig.Tags = make(map[string]types.String, len(backendsItem1.Conf.PrometheusMetricsBackendConfig.Tags))
							for key3, value3 := range backendsItem1.Conf.PrometheusMetricsBackendConfig.Tags {
								backends1.Conf.PrometheusMetricsBackendConfig.Tags[key3] = types.StringValue(value3)
							}
						}
						if backendsItem1.Conf.PrometheusMetricsBackendConfig.TLS == nil {
							backends1.Conf.PrometheusMetricsBackendConfig.TLS = nil
						} else {
							backends1.Conf.PrometheusMetricsBackendConfig.TLS = &tfTypes.MeshServices{}
							if backendsItem1.Conf.PrometheusMetricsBackendConfig.TLS.Mode != nil {
								backends1.Conf.PrometheusMetricsBackendConfig.TLS.Mode = &tfTypes.Mode{}
								if backendsItem1.Conf.PrometheusMetricsBackendConfig.TLS.Mode.Str != nil {
									backends1.Conf.PrometheusMetricsBackendConfig.TLS.Mode.Str = types.StringPointerValue(backendsItem1.Conf.PrometheusMetricsBackendConfig.TLS.Mode.Str)
								}
								if backendsItem1.Conf.PrometheusMetricsBackendConfig.TLS.Mode.Integer != nil {
									backends1.Conf.PrometheusMetricsBackendConfig.TLS.Mode.Integer = types.Int64PointerValue(backendsItem1.Conf.PrometheusMetricsBackendConfig.TLS.Mode.Integer)
								}
							}
						}
					}
				}
				backends1.Name = types.StringPointerValue(backendsItem1.Name)
				backends1.Type = types.StringPointerValue(backendsItem1.Type)

				r.Metrics.Backends = append(r.Metrics.Backends, backends1)
			}
			r.Metrics.EnabledBackend = types.StringPointerValue(resp.Metrics.EnabledBackend)
		}
		if resp.Mtls == nil {
			r.Mtls = nil
		} else {
			r.Mtls = &tfTypes.Mtls{}
			r.Mtls.Backends = []tfTypes.MeshItemMtlsBackends{}

			for _, backendsItem2 := range resp.Mtls.Backends {
				var backends2 tfTypes.MeshItemMtlsBackends

				if backendsItem2.Conf != nil {
					backends2.Conf = &tfTypes.MeshItemMtlsConf{}
					if backendsItem2.Conf.ACMCertificateAuthorityConfig != nil {
						backends2.Conf.ACMCertificateAuthorityConfig = &tfTypes.ACMCertificateAuthorityConfig{}
						backends2.Conf.ACMCertificateAuthorityConfig.Arn = types.StringPointerValue(backendsItem2.Conf.ACMCertificateAuthorityConfig.Arn)
						if backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth == nil {
							backends2.Conf.ACMCertificateAuthorityConfig.Auth = nil
						} else {
							backends2.Conf.ACMCertificateAuthorityConfig.Auth = &tfTypes.Auth{}
							if backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials == nil {
								backends2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials = nil
							} else {
								backends2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials = &tfTypes.AwsCredentials{}
								if backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey != nil {
									backends2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey = &tfTypes.AccessKey{}
									if backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.AccessKeyDataSourceFile != nil {
										backends2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.DataSourceFile = &tfTypes.AccessKeyDataSourceFile{}
										backends2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.DataSourceFile.File = types.StringPointerValue(backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.AccessKeyDataSourceFile.File)
									}
									if backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.AccessKeyDataSourceInline != nil {
										backends2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.DataSourceInline = &tfTypes.AccessKeyDataSourceInline{}
										backends2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.DataSourceInline.Inline = types.StringPointerValue(backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.AccessKeyDataSourceInline.Inline)
									}
									if backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.AccessKeyDataSourceInlineString != nil {
										backends2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.DataSourceInlineString = &tfTypes.AccessKeyDataSourceInlineString{}
										backends2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.DataSourceInlineString.InlineString = types.StringPointerValue(backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.AccessKeyDataSourceInlineString.InlineString)
									}
									if backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.AccessKeyDataSourceSecret != nil {
										backends2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.DataSourceSecret = &tfTypes.AccessKeyDataSourceSecret{}
										backends2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.DataSourceSecret.Secret = types.StringPointerValue(backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.AccessKeyDataSourceSecret.Secret)
									}
								}
								if backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret != nil {
									backends2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret = &tfTypes.AccessKey{}
									if backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.AccessKeySecretDataSourceFile != nil {
										backends2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.DataSourceFile = &tfTypes.AccessKeyDataSourceFile{}
										backends2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.DataSourceFile.File = types.StringPointerValue(backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.AccessKeySecretDataSourceFile.File)
									}
									if backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.AccessKeySecretDataSourceInline != nil {
										backends2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.DataSourceInline = &tfTypes.AccessKeyDataSourceInline{}
										backends2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.DataSourceInline.Inline = types.StringPointerValue(backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.AccessKeySecretDataSourceInline.Inline)
									}
									if backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.AccessKeySecretDataSourceInlineString != nil {
										backends2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.DataSourceInlineString = &tfTypes.AccessKeyDataSourceInlineString{}
										backends2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.DataSourceInlineString.InlineString = types.StringPointerValue(backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.AccessKeySecretDataSourceInlineString.InlineString)
									}
									if backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.AccessKeySecretDataSourceSecret != nil {
										backends2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.DataSourceSecret = &tfTypes.AccessKeyDataSourceSecret{}
										backends2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.DataSourceSecret.Secret = types.StringPointerValue(backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.AccessKeySecretDataSourceSecret.Secret)
									}
								}
							}
						}
						if backendsItem2.Conf.ACMCertificateAuthorityConfig.CaCert != nil {
							backends2.Conf.ACMCertificateAuthorityConfig.CaCert = &tfTypes.AccessKey{}
							if backendsItem2.Conf.ACMCertificateAuthorityConfig.CaCert.CaCertDataSourceFile != nil {
								backends2.Conf.ACMCertificateAuthorityConfig.CaCert.DataSourceFile = &tfTypes.AccessKeyDataSourceFile{}
								backends2.Conf.ACMCertificateAuthorityConfig.CaCert.DataSourceFile.File = types.StringPointerValue(backendsItem2.Conf.ACMCertificateAuthorityConfig.CaCert.CaCertDataSourceFile.File)
							}
							if backendsItem2.Conf.ACMCertificateAuthorityConfig.CaCert.CaCertDataSourceInline != nil {
								backends2.Conf.ACMCertificateAuthorityConfig.CaCert.DataSourceInline = &tfTypes.AccessKeyDataSourceInline{}
								backends2.Conf.ACMCertificateAuthorityConfig.CaCert.DataSourceInline.Inline = types.StringPointerValue(backendsItem2.Conf.ACMCertificateAuthorityConfig.CaCert.CaCertDataSourceInline.Inline)
							}
							if backendsItem2.Conf.ACMCertificateAuthorityConfig.CaCert.CaCertDataSourceInlineString != nil {
								backends2.Conf.ACMCertificateAuthorityConfig.CaCert.DataSourceInlineString = &tfTypes.AccessKeyDataSourceInlineString{}
								backends2.Conf.ACMCertificateAuthorityConfig.CaCert.DataSourceInlineString.InlineString = types.StringPointerValue(backendsItem2.Conf.ACMCertificateAuthorityConfig.CaCert.CaCertDataSourceInlineString.InlineString)
							}
							if backendsItem2.Conf.ACMCertificateAuthorityConfig.CaCert.CaCertDataSourceSecret != nil {
								backends2.Conf.ACMCertificateAuthorityConfig.CaCert.DataSourceSecret = &tfTypes.AccessKeyDataSourceSecret{}
								backends2.Conf.ACMCertificateAuthorityConfig.CaCert.DataSourceSecret.Secret = types.StringPointerValue(backendsItem2.Conf.ACMCertificateAuthorityConfig.CaCert.CaCertDataSourceSecret.Secret)
							}
						}
						backends2.Conf.ACMCertificateAuthorityConfig.CommonName = types.StringPointerValue(backendsItem2.Conf.ACMCertificateAuthorityConfig.CommonName)
					}
					if backendsItem2.Conf.BuiltinCertificateAuthorityConfig != nil {
						backends2.Conf.BuiltinCertificateAuthorityConfig = &tfTypes.BuiltinCertificateAuthorityConfig{}
						if backendsItem2.Conf.BuiltinCertificateAuthorityConfig.CaCert == nil {
							backends2.Conf.BuiltinCertificateAuthorityConfig.CaCert = nil
						} else {
							backends2.Conf.BuiltinCertificateAuthorityConfig.CaCert = &tfTypes.BuiltinCertificateAuthorityConfigConfCaCert{}
							backends2.Conf.BuiltinCertificateAuthorityConfig.CaCert.Expiration = types.StringPointerValue(backendsItem2.Conf.BuiltinCertificateAuthorityConfig.CaCert.Expiration)
							backends2.Conf.BuiltinCertificateAuthorityConfig.CaCert.RsaBits = types.Int64PointerValue(backendsItem2.Conf.BuiltinCertificateAuthorityConfig.CaCert.RsaBits)
						}
					}
					if backendsItem2.Conf.CertManagerCertificateAuthorityConfig != nil {
						backends2.Conf.CertManagerCertificateAuthorityConfig = &tfTypes.CertManagerCertificateAuthorityConfig{}
						if backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CaCert != nil {
							backends2.Conf.CertManagerCertificateAuthorityConfig.CaCert = &tfTypes.AccessKey{}
							if backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CaCert.CertManagerCertificateAuthorityConfigCaCertDataSourceFile != nil {
								backends2.Conf.CertManagerCertificateAuthorityConfig.CaCert.DataSourceFile = &tfTypes.AccessKeyDataSourceFile{}
								backends2.Conf.CertManagerCertificateAuthorityConfig.CaCert.DataSourceFile.File = types.StringPointerValue(backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CaCert.CertManagerCertificateAuthorityConfigCaCertDataSourceFile.File)
							}
							if backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CaCert.CertManagerCertificateAuthorityConfigCaCertDataSourceInline != nil {
								backends2.Conf.CertManagerCertificateAuthorityConfig.CaCert.DataSourceInline = &tfTypes.AccessKeyDataSourceInline{}
								backends2.Conf.CertManagerCertificateAuthorityConfig.CaCert.DataSourceInline.Inline = types.StringPointerValue(backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CaCert.CertManagerCertificateAuthorityConfigCaCertDataSourceInline.Inline)
							}
							if backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CaCert.CertManagerCertificateAuthorityConfigCaCertDataSourceInlineString != nil {
								backends2.Conf.CertManagerCertificateAuthorityConfig.CaCert.DataSourceInlineString = &tfTypes.AccessKeyDataSourceInlineString{}
								backends2.Conf.CertManagerCertificateAuthorityConfig.CaCert.DataSourceInlineString.InlineString = types.StringPointerValue(backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CaCert.CertManagerCertificateAuthorityConfigCaCertDataSourceInlineString.InlineString)
							}
							if backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CaCert.CertManagerCertificateAuthorityConfigCaCertDataSourceSecret != nil {
								backends2.Conf.CertManagerCertificateAuthorityConfig.CaCert.DataSourceSecret = &tfTypes.AccessKeyDataSourceSecret{}
								backends2.Conf.CertManagerCertificateAuthorityConfig.CaCert.DataSourceSecret.Secret = types.StringPointerValue(backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CaCert.CertManagerCertificateAuthorityConfigCaCertDataSourceSecret.Secret)
							}
						}
						backends2.Conf.CertManagerCertificateAuthorityConfig.CommonName = types.StringPointerValue(backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CommonName)
						backends2.Conf.CertManagerCertificateAuthorityConfig.DNSNames = make([]types.String, 0, len(backendsItem2.Conf.CertManagerCertificateAuthorityConfig.DNSNames))
						for _, v := range backendsItem2.Conf.CertManagerCertificateAuthorityConfig.DNSNames {
							backends2.Conf.CertManagerCertificateAuthorityConfig.DNSNames = append(backends2.Conf.CertManagerCertificateAuthorityConfig.DNSNames, types.StringValue(v))
						}
						if backendsItem2.Conf.CertManagerCertificateAuthorityConfig.IssuerRef == nil {
							backends2.Conf.CertManagerCertificateAuthorityConfig.IssuerRef = nil
						} else {
							backends2.Conf.CertManagerCertificateAuthorityConfig.IssuerRef = &tfTypes.IssuerRef{}
							backends2.Conf.CertManagerCertificateAuthorityConfig.IssuerRef.Group = types.StringPointerValue(backendsItem2.Conf.CertManagerCertificateAuthorityConfig.IssuerRef.Group)
							backends2.Conf.CertManagerCertificateAuthorityConfig.IssuerRef.Kind = types.StringPointerValue(backendsItem2.Conf.CertManagerCertificateAuthorityConfig.IssuerRef.Kind)
							backends2.Conf.CertManagerCertificateAuthorityConfig.IssuerRef.Name = types.StringPointerValue(backendsItem2.Conf.CertManagerCertificateAuthorityConfig.IssuerRef.Name)
						}
					}
					if backendsItem2.Conf.ProvidedCertificateAuthorityConfig != nil {
						backends2.Conf.ProvidedCertificateAuthorityConfig = &tfTypes.ProvidedCertificateAuthorityConfig{}
						if backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Cert != nil {
							backends2.Conf.ProvidedCertificateAuthorityConfig.Cert = &tfTypes.AccessKey{}
							if backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Cert.CertDataSourceFile != nil {
								backends2.Conf.ProvidedCertificateAuthorityConfig.Cert.DataSourceFile = &tfTypes.AccessKeyDataSourceFile{}
								backends2.Conf.ProvidedCertificateAuthorityConfig.Cert.DataSourceFile.File = types.StringPointerValue(backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Cert.CertDataSourceFile.File)
							}
							if backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Cert.CertDataSourceInline != nil {
								backends2.Conf.ProvidedCertificateAuthorityConfig.Cert.DataSourceInline = &tfTypes.AccessKeyDataSourceInline{}
								backends2.Conf.ProvidedCertificateAuthorityConfig.Cert.DataSourceInline.Inline = types.StringPointerValue(backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Cert.CertDataSourceInline.Inline)
							}
							if backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Cert.CertDataSourceInlineString != nil {
								backends2.Conf.ProvidedCertificateAuthorityConfig.Cert.DataSourceInlineString = &tfTypes.AccessKeyDataSourceInlineString{}
								backends2.Conf.ProvidedCertificateAuthorityConfig.Cert.DataSourceInlineString.InlineString = types.StringPointerValue(backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Cert.CertDataSourceInlineString.InlineString)
							}
							if backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Cert.CertDataSourceSecret != nil {
								backends2.Conf.ProvidedCertificateAuthorityConfig.Cert.DataSourceSecret = &tfTypes.AccessKeyDataSourceSecret{}
								backends2.Conf.ProvidedCertificateAuthorityConfig.Cert.DataSourceSecret.Secret = types.StringPointerValue(backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Cert.CertDataSourceSecret.Secret)
							}
						}
						if backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Key != nil {
							backends2.Conf.ProvidedCertificateAuthorityConfig.Key = &tfTypes.AccessKey{}
							if backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Key.KeyDataSourceFile != nil {
								backends2.Conf.ProvidedCertificateAuthorityConfig.Key.DataSourceFile = &tfTypes.AccessKeyDataSourceFile{}
								backends2.Conf.ProvidedCertificateAuthorityConfig.Key.DataSourceFile.File = types.StringPointerValue(backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Key.KeyDataSourceFile.File)
							}
							if backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Key.KeyDataSourceInline != nil {
								backends2.Conf.ProvidedCertificateAuthorityConfig.Key.DataSourceInline = &tfTypes.AccessKeyDataSourceInline{}
								backends2.Conf.ProvidedCertificateAuthorityConfig.Key.DataSourceInline.Inline = types.StringPointerValue(backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Key.KeyDataSourceInline.Inline)
							}
							if backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Key.KeyDataSourceInlineString != nil {
								backends2.Conf.ProvidedCertificateAuthorityConfig.Key.DataSourceInlineString = &tfTypes.AccessKeyDataSourceInlineString{}
								backends2.Conf.ProvidedCertificateAuthorityConfig.Key.DataSourceInlineString.InlineString = types.StringPointerValue(backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Key.KeyDataSourceInlineString.InlineString)
							}
							if backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Key.KeyDataSourceSecret != nil {
								backends2.Conf.ProvidedCertificateAuthorityConfig.Key.DataSourceSecret = &tfTypes.AccessKeyDataSourceSecret{}
								backends2.Conf.ProvidedCertificateAuthorityConfig.Key.DataSourceSecret.Secret = types.StringPointerValue(backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Key.KeyDataSourceSecret.Secret)
							}
						}
					}
					if backendsItem2.Conf.VaultCertificateAuthorityConfig != nil {
						backends2.Conf.VaultCertificateAuthorityConfig = &tfTypes.VaultCertificateAuthorityConfig{}
						if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp != nil {
							backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp = &tfTypes.VaultCertificateAuthorityConfigFromCp{}
							if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp == nil {
								backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp = nil
							} else {
								backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp = &tfTypes.FromCp{}
								backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Address = types.StringPointerValue(backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Address)
								backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.AgentAddress = types.StringPointerValue(backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.AgentAddress)
								if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth != nil {
									backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth = &tfTypes.VaultCertificateAuthorityConfigAuth{}
									if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthAws != nil {
										backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthAws = &tfTypes.VaultCertificateAuthorityConfigFromCpAuthAws{}
										if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthAws.Aws == nil {
											backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthAws.Aws = nil
										} else {
											backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthAws.Aws = &tfTypes.Aws{}
											backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthAws.Aws.IamServerIDHeader = types.StringPointerValue(backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthAws.Aws.IamServerIDHeader)
											backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthAws.Aws.Role = types.StringPointerValue(backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthAws.Aws.Role)
											if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthAws.Aws.Type != nil {
												backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthAws.Aws.Type = &tfTypes.Mode{}
												if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthAws.Aws.Type.Str != nil {
													backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthAws.Aws.Type.Str = types.StringPointerValue(backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthAws.Aws.Type.Str)
												}
												if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthAws.Aws.Type.Integer != nil {
													backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthAws.Aws.Type.Integer = types.Int64PointerValue(backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthAws.Aws.Type.Integer)
												}
											}
										}
									}
									if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS != nil {
										backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS = &tfTypes.VaultCertificateAuthorityConfigFromCpAuthTLS{}
										if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS == nil {
											backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS = nil
										} else {
											backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS = &tfTypes.AuthTLS{}
											if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert != nil {
												backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert = &tfTypes.AccessKey{}
												if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert.ClientCertDataSourceFile != nil {
													backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert.DataSourceFile = &tfTypes.AccessKeyDataSourceFile{}
													backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert.DataSourceFile.File = types.StringPointerValue(backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert.ClientCertDataSourceFile.File)
												}
												if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert.ClientCertDataSourceInline != nil {
													backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert.DataSourceInline = &tfTypes.AccessKeyDataSourceInline{}
													backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert.DataSourceInline.Inline = types.StringPointerValue(backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert.ClientCertDataSourceInline.Inline)
												}
												if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert.ClientCertDataSourceInlineString != nil {
													backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert.DataSourceInlineString = &tfTypes.AccessKeyDataSourceInlineString{}
													backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert.DataSourceInlineString.InlineString = types.StringPointerValue(backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert.ClientCertDataSourceInlineString.InlineString)
												}
												if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert.ClientCertDataSourceSecret != nil {
													backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert.DataSourceSecret = &tfTypes.AccessKeyDataSourceSecret{}
													backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert.DataSourceSecret.Secret = types.StringPointerValue(backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert.ClientCertDataSourceSecret.Secret)
												}
											}
											if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey != nil {
												backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey = &tfTypes.AccessKey{}
												if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey.ClientKeyDataSourceFile != nil {
													backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey.DataSourceFile = &tfTypes.AccessKeyDataSourceFile{}
													backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey.DataSourceFile.File = types.StringPointerValue(backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey.ClientKeyDataSourceFile.File)
												}
												if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey.ClientKeyDataSourceInline != nil {
													backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey.DataSourceInline = &tfTypes.AccessKeyDataSourceInline{}
													backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey.DataSourceInline.Inline = types.StringPointerValue(backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey.ClientKeyDataSourceInline.Inline)
												}
												if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey.ClientKeyDataSourceInlineString != nil {
													backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey.DataSourceInlineString = &tfTypes.AccessKeyDataSourceInlineString{}
													backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey.DataSourceInlineString.InlineString = types.StringPointerValue(backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey.ClientKeyDataSourceInlineString.InlineString)
												}
												if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey.ClientKeyDataSourceSecret != nil {
													backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey.DataSourceSecret = &tfTypes.AccessKeyDataSourceSecret{}
													backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey.DataSourceSecret.Secret = types.StringPointerValue(backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey.ClientKeyDataSourceSecret.Secret)
												}
											}
										}
									}
									if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken != nil {
										backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken = &tfTypes.VaultCertificateAuthorityConfigFromCpAuthToken{}
										if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token != nil {
											backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token = &tfTypes.AccessKey{}
											if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token.TokenDataSourceFile != nil {
												backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token.DataSourceFile = &tfTypes.AccessKeyDataSourceFile{}
												backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token.DataSourceFile.File = types.StringPointerValue(backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token.TokenDataSourceFile.File)
											}
											if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token.TokenDataSourceInline != nil {
												backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token.DataSourceInline = &tfTypes.AccessKeyDataSourceInline{}
												backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token.DataSourceInline.Inline = types.StringPointerValue(backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token.TokenDataSourceInline.Inline)
											}
											if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token.TokenDataSourceInlineString != nil {
												backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token.DataSourceInlineString = &tfTypes.AccessKeyDataSourceInlineString{}
												backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token.DataSourceInlineString.InlineString = types.StringPointerValue(backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token.TokenDataSourceInlineString.InlineString)
											}
											if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token.TokenDataSourceSecret != nil {
												backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token.DataSourceSecret = &tfTypes.AccessKeyDataSourceSecret{}
												backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token.DataSourceSecret.Secret = types.StringPointerValue(backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token.TokenDataSourceSecret.Secret)
											}
										}
									}
								}
								backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.CommonName = types.StringPointerValue(backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.CommonName)
								backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Namespace = types.StringPointerValue(backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Namespace)
								backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Pki = types.StringPointerValue(backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Pki)
								backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Role = types.StringPointerValue(backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Role)
								if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS == nil {
									backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS = nil
								} else {
									backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS = &tfTypes.VaultCertificateAuthorityConfigTLS{}
									if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert != nil {
										backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert = &tfTypes.AccessKey{}
										if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert.VaultCertificateAuthorityConfigFromCpCaCertDataSourceFile != nil {
											backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert.DataSourceFile = &tfTypes.AccessKeyDataSourceFile{}
											backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert.DataSourceFile.File = types.StringPointerValue(backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert.VaultCertificateAuthorityConfigFromCpCaCertDataSourceFile.File)
										}
										if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert.VaultCertificateAuthorityConfigFromCpCaCertDataSourceInline != nil {
											backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert.DataSourceInline = &tfTypes.AccessKeyDataSourceInline{}
											backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert.DataSourceInline.Inline = types.StringPointerValue(backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert.VaultCertificateAuthorityConfigFromCpCaCertDataSourceInline.Inline)
										}
										if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert.VaultCertificateAuthorityConfigFromCpCaCertDataSourceInlineString != nil {
											backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert.DataSourceInlineString = &tfTypes.AccessKeyDataSourceInlineString{}
											backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert.DataSourceInlineString.InlineString = types.StringPointerValue(backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert.VaultCertificateAuthorityConfigFromCpCaCertDataSourceInlineString.InlineString)
										}
										if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert.VaultCertificateAuthorityConfigFromCpCaCertDataSourceSecret != nil {
											backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert.DataSourceSecret = &tfTypes.AccessKeyDataSourceSecret{}
											backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert.DataSourceSecret.Secret = types.StringPointerValue(backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert.VaultCertificateAuthorityConfigFromCpCaCertDataSourceSecret.Secret)
										}
									}
									backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.ServerName = types.StringPointerValue(backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.ServerName)
									backends2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.SkipVerify = types.BoolPointerValue(backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.SkipVerify)
								}
							}
						}
					}
				}
				if backendsItem2.DpCert == nil {
					backends2.DpCert = nil
				} else {
					backends2.DpCert = &tfTypes.DpCert{}
					if backendsItem2.DpCert.RequestTimeout == nil {
						backends2.DpCert.RequestTimeout = nil
					} else {
						backends2.DpCert.RequestTimeout = &tfTypes.RequestTimeout{}
						backends2.DpCert.RequestTimeout.Nanos = types.Int64PointerValue(backendsItem2.DpCert.RequestTimeout.Nanos)
						backends2.DpCert.RequestTimeout.Seconds = types.Int64PointerValue(backendsItem2.DpCert.RequestTimeout.Seconds)
					}
					if backendsItem2.DpCert.Rotation == nil {
						backends2.DpCert.Rotation = nil
					} else {
						backends2.DpCert.Rotation = &tfTypes.Rotation{}
						backends2.DpCert.Rotation.Expiration = types.StringPointerValue(backendsItem2.DpCert.Rotation.Expiration)
					}
				}
				if backendsItem2.Mode != nil {
					backends2.Mode = &tfTypes.Mode{}
					if backendsItem2.Mode.Str != nil {
						backends2.Mode.Str = types.StringPointerValue(backendsItem2.Mode.Str)
					}
					if backendsItem2.Mode.Integer != nil {
						backends2.Mode.Integer = types.Int64PointerValue(backendsItem2.Mode.Integer)
					}
				}
				backends2.Name = types.StringPointerValue(backendsItem2.Name)
				if backendsItem2.RootChain == nil {
					backends2.RootChain = nil
				} else {
					backends2.RootChain = &tfTypes.RootChain{}
					if backendsItem2.RootChain.RequestTimeout == nil {
						backends2.RootChain.RequestTimeout = nil
					} else {
						backends2.RootChain.RequestTimeout = &tfTypes.RequestTimeout{}
						backends2.RootChain.RequestTimeout.Nanos = types.Int64PointerValue(backendsItem2.RootChain.RequestTimeout.Nanos)
						backends2.RootChain.RequestTimeout.Seconds = types.Int64PointerValue(backendsItem2.RootChain.RequestTimeout.Seconds)
					}
				}
				backends2.Type = types.StringPointerValue(backendsItem2.Type)

				r.Mtls.Backends = append(r.Mtls.Backends, backends2)
			}
			r.Mtls.EnabledBackend = types.StringPointerValue(resp.Mtls.EnabledBackend)
			r.Mtls.SkipValidation = types.BoolPointerValue(resp.Mtls.SkipValidation)
		}
		r.Name = types.StringValue(resp.Name)
		if resp.Networking == nil {
			r.Networking = nil
		} else {
			r.Networking = &tfTypes.Networking{}
			if resp.Networking.Outbound == nil {
				r.Networking.Outbound = nil
			} else {
				r.Networking.Outbound = &tfTypes.Outbound{}
				r.Networking.Outbound.Passthrough = types.BoolPointerValue(resp.Networking.Outbound.Passthrough)
			}
		}
		if resp.Routing == nil {
			r.Routing = nil
		} else {
			r.Routing = &tfTypes.Routing{}
			r.Routing.DefaultForbidMeshExternalServiceAccess = types.BoolPointerValue(resp.Routing.DefaultForbidMeshExternalServiceAccess)
			r.Routing.LocalityAwareLoadBalancing = types.BoolPointerValue(resp.Routing.LocalityAwareLoadBalancing)
			r.Routing.ZoneEgress = types.BoolPointerValue(resp.Routing.ZoneEgress)
		}
		r.SkipCreatingInitialPolicies = make([]types.String, 0, len(resp.SkipCreatingInitialPolicies))
		for _, v := range resp.SkipCreatingInitialPolicies {
			r.SkipCreatingInitialPolicies = append(r.SkipCreatingInitialPolicies, types.StringValue(v))
		}
		if resp.Tracing == nil {
			r.Tracing = nil
		} else {
			r.Tracing = &tfTypes.Tracing{}
			r.Tracing.Backends = []tfTypes.MeshItemTracingBackends{}

			for _, backendsItem3 := range resp.Tracing.Backends {
				var backends3 tfTypes.MeshItemTracingBackends

				if backendsItem3.Conf != nil {
					backends3.Conf = &tfTypes.MeshItemTracingConf{}
					if backendsItem3.Conf.DatadogTracingBackendConfig != nil {
						backends3.Conf.DatadogTracingBackendConfig = &tfTypes.DatadogTracingBackendConfig{}
						backends3.Conf.DatadogTracingBackendConfig.Address = types.StringPointerValue(backendsItem3.Conf.DatadogTracingBackendConfig.Address)
						backends3.Conf.DatadogTracingBackendConfig.Port = types.Int64PointerValue(backendsItem3.Conf.DatadogTracingBackendConfig.Port)
						backends3.Conf.DatadogTracingBackendConfig.SplitService = types.BoolPointerValue(backendsItem3.Conf.DatadogTracingBackendConfig.SplitService)
					}
					if backendsItem3.Conf.ZipkinTracingBackendConfig != nil {
						backends3.Conf.ZipkinTracingBackendConfig = &tfTypes.ZipkinTracingBackendConfig{}
						backends3.Conf.ZipkinTracingBackendConfig.APIVersion = types.StringPointerValue(backendsItem3.Conf.ZipkinTracingBackendConfig.APIVersion)
						backends3.Conf.ZipkinTracingBackendConfig.SharedSpanContext = types.BoolPointerValue(backendsItem3.Conf.ZipkinTracingBackendConfig.SharedSpanContext)
						backends3.Conf.ZipkinTracingBackendConfig.TraceId128bit = types.BoolPointerValue(backendsItem3.Conf.ZipkinTracingBackendConfig.TraceId128bit)
						backends3.Conf.ZipkinTracingBackendConfig.URL = types.StringPointerValue(backendsItem3.Conf.ZipkinTracingBackendConfig.URL)
					}
				}
				backends3.Name = types.StringPointerValue(backendsItem3.Name)
				backends3.Sampling = types.Float64PointerValue(backendsItem3.Sampling)
				backends3.Type = types.StringPointerValue(backendsItem3.Type)

				r.Tracing.Backends = append(r.Tracing.Backends, backends3)
			}
			r.Tracing.DefaultBackend = types.StringPointerValue(resp.Tracing.DefaultBackend)
		}
		r.Type = types.StringValue(resp.Type)
	}

	return diags
}

func (r *MeshResourceModel) ToOperationsDeleteMeshRequest(ctx context.Context) (*operations.DeleteMeshRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	out := operations.DeleteMeshRequest{
		Name: name,
	}

	return &out, diags
}

func (r *MeshResourceModel) ToOperationsGetMeshRequest(ctx context.Context) (*operations.GetMeshRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	out := operations.GetMeshRequest{
		Name: name,
	}

	return &out, diags
}

func (r *MeshResourceModel) ToOperationsPutMeshRequest(ctx context.Context) (*operations.PutMeshRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	meshItem, meshItemDiags := r.ToSharedMeshItem(ctx)
	diags.Append(meshItemDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PutMeshRequest{
		Name:     name,
		MeshItem: *meshItem,
	}

	return &out, diags
}

func (r *MeshResourceModel) ToSharedMeshItem(ctx context.Context) (*shared.MeshItem, diag.Diagnostics) {
	var diags diag.Diagnostics

	var constraints *shared.Constraints
	if r.Constraints != nil {
		var dataplaneProxy *shared.DataplaneProxy
		if r.Constraints.DataplaneProxy != nil {
			requirements := make([]shared.Requirements, 0, len(r.Constraints.DataplaneProxy.Requirements))
			for _, requirementsItem := range r.Constraints.DataplaneProxy.Requirements {
				tags := make(map[string]string)
				for tagsKey, tagsValue := range requirementsItem.Tags {
					var tagsInst string
					tagsInst = tagsValue.ValueString()

					tags[tagsKey] = tagsInst
				}
				requirements = append(requirements, shared.Requirements{
					Tags: tags,
				})
			}
			restrictions := make([]shared.Restrictions, 0, len(r.Constraints.DataplaneProxy.Restrictions))
			for _, restrictionsItem := range r.Constraints.DataplaneProxy.Restrictions {
				tags1 := make(map[string]string)
				for tagsKey1, tagsValue1 := range restrictionsItem.Tags {
					var tagsInst1 string
					tagsInst1 = tagsValue1.ValueString()

					tags1[tagsKey1] = tagsInst1
				}
				restrictions = append(restrictions, shared.Restrictions{
					Tags: tags1,
				})
			}
			dataplaneProxy = &shared.DataplaneProxy{
				Requirements: requirements,
				Restrictions: restrictions,
			}
		}
		constraints = &shared.Constraints{
			DataplaneProxy: dataplaneProxy,
		}
	}
	labels := make(map[string]string)
	for labelsKey, labelsValue := range r.Labels {
		var labelsInst string
		labelsInst = labelsValue.ValueString()

		labels[labelsKey] = labelsInst
	}
	var logging *shared.Logging
	if r.Logging != nil {
		backends := make([]shared.Backends, 0, len(r.Logging.Backends))
		for _, backendsItem := range r.Logging.Backends {
			var conf *shared.MeshItemLoggingConf
			if backendsItem.Conf != nil {
				var fileLoggingBackendConfig *shared.FileLoggingBackendConfig
				if backendsItem.Conf.FileLoggingBackendConfig != nil {
					path := new(string)
					if !backendsItem.Conf.FileLoggingBackendConfig.Path.IsUnknown() && !backendsItem.Conf.FileLoggingBackendConfig.Path.IsNull() {
						*path = backendsItem.Conf.FileLoggingBackendConfig.Path.ValueString()
					} else {
						path = nil
					}
					fileLoggingBackendConfig = &shared.FileLoggingBackendConfig{
						Path: path,
					}
				}
				if fileLoggingBackendConfig != nil {
					conf = &shared.MeshItemLoggingConf{
						FileLoggingBackendConfig: fileLoggingBackendConfig,
					}
				}
				var tcpLoggingBackendConfig *shared.TCPLoggingBackendConfig
				if backendsItem.Conf.TCPLoggingBackendConfig != nil {
					address := new(string)
					if !backendsItem.Conf.TCPLoggingBackendConfig.Address.IsUnknown() && !backendsItem.Conf.TCPLoggingBackendConfig.Address.IsNull() {
						*address = backendsItem.Conf.TCPLoggingBackendConfig.Address.ValueString()
					} else {
						address = nil
					}
					tcpLoggingBackendConfig = &shared.TCPLoggingBackendConfig{
						Address: address,
					}
				}
				if tcpLoggingBackendConfig != nil {
					conf = &shared.MeshItemLoggingConf{
						TCPLoggingBackendConfig: tcpLoggingBackendConfig,
					}
				}
			}
			format := new(string)
			if !backendsItem.Format.IsUnknown() && !backendsItem.Format.IsNull() {
				*format = backendsItem.Format.ValueString()
			} else {
				format = nil
			}
			name := new(string)
			if !backendsItem.Name.IsUnknown() && !backendsItem.Name.IsNull() {
				*name = backendsItem.Name.ValueString()
			} else {
				name = nil
			}
			typeVar := new(string)
			if !backendsItem.Type.IsUnknown() && !backendsItem.Type.IsNull() {
				*typeVar = backendsItem.Type.ValueString()
			} else {
				typeVar = nil
			}
			backends = append(backends, shared.Backends{
				Conf:   conf,
				Format: format,
				Name:   name,
				Type:   typeVar,
			})
		}
		defaultBackend := new(string)
		if !r.Logging.DefaultBackend.IsUnknown() && !r.Logging.DefaultBackend.IsNull() {
			*defaultBackend = r.Logging.DefaultBackend.ValueString()
		} else {
			defaultBackend = nil
		}
		logging = &shared.Logging{
			Backends:       backends,
			DefaultBackend: defaultBackend,
		}
	}
	var meshServices *shared.MeshServices
	if r.MeshServices != nil {
		var mode *shared.Mode
		if r.MeshServices.Mode != nil {
			str := new(string)
			if !r.MeshServices.Mode.Str.IsUnknown() && !r.MeshServices.Mode.Str.IsNull() {
				*str = r.MeshServices.Mode.Str.ValueString()
			} else {
				str = nil
			}
			if str != nil {
				mode = &shared.Mode{
					Str: str,
				}
			}
			integer := new(int64)
			if !r.MeshServices.Mode.Integer.IsUnknown() && !r.MeshServices.Mode.Integer.IsNull() {
				*integer = r.MeshServices.Mode.Integer.ValueInt64()
			} else {
				integer = nil
			}
			if integer != nil {
				mode = &shared.Mode{
					Integer: integer,
				}
			}
		}
		meshServices = &shared.MeshServices{
			Mode: mode,
		}
	}
	var metrics *shared.Metrics
	if r.Metrics != nil {
		backends1 := make([]shared.MeshItemBackends, 0, len(r.Metrics.Backends))
		for _, backendsItem1 := range r.Metrics.Backends {
			var conf1 *shared.MeshItemConf
			if backendsItem1.Conf != nil {
				var prometheusMetricsBackendConfig *shared.PrometheusMetricsBackendConfig
				if backendsItem1.Conf.PrometheusMetricsBackendConfig != nil {
					aggregate := make([]shared.Aggregate, 0, len(backendsItem1.Conf.PrometheusMetricsBackendConfig.Aggregate))
					for _, aggregateItem := range backendsItem1.Conf.PrometheusMetricsBackendConfig.Aggregate {
						address1 := new(string)
						if !aggregateItem.Address.IsUnknown() && !aggregateItem.Address.IsNull() {
							*address1 = aggregateItem.Address.ValueString()
						} else {
							address1 = nil
						}
						enabled := new(bool)
						if !aggregateItem.Enabled.IsUnknown() && !aggregateItem.Enabled.IsNull() {
							*enabled = aggregateItem.Enabled.ValueBool()
						} else {
							enabled = nil
						}
						name1 := new(string)
						if !aggregateItem.Name.IsUnknown() && !aggregateItem.Name.IsNull() {
							*name1 = aggregateItem.Name.ValueString()
						} else {
							name1 = nil
						}
						path1 := new(string)
						if !aggregateItem.Path.IsUnknown() && !aggregateItem.Path.IsNull() {
							*path1 = aggregateItem.Path.ValueString()
						} else {
							path1 = nil
						}
						port := new(int64)
						if !aggregateItem.Port.IsUnknown() && !aggregateItem.Port.IsNull() {
							*port = aggregateItem.Port.ValueInt64()
						} else {
							port = nil
						}
						aggregate = append(aggregate, shared.Aggregate{
							Address: address1,
							Enabled: enabled,
							Name:    name1,
							Path:    path1,
							Port:    port,
						})
					}
					var envoy *shared.Envoy
					if backendsItem1.Conf.PrometheusMetricsBackendConfig.Envoy != nil {
						filterRegex := new(string)
						if !backendsItem1.Conf.PrometheusMetricsBackendConfig.Envoy.FilterRegex.IsUnknown() && !backendsItem1.Conf.PrometheusMetricsBackendConfig.Envoy.FilterRegex.IsNull() {
							*filterRegex = backendsItem1.Conf.PrometheusMetricsBackendConfig.Envoy.FilterRegex.ValueString()
						} else {
							filterRegex = nil
						}
						usedOnly := new(bool)
						if !backendsItem1.Conf.PrometheusMetricsBackendConfig.Envoy.UsedOnly.IsUnknown() && !backendsItem1.Conf.PrometheusMetricsBackendConfig.Envoy.UsedOnly.IsNull() {
							*usedOnly = backendsItem1.Conf.PrometheusMetricsBackendConfig.Envoy.UsedOnly.ValueBool()
						} else {
							usedOnly = nil
						}
						envoy = &shared.Envoy{
							FilterRegex: filterRegex,
							UsedOnly:    usedOnly,
						}
					}
					path2 := new(string)
					if !backendsItem1.Conf.PrometheusMetricsBackendConfig.Path.IsUnknown() && !backendsItem1.Conf.PrometheusMetricsBackendConfig.Path.IsNull() {
						*path2 = backendsItem1.Conf.PrometheusMetricsBackendConfig.Path.ValueString()
					} else {
						path2 = nil
					}
					port1 := new(int64)
					if !backendsItem1.Conf.PrometheusMetricsBackendConfig.Port.IsUnknown() && !backendsItem1.Conf.PrometheusMetricsBackendConfig.Port.IsNull() {
						*port1 = backendsItem1.Conf.PrometheusMetricsBackendConfig.Port.ValueInt64()
					} else {
						port1 = nil
					}
					skipMTLS := new(bool)
					if !backendsItem1.Conf.PrometheusMetricsBackendConfig.SkipMTLS.IsUnknown() && !backendsItem1.Conf.PrometheusMetricsBackendConfig.SkipMTLS.IsNull() {
						*skipMTLS = backendsItem1.Conf.PrometheusMetricsBackendConfig.SkipMTLS.ValueBool()
					} else {
						skipMTLS = nil
					}
					tags2 := make(map[string]string)
					for tagsKey2, tagsValue2 := range backendsItem1.Conf.PrometheusMetricsBackendConfig.Tags {
						var tagsInst2 string
						tagsInst2 = tagsValue2.ValueString()

						tags2[tagsKey2] = tagsInst2
					}
					var tls *shared.ConfTLS
					if backendsItem1.Conf.PrometheusMetricsBackendConfig.TLS != nil {
						var mode1 *shared.ConfMode
						if backendsItem1.Conf.PrometheusMetricsBackendConfig.TLS.Mode != nil {
							str1 := new(string)
							if !backendsItem1.Conf.PrometheusMetricsBackendConfig.TLS.Mode.Str.IsUnknown() && !backendsItem1.Conf.PrometheusMetricsBackendConfig.TLS.Mode.Str.IsNull() {
								*str1 = backendsItem1.Conf.PrometheusMetricsBackendConfig.TLS.Mode.Str.ValueString()
							} else {
								str1 = nil
							}
							if str1 != nil {
								mode1 = &shared.ConfMode{
									Str: str1,
								}
							}
							integer1 := new(int64)
							if !backendsItem1.Conf.PrometheusMetricsBackendConfig.TLS.Mode.Integer.IsUnknown() && !backendsItem1.Conf.PrometheusMetricsBackendConfig.TLS.Mode.Integer.IsNull() {
								*integer1 = backendsItem1.Conf.PrometheusMetricsBackendConfig.TLS.Mode.Integer.ValueInt64()
							} else {
								integer1 = nil
							}
							if integer1 != nil {
								mode1 = &shared.ConfMode{
									Integer: integer1,
								}
							}
						}
						tls = &shared.ConfTLS{
							Mode: mode1,
						}
					}
					prometheusMetricsBackendConfig = &shared.PrometheusMetricsBackendConfig{
						Aggregate: aggregate,
						Envoy:     envoy,
						Path:      path2,
						Port:      port1,
						SkipMTLS:  skipMTLS,
						Tags:      tags2,
						TLS:       tls,
					}
				}
				if prometheusMetricsBackendConfig != nil {
					conf1 = &shared.MeshItemConf{
						PrometheusMetricsBackendConfig: prometheusMetricsBackendConfig,
					}
				}
			}
			name2 := new(string)
			if !backendsItem1.Name.IsUnknown() && !backendsItem1.Name.IsNull() {
				*name2 = backendsItem1.Name.ValueString()
			} else {
				name2 = nil
			}
			type1 := new(string)
			if !backendsItem1.Type.IsUnknown() && !backendsItem1.Type.IsNull() {
				*type1 = backendsItem1.Type.ValueString()
			} else {
				type1 = nil
			}
			backends1 = append(backends1, shared.MeshItemBackends{
				Conf: conf1,
				Name: name2,
				Type: type1,
			})
		}
		enabledBackend := new(string)
		if !r.Metrics.EnabledBackend.IsUnknown() && !r.Metrics.EnabledBackend.IsNull() {
			*enabledBackend = r.Metrics.EnabledBackend.ValueString()
		} else {
			enabledBackend = nil
		}
		metrics = &shared.Metrics{
			Backends:       backends1,
			EnabledBackend: enabledBackend,
		}
	}
	var mtls *shared.Mtls
	if r.Mtls != nil {
		backends2 := make([]shared.MeshItemMtlsBackends, 0, len(r.Mtls.Backends))
		for _, backendsItem2 := range r.Mtls.Backends {
			var conf2 *shared.MeshItemMtlsConf
			if backendsItem2.Conf != nil {
				var providedCertificateAuthorityConfig *shared.ProvidedCertificateAuthorityConfig
				if backendsItem2.Conf.ProvidedCertificateAuthorityConfig != nil {
					var cert *shared.Cert
					if backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Cert != nil {
						var certDataSourceFile *shared.CertDataSourceFile
						if backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Cert.DataSourceFile != nil {
							file := new(string)
							if !backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Cert.DataSourceFile.File.IsUnknown() && !backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Cert.DataSourceFile.File.IsNull() {
								*file = backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Cert.DataSourceFile.File.ValueString()
							} else {
								file = nil
							}
							certDataSourceFile = &shared.CertDataSourceFile{
								File: file,
							}
						}
						if certDataSourceFile != nil {
							cert = &shared.Cert{
								CertDataSourceFile: certDataSourceFile,
							}
						}
						var certDataSourceInline *shared.CertDataSourceInline
						if backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Cert.DataSourceInline != nil {
							inline := new(string)
							if !backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Cert.DataSourceInline.Inline.IsUnknown() && !backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Cert.DataSourceInline.Inline.IsNull() {
								*inline = backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Cert.DataSourceInline.Inline.ValueString()
							} else {
								inline = nil
							}
							certDataSourceInline = &shared.CertDataSourceInline{
								Inline: inline,
							}
						}
						if certDataSourceInline != nil {
							cert = &shared.Cert{
								CertDataSourceInline: certDataSourceInline,
							}
						}
						var certDataSourceInlineString *shared.CertDataSourceInlineString
						if backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Cert.DataSourceInlineString != nil {
							inlineString := new(string)
							if !backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Cert.DataSourceInlineString.InlineString.IsUnknown() && !backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Cert.DataSourceInlineString.InlineString.IsNull() {
								*inlineString = backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Cert.DataSourceInlineString.InlineString.ValueString()
							} else {
								inlineString = nil
							}
							certDataSourceInlineString = &shared.CertDataSourceInlineString{
								InlineString: inlineString,
							}
						}
						if certDataSourceInlineString != nil {
							cert = &shared.Cert{
								CertDataSourceInlineString: certDataSourceInlineString,
							}
						}
						var certDataSourceSecret *shared.CertDataSourceSecret
						if backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Cert.DataSourceSecret != nil {
							secret := new(string)
							if !backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Cert.DataSourceSecret.Secret.IsUnknown() && !backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Cert.DataSourceSecret.Secret.IsNull() {
								*secret = backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Cert.DataSourceSecret.Secret.ValueString()
							} else {
								secret = nil
							}
							certDataSourceSecret = &shared.CertDataSourceSecret{
								Secret: secret,
							}
						}
						if certDataSourceSecret != nil {
							cert = &shared.Cert{
								CertDataSourceSecret: certDataSourceSecret,
							}
						}
					}
					var key *shared.Key
					if backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Key != nil {
						var keyDataSourceFile *shared.KeyDataSourceFile
						if backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Key.DataSourceFile != nil {
							file1 := new(string)
							if !backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Key.DataSourceFile.File.IsUnknown() && !backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Key.DataSourceFile.File.IsNull() {
								*file1 = backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Key.DataSourceFile.File.ValueString()
							} else {
								file1 = nil
							}
							keyDataSourceFile = &shared.KeyDataSourceFile{
								File: file1,
							}
						}
						if keyDataSourceFile != nil {
							key = &shared.Key{
								KeyDataSourceFile: keyDataSourceFile,
							}
						}
						var keyDataSourceInline *shared.KeyDataSourceInline
						if backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Key.DataSourceInline != nil {
							inline1 := new(string)
							if !backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Key.DataSourceInline.Inline.IsUnknown() && !backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Key.DataSourceInline.Inline.IsNull() {
								*inline1 = backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Key.DataSourceInline.Inline.ValueString()
							} else {
								inline1 = nil
							}
							keyDataSourceInline = &shared.KeyDataSourceInline{
								Inline: inline1,
							}
						}
						if keyDataSourceInline != nil {
							key = &shared.Key{
								KeyDataSourceInline: keyDataSourceInline,
							}
						}
						var keyDataSourceInlineString *shared.KeyDataSourceInlineString
						if backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Key.DataSourceInlineString != nil {
							inlineString1 := new(string)
							if !backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Key.DataSourceInlineString.InlineString.IsUnknown() && !backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Key.DataSourceInlineString.InlineString.IsNull() {
								*inlineString1 = backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Key.DataSourceInlineString.InlineString.ValueString()
							} else {
								inlineString1 = nil
							}
							keyDataSourceInlineString = &shared.KeyDataSourceInlineString{
								InlineString: inlineString1,
							}
						}
						if keyDataSourceInlineString != nil {
							key = &shared.Key{
								KeyDataSourceInlineString: keyDataSourceInlineString,
							}
						}
						var keyDataSourceSecret *shared.KeyDataSourceSecret
						if backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Key.DataSourceSecret != nil {
							secret1 := new(string)
							if !backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Key.DataSourceSecret.Secret.IsUnknown() && !backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Key.DataSourceSecret.Secret.IsNull() {
								*secret1 = backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Key.DataSourceSecret.Secret.ValueString()
							} else {
								secret1 = nil
							}
							keyDataSourceSecret = &shared.KeyDataSourceSecret{
								Secret: secret1,
							}
						}
						if keyDataSourceSecret != nil {
							key = &shared.Key{
								KeyDataSourceSecret: keyDataSourceSecret,
							}
						}
					}
					providedCertificateAuthorityConfig = &shared.ProvidedCertificateAuthorityConfig{
						Cert: cert,
						Key:  key,
					}
				}
				if providedCertificateAuthorityConfig != nil {
					conf2 = &shared.MeshItemMtlsConf{
						ProvidedCertificateAuthorityConfig: providedCertificateAuthorityConfig,
					}
				}
				var builtinCertificateAuthorityConfig *shared.BuiltinCertificateAuthorityConfig
				if backendsItem2.Conf.BuiltinCertificateAuthorityConfig != nil {
					var caCert *shared.BuiltinCertificateAuthorityConfigConfCaCert
					if backendsItem2.Conf.BuiltinCertificateAuthorityConfig.CaCert != nil {
						expiration := new(string)
						if !backendsItem2.Conf.BuiltinCertificateAuthorityConfig.CaCert.Expiration.IsUnknown() && !backendsItem2.Conf.BuiltinCertificateAuthorityConfig.CaCert.Expiration.IsNull() {
							*expiration = backendsItem2.Conf.BuiltinCertificateAuthorityConfig.CaCert.Expiration.ValueString()
						} else {
							expiration = nil
						}
						rsaBits := new(int64)
						if !backendsItem2.Conf.BuiltinCertificateAuthorityConfig.CaCert.RsaBits.IsUnknown() && !backendsItem2.Conf.BuiltinCertificateAuthorityConfig.CaCert.RsaBits.IsNull() {
							*rsaBits = backendsItem2.Conf.BuiltinCertificateAuthorityConfig.CaCert.RsaBits.ValueInt64()
						} else {
							rsaBits = nil
						}
						caCert = &shared.BuiltinCertificateAuthorityConfigConfCaCert{
							Expiration: expiration,
							RsaBits:    rsaBits,
						}
					}
					builtinCertificateAuthorityConfig = &shared.BuiltinCertificateAuthorityConfig{
						CaCert: caCert,
					}
				}
				if builtinCertificateAuthorityConfig != nil {
					conf2 = &shared.MeshItemMtlsConf{
						BuiltinCertificateAuthorityConfig: builtinCertificateAuthorityConfig,
					}
				}
				var vaultCertificateAuthorityConfig *shared.VaultCertificateAuthorityConfig
				if backendsItem2.Conf.VaultCertificateAuthorityConfig != nil {
					var vaultCertificateAuthorityConfigFromCp *shared.VaultCertificateAuthorityConfigFromCp
					if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp != nil {
						var fromCp *shared.FromCp
						if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp != nil {
							address2 := new(string)
							if !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Address.IsUnknown() && !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Address.IsNull() {
								*address2 = backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Address.ValueString()
							} else {
								address2 = nil
							}
							agentAddress := new(string)
							if !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.AgentAddress.IsUnknown() && !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.AgentAddress.IsNull() {
								*agentAddress = backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.AgentAddress.ValueString()
							} else {
								agentAddress = nil
							}
							var auth *shared.VaultCertificateAuthorityConfigAuth
							if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth != nil {
								var vaultCertificateAuthorityConfigFromCpAuthAws *shared.VaultCertificateAuthorityConfigFromCpAuthAws
								if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthAws != nil {
									var aws *shared.Aws
									if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthAws.Aws != nil {
										iamServerIDHeader := new(string)
										if !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthAws.Aws.IamServerIDHeader.IsUnknown() && !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthAws.Aws.IamServerIDHeader.IsNull() {
											*iamServerIDHeader = backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthAws.Aws.IamServerIDHeader.ValueString()
										} else {
											iamServerIDHeader = nil
										}
										role := new(string)
										if !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthAws.Aws.Role.IsUnknown() && !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthAws.Aws.Role.IsNull() {
											*role = backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthAws.Aws.Role.ValueString()
										} else {
											role = nil
										}
										var typeVar1 *shared.AuthType
										if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthAws.Aws.Type != nil {
											str2 := new(string)
											if !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthAws.Aws.Type.Str.IsUnknown() && !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthAws.Aws.Type.Str.IsNull() {
												*str2 = backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthAws.Aws.Type.Str.ValueString()
											} else {
												str2 = nil
											}
											if str2 != nil {
												typeVar1 = &shared.AuthType{
													Str: str2,
												}
											}
											integer2 := new(int64)
											if !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthAws.Aws.Type.Integer.IsUnknown() && !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthAws.Aws.Type.Integer.IsNull() {
												*integer2 = backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthAws.Aws.Type.Integer.ValueInt64()
											} else {
												integer2 = nil
											}
											if integer2 != nil {
												typeVar1 = &shared.AuthType{
													Integer: integer2,
												}
											}
										}
										aws = &shared.Aws{
											IamServerIDHeader: iamServerIDHeader,
											Role:              role,
											Type:              typeVar1,
										}
									}
									vaultCertificateAuthorityConfigFromCpAuthAws = &shared.VaultCertificateAuthorityConfigFromCpAuthAws{
										Aws: aws,
									}
								}
								if vaultCertificateAuthorityConfigFromCpAuthAws != nil {
									auth = &shared.VaultCertificateAuthorityConfigAuth{
										VaultCertificateAuthorityConfigFromCpAuthAws: vaultCertificateAuthorityConfigFromCpAuthAws,
									}
								}
								var vaultCertificateAuthorityConfigFromCpAuthTLS *shared.VaultCertificateAuthorityConfigFromCpAuthTLS
								if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS != nil {
									var tls1 *shared.AuthTLS
									if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS != nil {
										var clientCert *shared.AuthClientCert
										if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert != nil {
											var clientCertDataSourceFile *shared.ClientCertDataSourceFile
											if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert.DataSourceFile != nil {
												file2 := new(string)
												if !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert.DataSourceFile.File.IsUnknown() && !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert.DataSourceFile.File.IsNull() {
													*file2 = backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert.DataSourceFile.File.ValueString()
												} else {
													file2 = nil
												}
												clientCertDataSourceFile = &shared.ClientCertDataSourceFile{
													File: file2,
												}
											}
											if clientCertDataSourceFile != nil {
												clientCert = &shared.AuthClientCert{
													ClientCertDataSourceFile: clientCertDataSourceFile,
												}
											}
											var clientCertDataSourceInline *shared.ClientCertDataSourceInline
											if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert.DataSourceInline != nil {
												inline2 := new(string)
												if !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert.DataSourceInline.Inline.IsUnknown() && !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert.DataSourceInline.Inline.IsNull() {
													*inline2 = backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert.DataSourceInline.Inline.ValueString()
												} else {
													inline2 = nil
												}
												clientCertDataSourceInline = &shared.ClientCertDataSourceInline{
													Inline: inline2,
												}
											}
											if clientCertDataSourceInline != nil {
												clientCert = &shared.AuthClientCert{
													ClientCertDataSourceInline: clientCertDataSourceInline,
												}
											}
											var clientCertDataSourceInlineString *shared.ClientCertDataSourceInlineString
											if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert.DataSourceInlineString != nil {
												inlineString2 := new(string)
												if !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert.DataSourceInlineString.InlineString.IsUnknown() && !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert.DataSourceInlineString.InlineString.IsNull() {
													*inlineString2 = backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert.DataSourceInlineString.InlineString.ValueString()
												} else {
													inlineString2 = nil
												}
												clientCertDataSourceInlineString = &shared.ClientCertDataSourceInlineString{
													InlineString: inlineString2,
												}
											}
											if clientCertDataSourceInlineString != nil {
												clientCert = &shared.AuthClientCert{
													ClientCertDataSourceInlineString: clientCertDataSourceInlineString,
												}
											}
											var clientCertDataSourceSecret *shared.ClientCertDataSourceSecret
											if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert.DataSourceSecret != nil {
												secret2 := new(string)
												if !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert.DataSourceSecret.Secret.IsUnknown() && !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert.DataSourceSecret.Secret.IsNull() {
													*secret2 = backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientCert.DataSourceSecret.Secret.ValueString()
												} else {
													secret2 = nil
												}
												clientCertDataSourceSecret = &shared.ClientCertDataSourceSecret{
													Secret: secret2,
												}
											}
											if clientCertDataSourceSecret != nil {
												clientCert = &shared.AuthClientCert{
													ClientCertDataSourceSecret: clientCertDataSourceSecret,
												}
											}
										}
										var clientKey *shared.AuthClientKey
										if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey != nil {
											var clientKeyDataSourceFile *shared.ClientKeyDataSourceFile
											if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey.DataSourceFile != nil {
												file3 := new(string)
												if !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey.DataSourceFile.File.IsUnknown() && !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey.DataSourceFile.File.IsNull() {
													*file3 = backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey.DataSourceFile.File.ValueString()
												} else {
													file3 = nil
												}
												clientKeyDataSourceFile = &shared.ClientKeyDataSourceFile{
													File: file3,
												}
											}
											if clientKeyDataSourceFile != nil {
												clientKey = &shared.AuthClientKey{
													ClientKeyDataSourceFile: clientKeyDataSourceFile,
												}
											}
											var clientKeyDataSourceInline *shared.ClientKeyDataSourceInline
											if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey.DataSourceInline != nil {
												inline3 := new(string)
												if !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey.DataSourceInline.Inline.IsUnknown() && !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey.DataSourceInline.Inline.IsNull() {
													*inline3 = backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey.DataSourceInline.Inline.ValueString()
												} else {
													inline3 = nil
												}
												clientKeyDataSourceInline = &shared.ClientKeyDataSourceInline{
													Inline: inline3,
												}
											}
											if clientKeyDataSourceInline != nil {
												clientKey = &shared.AuthClientKey{
													ClientKeyDataSourceInline: clientKeyDataSourceInline,
												}
											}
											var clientKeyDataSourceInlineString *shared.ClientKeyDataSourceInlineString
											if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey.DataSourceInlineString != nil {
												inlineString3 := new(string)
												if !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey.DataSourceInlineString.InlineString.IsUnknown() && !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey.DataSourceInlineString.InlineString.IsNull() {
													*inlineString3 = backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey.DataSourceInlineString.InlineString.ValueString()
												} else {
													inlineString3 = nil
												}
												clientKeyDataSourceInlineString = &shared.ClientKeyDataSourceInlineString{
													InlineString: inlineString3,
												}
											}
											if clientKeyDataSourceInlineString != nil {
												clientKey = &shared.AuthClientKey{
													ClientKeyDataSourceInlineString: clientKeyDataSourceInlineString,
												}
											}
											var clientKeyDataSourceSecret *shared.ClientKeyDataSourceSecret
											if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey.DataSourceSecret != nil {
												secret3 := new(string)
												if !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey.DataSourceSecret.Secret.IsUnknown() && !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey.DataSourceSecret.Secret.IsNull() {
													*secret3 = backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthTLS.TLS.ClientKey.DataSourceSecret.Secret.ValueString()
												} else {
													secret3 = nil
												}
												clientKeyDataSourceSecret = &shared.ClientKeyDataSourceSecret{
													Secret: secret3,
												}
											}
											if clientKeyDataSourceSecret != nil {
												clientKey = &shared.AuthClientKey{
													ClientKeyDataSourceSecret: clientKeyDataSourceSecret,
												}
											}
										}
										tls1 = &shared.AuthTLS{
											ClientCert: clientCert,
											ClientKey:  clientKey,
										}
									}
									vaultCertificateAuthorityConfigFromCpAuthTLS = &shared.VaultCertificateAuthorityConfigFromCpAuthTLS{
										TLS: tls1,
									}
								}
								if vaultCertificateAuthorityConfigFromCpAuthTLS != nil {
									auth = &shared.VaultCertificateAuthorityConfigAuth{
										VaultCertificateAuthorityConfigFromCpAuthTLS: vaultCertificateAuthorityConfigFromCpAuthTLS,
									}
								}
								var vaultCertificateAuthorityConfigFromCpAuthToken *shared.VaultCertificateAuthorityConfigFromCpAuthToken
								if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken != nil {
									var token *shared.Token
									if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token != nil {
										var tokenDataSourceFile *shared.TokenDataSourceFile
										if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token.DataSourceFile != nil {
											file4 := new(string)
											if !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token.DataSourceFile.File.IsUnknown() && !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token.DataSourceFile.File.IsNull() {
												*file4 = backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token.DataSourceFile.File.ValueString()
											} else {
												file4 = nil
											}
											tokenDataSourceFile = &shared.TokenDataSourceFile{
												File: file4,
											}
										}
										if tokenDataSourceFile != nil {
											token = &shared.Token{
												TokenDataSourceFile: tokenDataSourceFile,
											}
										}
										var tokenDataSourceInline *shared.TokenDataSourceInline
										if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token.DataSourceInline != nil {
											inline4 := new(string)
											if !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token.DataSourceInline.Inline.IsUnknown() && !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token.DataSourceInline.Inline.IsNull() {
												*inline4 = backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token.DataSourceInline.Inline.ValueString()
											} else {
												inline4 = nil
											}
											tokenDataSourceInline = &shared.TokenDataSourceInline{
												Inline: inline4,
											}
										}
										if tokenDataSourceInline != nil {
											token = &shared.Token{
												TokenDataSourceInline: tokenDataSourceInline,
											}
										}
										var tokenDataSourceInlineString *shared.TokenDataSourceInlineString
										if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token.DataSourceInlineString != nil {
											inlineString4 := new(string)
											if !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token.DataSourceInlineString.InlineString.IsUnknown() && !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token.DataSourceInlineString.InlineString.IsNull() {
												*inlineString4 = backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token.DataSourceInlineString.InlineString.ValueString()
											} else {
												inlineString4 = nil
											}
											tokenDataSourceInlineString = &shared.TokenDataSourceInlineString{
												InlineString: inlineString4,
											}
										}
										if tokenDataSourceInlineString != nil {
											token = &shared.Token{
												TokenDataSourceInlineString: tokenDataSourceInlineString,
											}
										}
										var tokenDataSourceSecret *shared.TokenDataSourceSecret
										if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token.DataSourceSecret != nil {
											secret4 := new(string)
											if !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token.DataSourceSecret.Secret.IsUnknown() && !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token.DataSourceSecret.Secret.IsNull() {
												*secret4 = backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Auth.VaultCertificateAuthorityConfigFromCpAuthToken.Token.DataSourceSecret.Secret.ValueString()
											} else {
												secret4 = nil
											}
											tokenDataSourceSecret = &shared.TokenDataSourceSecret{
												Secret: secret4,
											}
										}
										if tokenDataSourceSecret != nil {
											token = &shared.Token{
												TokenDataSourceSecret: tokenDataSourceSecret,
											}
										}
									}
									vaultCertificateAuthorityConfigFromCpAuthToken = &shared.VaultCertificateAuthorityConfigFromCpAuthToken{
										Token: token,
									}
								}
								if vaultCertificateAuthorityConfigFromCpAuthToken != nil {
									auth = &shared.VaultCertificateAuthorityConfigAuth{
										VaultCertificateAuthorityConfigFromCpAuthToken: vaultCertificateAuthorityConfigFromCpAuthToken,
									}
								}
							}
							commonName := new(string)
							if !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.CommonName.IsUnknown() && !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.CommonName.IsNull() {
								*commonName = backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.CommonName.ValueString()
							} else {
								commonName = nil
							}
							namespace := new(string)
							if !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Namespace.IsUnknown() && !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Namespace.IsNull() {
								*namespace = backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Namespace.ValueString()
							} else {
								namespace = nil
							}
							pki := new(string)
							if !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Pki.IsUnknown() && !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Pki.IsNull() {
								*pki = backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Pki.ValueString()
							} else {
								pki = nil
							}
							role1 := new(string)
							if !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Role.IsUnknown() && !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Role.IsNull() {
								*role1 = backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.Role.ValueString()
							} else {
								role1 = nil
							}
							var tls2 *shared.VaultCertificateAuthorityConfigTLS
							if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS != nil {
								var caCert1 *shared.VaultCertificateAuthorityConfigCaCert
								if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert != nil {
									var vaultCertificateAuthorityConfigFromCpCaCertDataSourceFile *shared.VaultCertificateAuthorityConfigFromCpCaCertDataSourceFile
									if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert.DataSourceFile != nil {
										file5 := new(string)
										if !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert.DataSourceFile.File.IsUnknown() && !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert.DataSourceFile.File.IsNull() {
											*file5 = backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert.DataSourceFile.File.ValueString()
										} else {
											file5 = nil
										}
										vaultCertificateAuthorityConfigFromCpCaCertDataSourceFile = &shared.VaultCertificateAuthorityConfigFromCpCaCertDataSourceFile{
											File: file5,
										}
									}
									if vaultCertificateAuthorityConfigFromCpCaCertDataSourceFile != nil {
										caCert1 = &shared.VaultCertificateAuthorityConfigCaCert{
											VaultCertificateAuthorityConfigFromCpCaCertDataSourceFile: vaultCertificateAuthorityConfigFromCpCaCertDataSourceFile,
										}
									}
									var vaultCertificateAuthorityConfigFromCpCaCertDataSourceInline *shared.VaultCertificateAuthorityConfigFromCpCaCertDataSourceInline
									if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert.DataSourceInline != nil {
										inline5 := new(string)
										if !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert.DataSourceInline.Inline.IsUnknown() && !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert.DataSourceInline.Inline.IsNull() {
											*inline5 = backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert.DataSourceInline.Inline.ValueString()
										} else {
											inline5 = nil
										}
										vaultCertificateAuthorityConfigFromCpCaCertDataSourceInline = &shared.VaultCertificateAuthorityConfigFromCpCaCertDataSourceInline{
											Inline: inline5,
										}
									}
									if vaultCertificateAuthorityConfigFromCpCaCertDataSourceInline != nil {
										caCert1 = &shared.VaultCertificateAuthorityConfigCaCert{
											VaultCertificateAuthorityConfigFromCpCaCertDataSourceInline: vaultCertificateAuthorityConfigFromCpCaCertDataSourceInline,
										}
									}
									var vaultCertificateAuthorityConfigFromCpCaCertDataSourceInlineString *shared.VaultCertificateAuthorityConfigFromCpCaCertDataSourceInlineString
									if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert.DataSourceInlineString != nil {
										inlineString5 := new(string)
										if !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert.DataSourceInlineString.InlineString.IsUnknown() && !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert.DataSourceInlineString.InlineString.IsNull() {
											*inlineString5 = backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert.DataSourceInlineString.InlineString.ValueString()
										} else {
											inlineString5 = nil
										}
										vaultCertificateAuthorityConfigFromCpCaCertDataSourceInlineString = &shared.VaultCertificateAuthorityConfigFromCpCaCertDataSourceInlineString{
											InlineString: inlineString5,
										}
									}
									if vaultCertificateAuthorityConfigFromCpCaCertDataSourceInlineString != nil {
										caCert1 = &shared.VaultCertificateAuthorityConfigCaCert{
											VaultCertificateAuthorityConfigFromCpCaCertDataSourceInlineString: vaultCertificateAuthorityConfigFromCpCaCertDataSourceInlineString,
										}
									}
									var vaultCertificateAuthorityConfigFromCpCaCertDataSourceSecret *shared.VaultCertificateAuthorityConfigFromCpCaCertDataSourceSecret
									if backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert.DataSourceSecret != nil {
										secret5 := new(string)
										if !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert.DataSourceSecret.Secret.IsUnknown() && !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert.DataSourceSecret.Secret.IsNull() {
											*secret5 = backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.CaCert.DataSourceSecret.Secret.ValueString()
										} else {
											secret5 = nil
										}
										vaultCertificateAuthorityConfigFromCpCaCertDataSourceSecret = &shared.VaultCertificateAuthorityConfigFromCpCaCertDataSourceSecret{
											Secret: secret5,
										}
									}
									if vaultCertificateAuthorityConfigFromCpCaCertDataSourceSecret != nil {
										caCert1 = &shared.VaultCertificateAuthorityConfigCaCert{
											VaultCertificateAuthorityConfigFromCpCaCertDataSourceSecret: vaultCertificateAuthorityConfigFromCpCaCertDataSourceSecret,
										}
									}
								}
								serverName := new(string)
								if !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.ServerName.IsUnknown() && !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.ServerName.IsNull() {
									*serverName = backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.ServerName.ValueString()
								} else {
									serverName = nil
								}
								skipVerify := new(bool)
								if !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.SkipVerify.IsUnknown() && !backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.SkipVerify.IsNull() {
									*skipVerify = backendsItem2.Conf.VaultCertificateAuthorityConfig.VaultCertificateAuthorityConfigFromCp.FromCp.TLS.SkipVerify.ValueBool()
								} else {
									skipVerify = nil
								}
								tls2 = &shared.VaultCertificateAuthorityConfigTLS{
									CaCert:     caCert1,
									ServerName: serverName,
									SkipVerify: skipVerify,
								}
							}
							fromCp = &shared.FromCp{
								Address:      address2,
								AgentAddress: agentAddress,
								Auth:         auth,
								CommonName:   commonName,
								Namespace:    namespace,
								Pki:          pki,
								Role:         role1,
								TLS:          tls2,
							}
						}
						vaultCertificateAuthorityConfigFromCp = &shared.VaultCertificateAuthorityConfigFromCp{
							FromCp: fromCp,
						}
					}
					if vaultCertificateAuthorityConfigFromCp != nil {
						vaultCertificateAuthorityConfig = &shared.VaultCertificateAuthorityConfig{
							VaultCertificateAuthorityConfigFromCp: vaultCertificateAuthorityConfigFromCp,
						}
					}
				}
				if vaultCertificateAuthorityConfig != nil {
					conf2 = &shared.MeshItemMtlsConf{
						VaultCertificateAuthorityConfig: vaultCertificateAuthorityConfig,
					}
				}
				var acmCertificateAuthorityConfig *shared.ACMCertificateAuthorityConfig
				if backendsItem2.Conf.ACMCertificateAuthorityConfig != nil {
					arn := new(string)
					if !backendsItem2.Conf.ACMCertificateAuthorityConfig.Arn.IsUnknown() && !backendsItem2.Conf.ACMCertificateAuthorityConfig.Arn.IsNull() {
						*arn = backendsItem2.Conf.ACMCertificateAuthorityConfig.Arn.ValueString()
					} else {
						arn = nil
					}
					var auth1 *shared.Auth
					if backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth != nil {
						var awsCredentials *shared.AwsCredentials
						if backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials != nil {
							var accessKey *shared.AccessKey
							if backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey != nil {
								var accessKeyDataSourceFile *shared.AccessKeyDataSourceFile
								if backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.DataSourceFile != nil {
									file6 := new(string)
									if !backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.DataSourceFile.File.IsUnknown() && !backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.DataSourceFile.File.IsNull() {
										*file6 = backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.DataSourceFile.File.ValueString()
									} else {
										file6 = nil
									}
									accessKeyDataSourceFile = &shared.AccessKeyDataSourceFile{
										File: file6,
									}
								}
								if accessKeyDataSourceFile != nil {
									accessKey = &shared.AccessKey{
										AccessKeyDataSourceFile: accessKeyDataSourceFile,
									}
								}
								var accessKeyDataSourceInline *shared.AccessKeyDataSourceInline
								if backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.DataSourceInline != nil {
									inline6 := new(string)
									if !backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.DataSourceInline.Inline.IsUnknown() && !backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.DataSourceInline.Inline.IsNull() {
										*inline6 = backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.DataSourceInline.Inline.ValueString()
									} else {
										inline6 = nil
									}
									accessKeyDataSourceInline = &shared.AccessKeyDataSourceInline{
										Inline: inline6,
									}
								}
								if accessKeyDataSourceInline != nil {
									accessKey = &shared.AccessKey{
										AccessKeyDataSourceInline: accessKeyDataSourceInline,
									}
								}
								var accessKeyDataSourceInlineString *shared.AccessKeyDataSourceInlineString
								if backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.DataSourceInlineString != nil {
									inlineString6 := new(string)
									if !backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.DataSourceInlineString.InlineString.IsUnknown() && !backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.DataSourceInlineString.InlineString.IsNull() {
										*inlineString6 = backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.DataSourceInlineString.InlineString.ValueString()
									} else {
										inlineString6 = nil
									}
									accessKeyDataSourceInlineString = &shared.AccessKeyDataSourceInlineString{
										InlineString: inlineString6,
									}
								}
								if accessKeyDataSourceInlineString != nil {
									accessKey = &shared.AccessKey{
										AccessKeyDataSourceInlineString: accessKeyDataSourceInlineString,
									}
								}
								var accessKeyDataSourceSecret *shared.AccessKeyDataSourceSecret
								if backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.DataSourceSecret != nil {
									secret6 := new(string)
									if !backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.DataSourceSecret.Secret.IsUnknown() && !backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.DataSourceSecret.Secret.IsNull() {
										*secret6 = backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.DataSourceSecret.Secret.ValueString()
									} else {
										secret6 = nil
									}
									accessKeyDataSourceSecret = &shared.AccessKeyDataSourceSecret{
										Secret: secret6,
									}
								}
								if accessKeyDataSourceSecret != nil {
									accessKey = &shared.AccessKey{
										AccessKeyDataSourceSecret: accessKeyDataSourceSecret,
									}
								}
							}
							var accessKeySecret *shared.AccessKeySecret
							if backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret != nil {
								var accessKeySecretDataSourceFile *shared.AccessKeySecretDataSourceFile
								if backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.DataSourceFile != nil {
									file7 := new(string)
									if !backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.DataSourceFile.File.IsUnknown() && !backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.DataSourceFile.File.IsNull() {
										*file7 = backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.DataSourceFile.File.ValueString()
									} else {
										file7 = nil
									}
									accessKeySecretDataSourceFile = &shared.AccessKeySecretDataSourceFile{
										File: file7,
									}
								}
								if accessKeySecretDataSourceFile != nil {
									accessKeySecret = &shared.AccessKeySecret{
										AccessKeySecretDataSourceFile: accessKeySecretDataSourceFile,
									}
								}
								var accessKeySecretDataSourceInline *shared.AccessKeySecretDataSourceInline
								if backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.DataSourceInline != nil {
									inline7 := new(string)
									if !backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.DataSourceInline.Inline.IsUnknown() && !backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.DataSourceInline.Inline.IsNull() {
										*inline7 = backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.DataSourceInline.Inline.ValueString()
									} else {
										inline7 = nil
									}
									accessKeySecretDataSourceInline = &shared.AccessKeySecretDataSourceInline{
										Inline: inline7,
									}
								}
								if accessKeySecretDataSourceInline != nil {
									accessKeySecret = &shared.AccessKeySecret{
										AccessKeySecretDataSourceInline: accessKeySecretDataSourceInline,
									}
								}
								var accessKeySecretDataSourceInlineString *shared.AccessKeySecretDataSourceInlineString
								if backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.DataSourceInlineString != nil {
									inlineString7 := new(string)
									if !backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.DataSourceInlineString.InlineString.IsUnknown() && !backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.DataSourceInlineString.InlineString.IsNull() {
										*inlineString7 = backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.DataSourceInlineString.InlineString.ValueString()
									} else {
										inlineString7 = nil
									}
									accessKeySecretDataSourceInlineString = &shared.AccessKeySecretDataSourceInlineString{
										InlineString: inlineString7,
									}
								}
								if accessKeySecretDataSourceInlineString != nil {
									accessKeySecret = &shared.AccessKeySecret{
										AccessKeySecretDataSourceInlineString: accessKeySecretDataSourceInlineString,
									}
								}
								var accessKeySecretDataSourceSecret *shared.AccessKeySecretDataSourceSecret
								if backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.DataSourceSecret != nil {
									secret7 := new(string)
									if !backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.DataSourceSecret.Secret.IsUnknown() && !backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.DataSourceSecret.Secret.IsNull() {
										*secret7 = backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.DataSourceSecret.Secret.ValueString()
									} else {
										secret7 = nil
									}
									accessKeySecretDataSourceSecret = &shared.AccessKeySecretDataSourceSecret{
										Secret: secret7,
									}
								}
								if accessKeySecretDataSourceSecret != nil {
									accessKeySecret = &shared.AccessKeySecret{
										AccessKeySecretDataSourceSecret: accessKeySecretDataSourceSecret,
									}
								}
							}
							awsCredentials = &shared.AwsCredentials{
								AccessKey:       accessKey,
								AccessKeySecret: accessKeySecret,
							}
						}
						auth1 = &shared.Auth{
							AwsCredentials: awsCredentials,
						}
					}
					var caCert2 *shared.ConfCaCert
					if backendsItem2.Conf.ACMCertificateAuthorityConfig.CaCert != nil {
						var caCertDataSourceFile *shared.CaCertDataSourceFile
						if backendsItem2.Conf.ACMCertificateAuthorityConfig.CaCert.DataSourceFile != nil {
							file8 := new(string)
							if !backendsItem2.Conf.ACMCertificateAuthorityConfig.CaCert.DataSourceFile.File.IsUnknown() && !backendsItem2.Conf.ACMCertificateAuthorityConfig.CaCert.DataSourceFile.File.IsNull() {
								*file8 = backendsItem2.Conf.ACMCertificateAuthorityConfig.CaCert.DataSourceFile.File.ValueString()
							} else {
								file8 = nil
							}
							caCertDataSourceFile = &shared.CaCertDataSourceFile{
								File: file8,
							}
						}
						if caCertDataSourceFile != nil {
							caCert2 = &shared.ConfCaCert{
								CaCertDataSourceFile: caCertDataSourceFile,
							}
						}
						var caCertDataSourceInline *shared.CaCertDataSourceInline
						if backendsItem2.Conf.ACMCertificateAuthorityConfig.CaCert.DataSourceInline != nil {
							inline8 := new(string)
							if !backendsItem2.Conf.ACMCertificateAuthorityConfig.CaCert.DataSourceInline.Inline.IsUnknown() && !backendsItem2.Conf.ACMCertificateAuthorityConfig.CaCert.DataSourceInline.Inline.IsNull() {
								*inline8 = backendsItem2.Conf.ACMCertificateAuthorityConfig.CaCert.DataSourceInline.Inline.ValueString()
							} else {
								inline8 = nil
							}
							caCertDataSourceInline = &shared.CaCertDataSourceInline{
								Inline: inline8,
							}
						}
						if caCertDataSourceInline != nil {
							caCert2 = &shared.ConfCaCert{
								CaCertDataSourceInline: caCertDataSourceInline,
							}
						}
						var caCertDataSourceInlineString *shared.CaCertDataSourceInlineString
						if backendsItem2.Conf.ACMCertificateAuthorityConfig.CaCert.DataSourceInlineString != nil {
							inlineString8 := new(string)
							if !backendsItem2.Conf.ACMCertificateAuthorityConfig.CaCert.DataSourceInlineString.InlineString.IsUnknown() && !backendsItem2.Conf.ACMCertificateAuthorityConfig.CaCert.DataSourceInlineString.InlineString.IsNull() {
								*inlineString8 = backendsItem2.Conf.ACMCertificateAuthorityConfig.CaCert.DataSourceInlineString.InlineString.ValueString()
							} else {
								inlineString8 = nil
							}
							caCertDataSourceInlineString = &shared.CaCertDataSourceInlineString{
								InlineString: inlineString8,
							}
						}
						if caCertDataSourceInlineString != nil {
							caCert2 = &shared.ConfCaCert{
								CaCertDataSourceInlineString: caCertDataSourceInlineString,
							}
						}
						var caCertDataSourceSecret *shared.CaCertDataSourceSecret
						if backendsItem2.Conf.ACMCertificateAuthorityConfig.CaCert.DataSourceSecret != nil {
							secret8 := new(string)
							if !backendsItem2.Conf.ACMCertificateAuthorityConfig.CaCert.DataSourceSecret.Secret.IsUnknown() && !backendsItem2.Conf.ACMCertificateAuthorityConfig.CaCert.DataSourceSecret.Secret.IsNull() {
								*secret8 = backendsItem2.Conf.ACMCertificateAuthorityConfig.CaCert.DataSourceSecret.Secret.ValueString()
							} else {
								secret8 = nil
							}
							caCertDataSourceSecret = &shared.CaCertDataSourceSecret{
								Secret: secret8,
							}
						}
						if caCertDataSourceSecret != nil {
							caCert2 = &shared.ConfCaCert{
								CaCertDataSourceSecret: caCertDataSourceSecret,
							}
						}
					}
					commonName1 := new(string)
					if !backendsItem2.Conf.ACMCertificateAuthorityConfig.CommonName.IsUnknown() && !backendsItem2.Conf.ACMCertificateAuthorityConfig.CommonName.IsNull() {
						*commonName1 = backendsItem2.Conf.ACMCertificateAuthorityConfig.CommonName.ValueString()
					} else {
						commonName1 = nil
					}
					acmCertificateAuthorityConfig = &shared.ACMCertificateAuthorityConfig{
						Arn:        arn,
						Auth:       auth1,
						CaCert:     caCert2,
						CommonName: commonName1,
					}
				}
				if acmCertificateAuthorityConfig != nil {
					conf2 = &shared.MeshItemMtlsConf{
						ACMCertificateAuthorityConfig: acmCertificateAuthorityConfig,
					}
				}
				var certManagerCertificateAuthorityConfig *shared.CertManagerCertificateAuthorityConfig
				if backendsItem2.Conf.CertManagerCertificateAuthorityConfig != nil {
					var caCert3 *shared.CertManagerCertificateAuthorityConfigConfCaCert
					if backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CaCert != nil {
						var certManagerCertificateAuthorityConfigCaCertDataSourceFile *shared.CertManagerCertificateAuthorityConfigCaCertDataSourceFile
						if backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CaCert.DataSourceFile != nil {
							file9 := new(string)
							if !backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CaCert.DataSourceFile.File.IsUnknown() && !backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CaCert.DataSourceFile.File.IsNull() {
								*file9 = backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CaCert.DataSourceFile.File.ValueString()
							} else {
								file9 = nil
							}
							certManagerCertificateAuthorityConfigCaCertDataSourceFile = &shared.CertManagerCertificateAuthorityConfigCaCertDataSourceFile{
								File: file9,
							}
						}
						if certManagerCertificateAuthorityConfigCaCertDataSourceFile != nil {
							caCert3 = &shared.CertManagerCertificateAuthorityConfigConfCaCert{
								CertManagerCertificateAuthorityConfigCaCertDataSourceFile: certManagerCertificateAuthorityConfigCaCertDataSourceFile,
							}
						}
						var certManagerCertificateAuthorityConfigCaCertDataSourceInline *shared.CertManagerCertificateAuthorityConfigCaCertDataSourceInline
						if backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CaCert.DataSourceInline != nil {
							inline9 := new(string)
							if !backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CaCert.DataSourceInline.Inline.IsUnknown() && !backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CaCert.DataSourceInline.Inline.IsNull() {
								*inline9 = backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CaCert.DataSourceInline.Inline.ValueString()
							} else {
								inline9 = nil
							}
							certManagerCertificateAuthorityConfigCaCertDataSourceInline = &shared.CertManagerCertificateAuthorityConfigCaCertDataSourceInline{
								Inline: inline9,
							}
						}
						if certManagerCertificateAuthorityConfigCaCertDataSourceInline != nil {
							caCert3 = &shared.CertManagerCertificateAuthorityConfigConfCaCert{
								CertManagerCertificateAuthorityConfigCaCertDataSourceInline: certManagerCertificateAuthorityConfigCaCertDataSourceInline,
							}
						}
						var certManagerCertificateAuthorityConfigCaCertDataSourceInlineString *shared.CertManagerCertificateAuthorityConfigCaCertDataSourceInlineString
						if backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CaCert.DataSourceInlineString != nil {
							inlineString9 := new(string)
							if !backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CaCert.DataSourceInlineString.InlineString.IsUnknown() && !backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CaCert.DataSourceInlineString.InlineString.IsNull() {
								*inlineString9 = backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CaCert.DataSourceInlineString.InlineString.ValueString()
							} else {
								inlineString9 = nil
							}
							certManagerCertificateAuthorityConfigCaCertDataSourceInlineString = &shared.CertManagerCertificateAuthorityConfigCaCertDataSourceInlineString{
								InlineString: inlineString9,
							}
						}
						if certManagerCertificateAuthorityConfigCaCertDataSourceInlineString != nil {
							caCert3 = &shared.CertManagerCertificateAuthorityConfigConfCaCert{
								CertManagerCertificateAuthorityConfigCaCertDataSourceInlineString: certManagerCertificateAuthorityConfigCaCertDataSourceInlineString,
							}
						}
						var certManagerCertificateAuthorityConfigCaCertDataSourceSecret *shared.CertManagerCertificateAuthorityConfigCaCertDataSourceSecret
						if backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CaCert.DataSourceSecret != nil {
							secret9 := new(string)
							if !backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CaCert.DataSourceSecret.Secret.IsUnknown() && !backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CaCert.DataSourceSecret.Secret.IsNull() {
								*secret9 = backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CaCert.DataSourceSecret.Secret.ValueString()
							} else {
								secret9 = nil
							}
							certManagerCertificateAuthorityConfigCaCertDataSourceSecret = &shared.CertManagerCertificateAuthorityConfigCaCertDataSourceSecret{
								Secret: secret9,
							}
						}
						if certManagerCertificateAuthorityConfigCaCertDataSourceSecret != nil {
							caCert3 = &shared.CertManagerCertificateAuthorityConfigConfCaCert{
								CertManagerCertificateAuthorityConfigCaCertDataSourceSecret: certManagerCertificateAuthorityConfigCaCertDataSourceSecret,
							}
						}
					}
					commonName2 := new(string)
					if !backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CommonName.IsUnknown() && !backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CommonName.IsNull() {
						*commonName2 = backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CommonName.ValueString()
					} else {
						commonName2 = nil
					}
					dnsNames := make([]string, 0, len(backendsItem2.Conf.CertManagerCertificateAuthorityConfig.DNSNames))
					for _, dnsNamesItem := range backendsItem2.Conf.CertManagerCertificateAuthorityConfig.DNSNames {
						dnsNames = append(dnsNames, dnsNamesItem.ValueString())
					}
					var issuerRef *shared.IssuerRef
					if backendsItem2.Conf.CertManagerCertificateAuthorityConfig.IssuerRef != nil {
						group := new(string)
						if !backendsItem2.Conf.CertManagerCertificateAuthorityConfig.IssuerRef.Group.IsUnknown() && !backendsItem2.Conf.CertManagerCertificateAuthorityConfig.IssuerRef.Group.IsNull() {
							*group = backendsItem2.Conf.CertManagerCertificateAuthorityConfig.IssuerRef.Group.ValueString()
						} else {
							group = nil
						}
						kind := new(string)
						if !backendsItem2.Conf.CertManagerCertificateAuthorityConfig.IssuerRef.Kind.IsUnknown() && !backendsItem2.Conf.CertManagerCertificateAuthorityConfig.IssuerRef.Kind.IsNull() {
							*kind = backendsItem2.Conf.CertManagerCertificateAuthorityConfig.IssuerRef.Kind.ValueString()
						} else {
							kind = nil
						}
						name3 := new(string)
						if !backendsItem2.Conf.CertManagerCertificateAuthorityConfig.IssuerRef.Name.IsUnknown() && !backendsItem2.Conf.CertManagerCertificateAuthorityConfig.IssuerRef.Name.IsNull() {
							*name3 = backendsItem2.Conf.CertManagerCertificateAuthorityConfig.IssuerRef.Name.ValueString()
						} else {
							name3 = nil
						}
						issuerRef = &shared.IssuerRef{
							Group: group,
							Kind:  kind,
							Name:  name3,
						}
					}
					certManagerCertificateAuthorityConfig = &shared.CertManagerCertificateAuthorityConfig{
						CaCert:     caCert3,
						CommonName: commonName2,
						DNSNames:   dnsNames,
						IssuerRef:  issuerRef,
					}
				}
				if certManagerCertificateAuthorityConfig != nil {
					conf2 = &shared.MeshItemMtlsConf{
						CertManagerCertificateAuthorityConfig: certManagerCertificateAuthorityConfig,
					}
				}
			}
			var dpCert *shared.DpCert
			if backendsItem2.DpCert != nil {
				var requestTimeout *shared.RequestTimeout
				if backendsItem2.DpCert.RequestTimeout != nil {
					nanos := new(int64)
					if !backendsItem2.DpCert.RequestTimeout.Nanos.IsUnknown() && !backendsItem2.DpCert.RequestTimeout.Nanos.IsNull() {
						*nanos = backendsItem2.DpCert.RequestTimeout.Nanos.ValueInt64()
					} else {
						nanos = nil
					}
					seconds := new(int64)
					if !backendsItem2.DpCert.RequestTimeout.Seconds.IsUnknown() && !backendsItem2.DpCert.RequestTimeout.Seconds.IsNull() {
						*seconds = backendsItem2.DpCert.RequestTimeout.Seconds.ValueInt64()
					} else {
						seconds = nil
					}
					requestTimeout = &shared.RequestTimeout{
						Nanos:   nanos,
						Seconds: seconds,
					}
				}
				var rotation *shared.Rotation
				if backendsItem2.DpCert.Rotation != nil {
					expiration1 := new(string)
					if !backendsItem2.DpCert.Rotation.Expiration.IsUnknown() && !backendsItem2.DpCert.Rotation.Expiration.IsNull() {
						*expiration1 = backendsItem2.DpCert.Rotation.Expiration.ValueString()
					} else {
						expiration1 = nil
					}
					rotation = &shared.Rotation{
						Expiration: expiration1,
					}
				}
				dpCert = &shared.DpCert{
					RequestTimeout: requestTimeout,
					Rotation:       rotation,
				}
			}
			var mode2 *shared.MeshItemMode
			if backendsItem2.Mode != nil {
				str3 := new(string)
				if !backendsItem2.Mode.Str.IsUnknown() && !backendsItem2.Mode.Str.IsNull() {
					*str3 = backendsItem2.Mode.Str.ValueString()
				} else {
					str3 = nil
				}
				if str3 != nil {
					mode2 = &shared.MeshItemMode{
						Str: str3,
					}
				}
				integer3 := new(int64)
				if !backendsItem2.Mode.Integer.IsUnknown() && !backendsItem2.Mode.Integer.IsNull() {
					*integer3 = backendsItem2.Mode.Integer.ValueInt64()
				} else {
					integer3 = nil
				}
				if integer3 != nil {
					mode2 = &shared.MeshItemMode{
						Integer: integer3,
					}
				}
			}
			name4 := new(string)
			if !backendsItem2.Name.IsUnknown() && !backendsItem2.Name.IsNull() {
				*name4 = backendsItem2.Name.ValueString()
			} else {
				name4 = nil
			}
			var rootChain *shared.RootChain
			if backendsItem2.RootChain != nil {
				var requestTimeout1 *shared.MeshItemRequestTimeout
				if backendsItem2.RootChain.RequestTimeout != nil {
					nanos1 := new(int64)
					if !backendsItem2.RootChain.RequestTimeout.Nanos.IsUnknown() && !backendsItem2.RootChain.RequestTimeout.Nanos.IsNull() {
						*nanos1 = backendsItem2.RootChain.RequestTimeout.Nanos.ValueInt64()
					} else {
						nanos1 = nil
					}
					seconds1 := new(int64)
					if !backendsItem2.RootChain.RequestTimeout.Seconds.IsUnknown() && !backendsItem2.RootChain.RequestTimeout.Seconds.IsNull() {
						*seconds1 = backendsItem2.RootChain.RequestTimeout.Seconds.ValueInt64()
					} else {
						seconds1 = nil
					}
					requestTimeout1 = &shared.MeshItemRequestTimeout{
						Nanos:   nanos1,
						Seconds: seconds1,
					}
				}
				rootChain = &shared.RootChain{
					RequestTimeout: requestTimeout1,
				}
			}
			type2 := new(string)
			if !backendsItem2.Type.IsUnknown() && !backendsItem2.Type.IsNull() {
				*type2 = backendsItem2.Type.ValueString()
			} else {
				type2 = nil
			}
			backends2 = append(backends2, shared.MeshItemMtlsBackends{
				Conf:      conf2,
				DpCert:    dpCert,
				Mode:      mode2,
				Name:      name4,
				RootChain: rootChain,
				Type:      type2,
			})
		}
		enabledBackend1 := new(string)
		if !r.Mtls.EnabledBackend.IsUnknown() && !r.Mtls.EnabledBackend.IsNull() {
			*enabledBackend1 = r.Mtls.EnabledBackend.ValueString()
		} else {
			enabledBackend1 = nil
		}
		skipValidation := new(bool)
		if !r.Mtls.SkipValidation.IsUnknown() && !r.Mtls.SkipValidation.IsNull() {
			*skipValidation = r.Mtls.SkipValidation.ValueBool()
		} else {
			skipValidation = nil
		}
		mtls = &shared.Mtls{
			Backends:       backends2,
			EnabledBackend: enabledBackend1,
			SkipValidation: skipValidation,
		}
	}
	var name5 string
	name5 = r.Name.ValueString()

	var networking *shared.Networking
	if r.Networking != nil {
		var outbound *shared.Outbound
		if r.Networking.Outbound != nil {
			passthrough := new(bool)
			if !r.Networking.Outbound.Passthrough.IsUnknown() && !r.Networking.Outbound.Passthrough.IsNull() {
				*passthrough = r.Networking.Outbound.Passthrough.ValueBool()
			} else {
				passthrough = nil
			}
			outbound = &shared.Outbound{
				Passthrough: passthrough,
			}
		}
		networking = &shared.Networking{
			Outbound: outbound,
		}
	}
	var routing *shared.Routing
	if r.Routing != nil {
		defaultForbidMeshExternalServiceAccess := new(bool)
		if !r.Routing.DefaultForbidMeshExternalServiceAccess.IsUnknown() && !r.Routing.DefaultForbidMeshExternalServiceAccess.IsNull() {
			*defaultForbidMeshExternalServiceAccess = r.Routing.DefaultForbidMeshExternalServiceAccess.ValueBool()
		} else {
			defaultForbidMeshExternalServiceAccess = nil
		}
		localityAwareLoadBalancing := new(bool)
		if !r.Routing.LocalityAwareLoadBalancing.IsUnknown() && !r.Routing.LocalityAwareLoadBalancing.IsNull() {
			*localityAwareLoadBalancing = r.Routing.LocalityAwareLoadBalancing.ValueBool()
		} else {
			localityAwareLoadBalancing = nil
		}
		zoneEgress := new(bool)
		if !r.Routing.ZoneEgress.IsUnknown() && !r.Routing.ZoneEgress.IsNull() {
			*zoneEgress = r.Routing.ZoneEgress.ValueBool()
		} else {
			zoneEgress = nil
		}
		routing = &shared.Routing{
			DefaultForbidMeshExternalServiceAccess: defaultForbidMeshExternalServiceAccess,
			LocalityAwareLoadBalancing:             localityAwareLoadBalancing,
			ZoneEgress:                             zoneEgress,
		}
	}
	skipCreatingInitialPolicies := make([]string, 0, len(r.SkipCreatingInitialPolicies))
	for _, skipCreatingInitialPoliciesItem := range r.SkipCreatingInitialPolicies {
		skipCreatingInitialPolicies = append(skipCreatingInitialPolicies, skipCreatingInitialPoliciesItem.ValueString())
	}
	var tracing *shared.Tracing
	if r.Tracing != nil {
		backends3 := make([]shared.MeshItemTracingBackends, 0, len(r.Tracing.Backends))
		for _, backendsItem3 := range r.Tracing.Backends {
			var conf3 *shared.MeshItemTracingConf
			if backendsItem3.Conf != nil {
				var datadogTracingBackendConfig *shared.DatadogTracingBackendConfig
				if backendsItem3.Conf.DatadogTracingBackendConfig != nil {
					address3 := new(string)
					if !backendsItem3.Conf.DatadogTracingBackendConfig.Address.IsUnknown() && !backendsItem3.Conf.DatadogTracingBackendConfig.Address.IsNull() {
						*address3 = backendsItem3.Conf.DatadogTracingBackendConfig.Address.ValueString()
					} else {
						address3 = nil
					}
					port2 := new(int64)
					if !backendsItem3.Conf.DatadogTracingBackendConfig.Port.IsUnknown() && !backendsItem3.Conf.DatadogTracingBackendConfig.Port.IsNull() {
						*port2 = backendsItem3.Conf.DatadogTracingBackendConfig.Port.ValueInt64()
					} else {
						port2 = nil
					}
					splitService := new(bool)
					if !backendsItem3.Conf.DatadogTracingBackendConfig.SplitService.IsUnknown() && !backendsItem3.Conf.DatadogTracingBackendConfig.SplitService.IsNull() {
						*splitService = backendsItem3.Conf.DatadogTracingBackendConfig.SplitService.ValueBool()
					} else {
						splitService = nil
					}
					datadogTracingBackendConfig = &shared.DatadogTracingBackendConfig{
						Address:      address3,
						Port:         port2,
						SplitService: splitService,
					}
				}
				if datadogTracingBackendConfig != nil {
					conf3 = &shared.MeshItemTracingConf{
						DatadogTracingBackendConfig: datadogTracingBackendConfig,
					}
				}
				var zipkinTracingBackendConfig *shared.ZipkinTracingBackendConfig
				if backendsItem3.Conf.ZipkinTracingBackendConfig != nil {
					apiVersion := new(string)
					if !backendsItem3.Conf.ZipkinTracingBackendConfig.APIVersion.IsUnknown() && !backendsItem3.Conf.ZipkinTracingBackendConfig.APIVersion.IsNull() {
						*apiVersion = backendsItem3.Conf.ZipkinTracingBackendConfig.APIVersion.ValueString()
					} else {
						apiVersion = nil
					}
					sharedSpanContext := new(bool)
					if !backendsItem3.Conf.ZipkinTracingBackendConfig.SharedSpanContext.IsUnknown() && !backendsItem3.Conf.ZipkinTracingBackendConfig.SharedSpanContext.IsNull() {
						*sharedSpanContext = backendsItem3.Conf.ZipkinTracingBackendConfig.SharedSpanContext.ValueBool()
					} else {
						sharedSpanContext = nil
					}
					traceId128bit := new(bool)
					if !backendsItem3.Conf.ZipkinTracingBackendConfig.TraceId128bit.IsUnknown() && !backendsItem3.Conf.ZipkinTracingBackendConfig.TraceId128bit.IsNull() {
						*traceId128bit = backendsItem3.Conf.ZipkinTracingBackendConfig.TraceId128bit.ValueBool()
					} else {
						traceId128bit = nil
					}
					url := new(string)
					if !backendsItem3.Conf.ZipkinTracingBackendConfig.URL.IsUnknown() && !backendsItem3.Conf.ZipkinTracingBackendConfig.URL.IsNull() {
						*url = backendsItem3.Conf.ZipkinTracingBackendConfig.URL.ValueString()
					} else {
						url = nil
					}
					zipkinTracingBackendConfig = &shared.ZipkinTracingBackendConfig{
						APIVersion:        apiVersion,
						SharedSpanContext: sharedSpanContext,
						TraceId128bit:     traceId128bit,
						URL:               url,
					}
				}
				if zipkinTracingBackendConfig != nil {
					conf3 = &shared.MeshItemTracingConf{
						ZipkinTracingBackendConfig: zipkinTracingBackendConfig,
					}
				}
			}
			name6 := new(string)
			if !backendsItem3.Name.IsUnknown() && !backendsItem3.Name.IsNull() {
				*name6 = backendsItem3.Name.ValueString()
			} else {
				name6 = nil
			}
			sampling := new(float64)
			if !backendsItem3.Sampling.IsUnknown() && !backendsItem3.Sampling.IsNull() {
				*sampling = backendsItem3.Sampling.ValueFloat64()
			} else {
				sampling = nil
			}
			type3 := new(string)
			if !backendsItem3.Type.IsUnknown() && !backendsItem3.Type.IsNull() {
				*type3 = backendsItem3.Type.ValueString()
			} else {
				type3 = nil
			}
			backends3 = append(backends3, shared.MeshItemTracingBackends{
				Conf:     conf3,
				Name:     name6,
				Sampling: sampling,
				Type:     type3,
			})
		}
		defaultBackend1 := new(string)
		if !r.Tracing.DefaultBackend.IsUnknown() && !r.Tracing.DefaultBackend.IsNull() {
			*defaultBackend1 = r.Tracing.DefaultBackend.ValueString()
		} else {
			defaultBackend1 = nil
		}
		tracing = &shared.Tracing{
			Backends:       backends3,
			DefaultBackend: defaultBackend1,
		}
	}
	var typeVar2 string
	typeVar2 = r.Type.ValueString()

	out := shared.MeshItem{
		Constraints:                 constraints,
		Labels:                      labels,
		Logging:                     logging,
		MeshServices:                meshServices,
		Metrics:                     metrics,
		Mtls:                        mtls,
		Name:                        name5,
		Networking:                  networking,
		Routing:                     routing,
		SkipCreatingInitialPolicies: skipCreatingInitialPolicies,
		Tracing:                     tracing,
		Type:                        typeVar2,
	}

	return &out, diags
}
