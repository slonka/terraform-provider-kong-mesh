// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/Kong/shared-speakeasy/customtypes/kumalabels"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-kong-mesh/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-kong-mesh/internal/provider/types"
	"github.com/kong/terraform-provider-kong-mesh/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-kong-mesh/internal/sdk/models/shared"
)

func (r *MeshTLSResourceModel) RefreshFromSharedMeshTLSCreateOrUpdateSuccessResponse(ctx context.Context, resp *shared.MeshTLSCreateOrUpdateSuccessResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Warnings = make([]types.String, 0, len(resp.Warnings))
		for _, v := range resp.Warnings {
			r.Warnings = append(r.Warnings, types.StringValue(v))
		}
	}

	return diags
}

func (r *MeshTLSResourceModel) RefreshFromSharedMeshTLSItem(ctx context.Context, resp *shared.MeshTLSItem) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreationTime))
		labelsValue, labelsDiags := types.MapValueFrom(ctx, types.StringType, resp.Labels)
		diags.Append(labelsDiags...)
		labelsValuable, labelsDiags := kumalabels.KumaLabelsMapType{MapType: types.MapType{ElemType: types.StringType}}.ValueFromMap(ctx, labelsValue)
		diags.Append(labelsDiags...)
		r.Labels, _ = labelsValuable.(kumalabels.KumaLabelsMapValue)
		r.Mesh = types.StringPointerValue(resp.Mesh)
		r.ModificationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.ModificationTime))
		r.Name = types.StringValue(resp.Name)
		r.Spec.From = []tfTypes.MeshTLSItemFrom{}

		for _, fromItem := range resp.Spec.From {
			var from tfTypes.MeshTLSItemFrom

			if fromItem.Default == nil {
				from.Default = nil
			} else {
				from.Default = &tfTypes.MeshTLSItemDefault{}
				if fromItem.Default.Mode != nil {
					from.Default.Mode = types.StringValue(string(*fromItem.Default.Mode))
				} else {
					from.Default.Mode = types.StringNull()
				}
				from.Default.TLSCiphers = make([]types.String, 0, len(fromItem.Default.TLSCiphers))
				for _, v := range fromItem.Default.TLSCiphers {
					from.Default.TLSCiphers = append(from.Default.TLSCiphers, types.StringValue(string(v)))
				}
				if fromItem.Default.TLSVersion == nil {
					from.Default.TLSVersion = nil
				} else {
					from.Default.TLSVersion = &tfTypes.Version{}
					if fromItem.Default.TLSVersion.Max != nil {
						from.Default.TLSVersion.Max = types.StringValue(string(*fromItem.Default.TLSVersion.Max))
					} else {
						from.Default.TLSVersion.Max = types.StringNull()
					}
					if fromItem.Default.TLSVersion.Min != nil {
						from.Default.TLSVersion.Min = types.StringValue(string(*fromItem.Default.TLSVersion.Min))
					} else {
						from.Default.TLSVersion.Min = types.StringNull()
					}
				}
			}
			from.TargetRef.Kind = types.StringValue(string(fromItem.TargetRef.Kind))
			if len(fromItem.TargetRef.Labels) > 0 {
				from.TargetRef.Labels = make(map[string]types.String, len(fromItem.TargetRef.Labels))
				for key, value := range fromItem.TargetRef.Labels {
					from.TargetRef.Labels[key] = types.StringValue(value)
				}
			}
			from.TargetRef.Mesh = types.StringPointerValue(fromItem.TargetRef.Mesh)
			from.TargetRef.Name = types.StringPointerValue(fromItem.TargetRef.Name)
			from.TargetRef.Namespace = types.StringPointerValue(fromItem.TargetRef.Namespace)
			from.TargetRef.ProxyTypes = make([]types.String, 0, len(fromItem.TargetRef.ProxyTypes))
			for _, v := range fromItem.TargetRef.ProxyTypes {
				from.TargetRef.ProxyTypes = append(from.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			from.TargetRef.SectionName = types.StringPointerValue(fromItem.TargetRef.SectionName)
			if len(fromItem.TargetRef.Tags) > 0 {
				from.TargetRef.Tags = make(map[string]types.String, len(fromItem.TargetRef.Tags))
				for key1, value1 := range fromItem.TargetRef.Tags {
					from.TargetRef.Tags[key1] = types.StringValue(value1)
				}
			}

			r.Spec.From = append(r.Spec.From, from)
		}
		r.Spec.Rules = []tfTypes.MeshTLSItemRules{}

		for _, rulesItem := range resp.Spec.Rules {
			var rules tfTypes.MeshTLSItemRules

			if rulesItem.Default == nil {
				rules.Default = nil
			} else {
				rules.Default = &tfTypes.MeshTLSItemDefault{}
				if rulesItem.Default.Mode != nil {
					rules.Default.Mode = types.StringValue(string(*rulesItem.Default.Mode))
				} else {
					rules.Default.Mode = types.StringNull()
				}
				rules.Default.TLSCiphers = make([]types.String, 0, len(rulesItem.Default.TLSCiphers))
				for _, v := range rulesItem.Default.TLSCiphers {
					rules.Default.TLSCiphers = append(rules.Default.TLSCiphers, types.StringValue(string(v)))
				}
				if rulesItem.Default.TLSVersion == nil {
					rules.Default.TLSVersion = nil
				} else {
					rules.Default.TLSVersion = &tfTypes.Version{}
					if rulesItem.Default.TLSVersion.Max != nil {
						rules.Default.TLSVersion.Max = types.StringValue(string(*rulesItem.Default.TLSVersion.Max))
					} else {
						rules.Default.TLSVersion.Max = types.StringNull()
					}
					if rulesItem.Default.TLSVersion.Min != nil {
						rules.Default.TLSVersion.Min = types.StringValue(string(*rulesItem.Default.TLSVersion.Min))
					} else {
						rules.Default.TLSVersion.Min = types.StringNull()
					}
				}
			}

			r.Spec.Rules = append(r.Spec.Rules, rules)
		}
		if resp.Spec.TargetRef == nil {
			r.Spec.TargetRef = nil
		} else {
			r.Spec.TargetRef = &tfTypes.MeshAccessLogItemTargetRef{}
			r.Spec.TargetRef.Kind = types.StringValue(string(resp.Spec.TargetRef.Kind))
			if len(resp.Spec.TargetRef.Labels) > 0 {
				r.Spec.TargetRef.Labels = make(map[string]types.String, len(resp.Spec.TargetRef.Labels))
				for key2, value2 := range resp.Spec.TargetRef.Labels {
					r.Spec.TargetRef.Labels[key2] = types.StringValue(value2)
				}
			}
			r.Spec.TargetRef.Mesh = types.StringPointerValue(resp.Spec.TargetRef.Mesh)
			r.Spec.TargetRef.Name = types.StringPointerValue(resp.Spec.TargetRef.Name)
			r.Spec.TargetRef.Namespace = types.StringPointerValue(resp.Spec.TargetRef.Namespace)
			r.Spec.TargetRef.ProxyTypes = make([]types.String, 0, len(resp.Spec.TargetRef.ProxyTypes))
			for _, v := range resp.Spec.TargetRef.ProxyTypes {
				r.Spec.TargetRef.ProxyTypes = append(r.Spec.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			r.Spec.TargetRef.SectionName = types.StringPointerValue(resp.Spec.TargetRef.SectionName)
			if len(resp.Spec.TargetRef.Tags) > 0 {
				r.Spec.TargetRef.Tags = make(map[string]types.String, len(resp.Spec.TargetRef.Tags))
				for key3, value3 := range resp.Spec.TargetRef.Tags {
					r.Spec.TargetRef.Tags[key3] = types.StringValue(value3)
				}
			}
		}
		r.Type = types.StringValue(string(resp.Type))
	}

	return diags
}

func (r *MeshTLSResourceModel) ToOperationsDeleteMeshTLSRequest(ctx context.Context) (*operations.DeleteMeshTLSRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var mesh string
	mesh = r.Mesh.ValueString()

	var name string
	name = r.Name.ValueString()

	out := operations.DeleteMeshTLSRequest{
		Mesh: mesh,
		Name: name,
	}

	return &out, diags
}

func (r *MeshTLSResourceModel) ToOperationsGetMeshTLSRequest(ctx context.Context) (*operations.GetMeshTLSRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var mesh string
	mesh = r.Mesh.ValueString()

	var name string
	name = r.Name.ValueString()

	out := operations.GetMeshTLSRequest{
		Mesh: mesh,
		Name: name,
	}

	return &out, diags
}

func (r *MeshTLSResourceModel) ToOperationsPutMeshTLSRequest(ctx context.Context) (*operations.PutMeshTLSRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var mesh string
	mesh = r.Mesh.ValueString()

	var name string
	name = r.Name.ValueString()

	meshTLSItem, meshTLSItemDiags := r.ToSharedMeshTLSItemInput(ctx)
	diags.Append(meshTLSItemDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PutMeshTLSRequest{
		Mesh:        mesh,
		Name:        name,
		MeshTLSItem: *meshTLSItem,
	}

	return &out, diags
}

func (r *MeshTLSResourceModel) ToSharedMeshTLSItemInput(ctx context.Context) (*shared.MeshTLSItemInput, diag.Diagnostics) {
	var diags diag.Diagnostics

	typeVar := shared.MeshTLSItemType(r.Type.ValueString())
	mesh := new(string)
	if !r.Mesh.IsUnknown() && !r.Mesh.IsNull() {
		*mesh = r.Mesh.ValueString()
	} else {
		mesh = nil
	}
	var name string
	name = r.Name.ValueString()

	var labels map[string]string
	if !r.Labels.IsUnknown() && !r.Labels.IsNull() {
		diags.Append(r.Labels.ElementsAs(ctx, &labels, true)...)
	}
	from := make([]shared.MeshTLSItemFrom, 0, len(r.Spec.From))
	for _, fromItem := range r.Spec.From {
		var defaultVar *shared.MeshTLSItemDefault
		if fromItem.Default != nil {
			mode := new(shared.MeshTLSItemSpecMode)
			if !fromItem.Default.Mode.IsUnknown() && !fromItem.Default.Mode.IsNull() {
				*mode = shared.MeshTLSItemSpecMode(fromItem.Default.Mode.ValueString())
			} else {
				mode = nil
			}
			tlsCiphers := make([]shared.TLSCiphers, 0, len(fromItem.Default.TLSCiphers))
			for _, tlsCiphersItem := range fromItem.Default.TLSCiphers {
				tlsCiphers = append(tlsCiphers, shared.TLSCiphers(tlsCiphersItem.ValueString()))
			}
			var tlsVersion *shared.TLSVersion
			if fromItem.Default.TLSVersion != nil {
				max := new(shared.MeshTLSItemSpecMax)
				if !fromItem.Default.TLSVersion.Max.IsUnknown() && !fromItem.Default.TLSVersion.Max.IsNull() {
					*max = shared.MeshTLSItemSpecMax(fromItem.Default.TLSVersion.Max.ValueString())
				} else {
					max = nil
				}
				min := new(shared.MeshTLSItemSpecMin)
				if !fromItem.Default.TLSVersion.Min.IsUnknown() && !fromItem.Default.TLSVersion.Min.IsNull() {
					*min = shared.MeshTLSItemSpecMin(fromItem.Default.TLSVersion.Min.ValueString())
				} else {
					min = nil
				}
				tlsVersion = &shared.TLSVersion{
					Max: max,
					Min: min,
				}
			}
			defaultVar = &shared.MeshTLSItemDefault{
				Mode:       mode,
				TLSCiphers: tlsCiphers,
				TLSVersion: tlsVersion,
			}
		}
		kind := shared.MeshTLSItemSpecKind(fromItem.TargetRef.Kind.ValueString())
		labels1 := make(map[string]string)
		for labelsKey, labelsValue := range fromItem.TargetRef.Labels {
			var labelsInst string
			labelsInst = labelsValue.ValueString()

			labels1[labelsKey] = labelsInst
		}
		mesh1 := new(string)
		if !fromItem.TargetRef.Mesh.IsUnknown() && !fromItem.TargetRef.Mesh.IsNull() {
			*mesh1 = fromItem.TargetRef.Mesh.ValueString()
		} else {
			mesh1 = nil
		}
		name1 := new(string)
		if !fromItem.TargetRef.Name.IsUnknown() && !fromItem.TargetRef.Name.IsNull() {
			*name1 = fromItem.TargetRef.Name.ValueString()
		} else {
			name1 = nil
		}
		namespace := new(string)
		if !fromItem.TargetRef.Namespace.IsUnknown() && !fromItem.TargetRef.Namespace.IsNull() {
			*namespace = fromItem.TargetRef.Namespace.ValueString()
		} else {
			namespace = nil
		}
		proxyTypes := make([]shared.MeshTLSItemSpecProxyTypes, 0, len(fromItem.TargetRef.ProxyTypes))
		for _, proxyTypesItem := range fromItem.TargetRef.ProxyTypes {
			proxyTypes = append(proxyTypes, shared.MeshTLSItemSpecProxyTypes(proxyTypesItem.ValueString()))
		}
		sectionName := new(string)
		if !fromItem.TargetRef.SectionName.IsUnknown() && !fromItem.TargetRef.SectionName.IsNull() {
			*sectionName = fromItem.TargetRef.SectionName.ValueString()
		} else {
			sectionName = nil
		}
		tags := make(map[string]string)
		for tagsKey, tagsValue := range fromItem.TargetRef.Tags {
			var tagsInst string
			tagsInst = tagsValue.ValueString()

			tags[tagsKey] = tagsInst
		}
		targetRef := shared.MeshTLSItemSpecTargetRef{
			Kind:        kind,
			Labels:      labels1,
			Mesh:        mesh1,
			Name:        name1,
			Namespace:   namespace,
			ProxyTypes:  proxyTypes,
			SectionName: sectionName,
			Tags:        tags,
		}
		from = append(from, shared.MeshTLSItemFrom{
			Default:   defaultVar,
			TargetRef: targetRef,
		})
	}
	rules := make([]shared.MeshTLSItemRules, 0, len(r.Spec.Rules))
	for _, rulesItem := range r.Spec.Rules {
		var default1 *shared.MeshTLSItemSpecDefault
		if rulesItem.Default != nil {
			mode1 := new(shared.MeshTLSItemMode)
			if !rulesItem.Default.Mode.IsUnknown() && !rulesItem.Default.Mode.IsNull() {
				*mode1 = shared.MeshTLSItemMode(rulesItem.Default.Mode.ValueString())
			} else {
				mode1 = nil
			}
			tlsCiphers1 := make([]shared.MeshTLSItemTLSCiphers, 0, len(rulesItem.Default.TLSCiphers))
			for _, tlsCiphersItem1 := range rulesItem.Default.TLSCiphers {
				tlsCiphers1 = append(tlsCiphers1, shared.MeshTLSItemTLSCiphers(tlsCiphersItem1.ValueString()))
			}
			var tlsVersion1 *shared.MeshTLSItemTLSVersion
			if rulesItem.Default.TLSVersion != nil {
				max1 := new(shared.MeshTLSItemMax)
				if !rulesItem.Default.TLSVersion.Max.IsUnknown() && !rulesItem.Default.TLSVersion.Max.IsNull() {
					*max1 = shared.MeshTLSItemMax(rulesItem.Default.TLSVersion.Max.ValueString())
				} else {
					max1 = nil
				}
				min1 := new(shared.MeshTLSItemMin)
				if !rulesItem.Default.TLSVersion.Min.IsUnknown() && !rulesItem.Default.TLSVersion.Min.IsNull() {
					*min1 = shared.MeshTLSItemMin(rulesItem.Default.TLSVersion.Min.ValueString())
				} else {
					min1 = nil
				}
				tlsVersion1 = &shared.MeshTLSItemTLSVersion{
					Max: max1,
					Min: min1,
				}
			}
			default1 = &shared.MeshTLSItemSpecDefault{
				Mode:       mode1,
				TLSCiphers: tlsCiphers1,
				TLSVersion: tlsVersion1,
			}
		}
		rules = append(rules, shared.MeshTLSItemRules{
			Default: default1,
		})
	}
	var targetRef1 *shared.MeshTLSItemTargetRef
	if r.Spec.TargetRef != nil {
		kind1 := shared.MeshTLSItemKind(r.Spec.TargetRef.Kind.ValueString())
		labels2 := make(map[string]string)
		for labelsKey1, labelsValue1 := range r.Spec.TargetRef.Labels {
			var labelsInst1 string
			labelsInst1 = labelsValue1.ValueString()

			labels2[labelsKey1] = labelsInst1
		}
		mesh2 := new(string)
		if !r.Spec.TargetRef.Mesh.IsUnknown() && !r.Spec.TargetRef.Mesh.IsNull() {
			*mesh2 = r.Spec.TargetRef.Mesh.ValueString()
		} else {
			mesh2 = nil
		}
		name2 := new(string)
		if !r.Spec.TargetRef.Name.IsUnknown() && !r.Spec.TargetRef.Name.IsNull() {
			*name2 = r.Spec.TargetRef.Name.ValueString()
		} else {
			name2 = nil
		}
		namespace1 := new(string)
		if !r.Spec.TargetRef.Namespace.IsUnknown() && !r.Spec.TargetRef.Namespace.IsNull() {
			*namespace1 = r.Spec.TargetRef.Namespace.ValueString()
		} else {
			namespace1 = nil
		}
		proxyTypes1 := make([]shared.MeshTLSItemProxyTypes, 0, len(r.Spec.TargetRef.ProxyTypes))
		for _, proxyTypesItem1 := range r.Spec.TargetRef.ProxyTypes {
			proxyTypes1 = append(proxyTypes1, shared.MeshTLSItemProxyTypes(proxyTypesItem1.ValueString()))
		}
		sectionName1 := new(string)
		if !r.Spec.TargetRef.SectionName.IsUnknown() && !r.Spec.TargetRef.SectionName.IsNull() {
			*sectionName1 = r.Spec.TargetRef.SectionName.ValueString()
		} else {
			sectionName1 = nil
		}
		tags1 := make(map[string]string)
		for tagsKey1, tagsValue1 := range r.Spec.TargetRef.Tags {
			var tagsInst1 string
			tagsInst1 = tagsValue1.ValueString()

			tags1[tagsKey1] = tagsInst1
		}
		targetRef1 = &shared.MeshTLSItemTargetRef{
			Kind:        kind1,
			Labels:      labels2,
			Mesh:        mesh2,
			Name:        name2,
			Namespace:   namespace1,
			ProxyTypes:  proxyTypes1,
			SectionName: sectionName1,
			Tags:        tags1,
		}
	}
	spec := shared.MeshTLSItemSpec{
		From:      from,
		Rules:     rules,
		TargetRef: targetRef1,
	}
	out := shared.MeshTLSItemInput{
		Type:   typeVar,
		Mesh:   mesh,
		Name:   name,
		Labels: labels,
		Spec:   spec,
	}

	return &out, diags
}
