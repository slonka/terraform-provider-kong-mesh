// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/Kong/shared-speakeasy/customtypes/kumalabels"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-kong-mesh/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-kong-mesh/internal/provider/types"
	"github.com/kong/terraform-provider-kong-mesh/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-kong-mesh/internal/sdk/models/shared"
)

func (r *MeshAccessLogResourceModel) RefreshFromSharedMeshAccessLogCreateOrUpdateSuccessResponse(ctx context.Context, resp *shared.MeshAccessLogCreateOrUpdateSuccessResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Warnings = make([]types.String, 0, len(resp.Warnings))
		for _, v := range resp.Warnings {
			r.Warnings = append(r.Warnings, types.StringValue(v))
		}
	}

	return diags
}

func (r *MeshAccessLogResourceModel) RefreshFromSharedMeshAccessLogItem(ctx context.Context, resp *shared.MeshAccessLogItem) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreationTime))
		labelsValue, labelsDiags := types.MapValueFrom(ctx, types.StringType, resp.Labels)
		diags.Append(labelsDiags...)
		labelsValuable, labelsDiags := kumalabels.KumaLabelsMapType{MapType: types.MapType{ElemType: types.StringType}}.ValueFromMap(ctx, labelsValue)
		diags.Append(labelsDiags...)
		r.Labels, _ = labelsValuable.(kumalabels.KumaLabelsMapValue)
		r.Mesh = types.StringPointerValue(resp.Mesh)
		r.ModificationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.ModificationTime))
		r.Name = types.StringValue(resp.Name)
		r.Spec.From = []tfTypes.From{}

		for _, fromItem := range resp.Spec.From {
			var from tfTypes.From

			from.Default.Backends = []tfTypes.MeshAccessLogItemSpecFromBackends{}

			for _, backendsItem := range fromItem.Default.Backends {
				var backends tfTypes.MeshAccessLogItemSpecFromBackends

				if backendsItem.File == nil {
					backends.File = nil
				} else {
					backends.File = &tfTypes.File{}
					if backendsItem.File.Format == nil {
						backends.File.Format = nil
					} else {
						backends.File.Format = &tfTypes.Format{}
						backends.File.Format.JSON = []tfTypes.JSON{}

						for _, jsonVarItem := range backendsItem.File.Format.JSON {
							var jsonVar tfTypes.JSON

							jsonVar.Key = types.StringValue(jsonVarItem.Key)
							jsonVar.Value = types.StringValue(jsonVarItem.Value)

							backends.File.Format.JSON = append(backends.File.Format.JSON, jsonVar)
						}
						backends.File.Format.OmitEmptyValues = types.BoolPointerValue(backendsItem.File.Format.OmitEmptyValues)
						backends.File.Format.Plain = types.StringPointerValue(backendsItem.File.Format.Plain)
						backends.File.Format.Type = types.StringValue(string(backendsItem.File.Format.Type))
					}
					backends.File.Path = types.StringValue(backendsItem.File.Path)
				}
				if backendsItem.OpenTelemetry == nil {
					backends.OpenTelemetry = nil
				} else {
					backends.OpenTelemetry = &tfTypes.MeshAccessLogItemSpecFromOpenTelemetry{}
					backends.OpenTelemetry.Attributes = []tfTypes.JSON{}

					for _, attributesItem := range backendsItem.OpenTelemetry.Attributes {
						var attributes tfTypes.JSON

						attributes.Key = types.StringValue(attributesItem.Key)
						attributes.Value = types.StringValue(attributesItem.Value)

						backends.OpenTelemetry.Attributes = append(backends.OpenTelemetry.Attributes, attributes)
					}
					if backendsItem.OpenTelemetry.Body == nil {
						backends.OpenTelemetry.Body = jsontypes.NewNormalizedNull()
					} else {
						bodyResult, _ := json.Marshal(backendsItem.OpenTelemetry.Body)
						backends.OpenTelemetry.Body = jsontypes.NewNormalizedValue(string(bodyResult))
					}
					backends.OpenTelemetry.Endpoint = types.StringValue(backendsItem.OpenTelemetry.Endpoint)
				}
				if backendsItem.TCP == nil {
					backends.TCP = nil
				} else {
					backends.TCP = &tfTypes.MeshAccessLogItemSpecFromTCP{}
					backends.TCP.Address = types.StringValue(backendsItem.TCP.Address)
					if backendsItem.TCP.Format == nil {
						backends.TCP.Format = nil
					} else {
						backends.TCP.Format = &tfTypes.Format{}
						backends.TCP.Format.JSON = []tfTypes.JSON{}

						for _, jsonVarItem1 := range backendsItem.TCP.Format.JSON {
							var jsonVar1 tfTypes.JSON

							jsonVar1.Key = types.StringValue(jsonVarItem1.Key)
							jsonVar1.Value = types.StringValue(jsonVarItem1.Value)

							backends.TCP.Format.JSON = append(backends.TCP.Format.JSON, jsonVar1)
						}
						backends.TCP.Format.OmitEmptyValues = types.BoolPointerValue(backendsItem.TCP.Format.OmitEmptyValues)
						backends.TCP.Format.Plain = types.StringPointerValue(backendsItem.TCP.Format.Plain)
						backends.TCP.Format.Type = types.StringValue(string(backendsItem.TCP.Format.Type))
					}
				}
				backends.Type = types.StringValue(string(backendsItem.Type))

				from.Default.Backends = append(from.Default.Backends, backends)
			}
			from.TargetRef.Kind = types.StringValue(string(fromItem.TargetRef.Kind))
			if len(fromItem.TargetRef.Labels) > 0 {
				from.TargetRef.Labels = make(map[string]types.String, len(fromItem.TargetRef.Labels))
				for key, value := range fromItem.TargetRef.Labels {
					from.TargetRef.Labels[key] = types.StringValue(value)
				}
			}
			from.TargetRef.Mesh = types.StringPointerValue(fromItem.TargetRef.Mesh)
			from.TargetRef.Name = types.StringPointerValue(fromItem.TargetRef.Name)
			from.TargetRef.Namespace = types.StringPointerValue(fromItem.TargetRef.Namespace)
			from.TargetRef.ProxyTypes = make([]types.String, 0, len(fromItem.TargetRef.ProxyTypes))
			for _, v := range fromItem.TargetRef.ProxyTypes {
				from.TargetRef.ProxyTypes = append(from.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			from.TargetRef.SectionName = types.StringPointerValue(fromItem.TargetRef.SectionName)
			if len(fromItem.TargetRef.Tags) > 0 {
				from.TargetRef.Tags = make(map[string]types.String, len(fromItem.TargetRef.Tags))
				for key1, value1 := range fromItem.TargetRef.Tags {
					from.TargetRef.Tags[key1] = types.StringValue(value1)
				}
			}

			r.Spec.From = append(r.Spec.From, from)
		}
		r.Spec.Rules = []tfTypes.Rules{}

		for _, rulesItem := range resp.Spec.Rules {
			var rules tfTypes.Rules

			rules.Default.Backends = []tfTypes.MeshAccessLogItemSpecFromBackends{}

			for _, backendsItem1 := range rulesItem.Default.Backends {
				var backends1 tfTypes.MeshAccessLogItemSpecFromBackends

				if backendsItem1.File == nil {
					backends1.File = nil
				} else {
					backends1.File = &tfTypes.File{}
					if backendsItem1.File.Format == nil {
						backends1.File.Format = nil
					} else {
						backends1.File.Format = &tfTypes.Format{}
						backends1.File.Format.JSON = []tfTypes.JSON{}

						for _, jsonVarItem2 := range backendsItem1.File.Format.JSON {
							var jsonVar2 tfTypes.JSON

							jsonVar2.Key = types.StringValue(jsonVarItem2.Key)
							jsonVar2.Value = types.StringValue(jsonVarItem2.Value)

							backends1.File.Format.JSON = append(backends1.File.Format.JSON, jsonVar2)
						}
						backends1.File.Format.OmitEmptyValues = types.BoolPointerValue(backendsItem1.File.Format.OmitEmptyValues)
						backends1.File.Format.Plain = types.StringPointerValue(backendsItem1.File.Format.Plain)
						backends1.File.Format.Type = types.StringValue(string(backendsItem1.File.Format.Type))
					}
					backends1.File.Path = types.StringValue(backendsItem1.File.Path)
				}
				if backendsItem1.OpenTelemetry == nil {
					backends1.OpenTelemetry = nil
				} else {
					backends1.OpenTelemetry = &tfTypes.MeshAccessLogItemSpecFromOpenTelemetry{}
					backends1.OpenTelemetry.Attributes = []tfTypes.JSON{}

					for _, attributesItem1 := range backendsItem1.OpenTelemetry.Attributes {
						var attributes1 tfTypes.JSON

						attributes1.Key = types.StringValue(attributesItem1.Key)
						attributes1.Value = types.StringValue(attributesItem1.Value)

						backends1.OpenTelemetry.Attributes = append(backends1.OpenTelemetry.Attributes, attributes1)
					}
					if backendsItem1.OpenTelemetry.Body == nil {
						backends1.OpenTelemetry.Body = jsontypes.NewNormalizedNull()
					} else {
						bodyResult1, _ := json.Marshal(backendsItem1.OpenTelemetry.Body)
						backends1.OpenTelemetry.Body = jsontypes.NewNormalizedValue(string(bodyResult1))
					}
					backends1.OpenTelemetry.Endpoint = types.StringValue(backendsItem1.OpenTelemetry.Endpoint)
				}
				if backendsItem1.TCP == nil {
					backends1.TCP = nil
				} else {
					backends1.TCP = &tfTypes.MeshAccessLogItemSpecFromTCP{}
					backends1.TCP.Address = types.StringValue(backendsItem1.TCP.Address)
					if backendsItem1.TCP.Format == nil {
						backends1.TCP.Format = nil
					} else {
						backends1.TCP.Format = &tfTypes.Format{}
						backends1.TCP.Format.JSON = []tfTypes.JSON{}

						for _, jsonVarItem3 := range backendsItem1.TCP.Format.JSON {
							var jsonVar3 tfTypes.JSON

							jsonVar3.Key = types.StringValue(jsonVarItem3.Key)
							jsonVar3.Value = types.StringValue(jsonVarItem3.Value)

							backends1.TCP.Format.JSON = append(backends1.TCP.Format.JSON, jsonVar3)
						}
						backends1.TCP.Format.OmitEmptyValues = types.BoolPointerValue(backendsItem1.TCP.Format.OmitEmptyValues)
						backends1.TCP.Format.Plain = types.StringPointerValue(backendsItem1.TCP.Format.Plain)
						backends1.TCP.Format.Type = types.StringValue(string(backendsItem1.TCP.Format.Type))
					}
				}
				backends1.Type = types.StringValue(string(backendsItem1.Type))

				rules.Default.Backends = append(rules.Default.Backends, backends1)
			}

			r.Spec.Rules = append(r.Spec.Rules, rules)
		}
		if resp.Spec.TargetRef == nil {
			r.Spec.TargetRef = nil
		} else {
			r.Spec.TargetRef = &tfTypes.MeshAccessLogItemTargetRef{}
			r.Spec.TargetRef.Kind = types.StringValue(string(resp.Spec.TargetRef.Kind))
			if len(resp.Spec.TargetRef.Labels) > 0 {
				r.Spec.TargetRef.Labels = make(map[string]types.String, len(resp.Spec.TargetRef.Labels))
				for key2, value2 := range resp.Spec.TargetRef.Labels {
					r.Spec.TargetRef.Labels[key2] = types.StringValue(value2)
				}
			}
			r.Spec.TargetRef.Mesh = types.StringPointerValue(resp.Spec.TargetRef.Mesh)
			r.Spec.TargetRef.Name = types.StringPointerValue(resp.Spec.TargetRef.Name)
			r.Spec.TargetRef.Namespace = types.StringPointerValue(resp.Spec.TargetRef.Namespace)
			r.Spec.TargetRef.ProxyTypes = make([]types.String, 0, len(resp.Spec.TargetRef.ProxyTypes))
			for _, v := range resp.Spec.TargetRef.ProxyTypes {
				r.Spec.TargetRef.ProxyTypes = append(r.Spec.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			r.Spec.TargetRef.SectionName = types.StringPointerValue(resp.Spec.TargetRef.SectionName)
			if len(resp.Spec.TargetRef.Tags) > 0 {
				r.Spec.TargetRef.Tags = make(map[string]types.String, len(resp.Spec.TargetRef.Tags))
				for key3, value3 := range resp.Spec.TargetRef.Tags {
					r.Spec.TargetRef.Tags[key3] = types.StringValue(value3)
				}
			}
		}
		r.Spec.To = []tfTypes.From{}

		for _, toItem := range resp.Spec.To {
			var to tfTypes.From

			to.Default.Backends = []tfTypes.MeshAccessLogItemSpecFromBackends{}

			for _, backendsItem2 := range toItem.Default.Backends {
				var backends2 tfTypes.MeshAccessLogItemSpecFromBackends

				if backendsItem2.File == nil {
					backends2.File = nil
				} else {
					backends2.File = &tfTypes.File{}
					if backendsItem2.File.Format == nil {
						backends2.File.Format = nil
					} else {
						backends2.File.Format = &tfTypes.Format{}
						backends2.File.Format.JSON = []tfTypes.JSON{}

						for _, jsonVarItem4 := range backendsItem2.File.Format.JSON {
							var jsonVar4 tfTypes.JSON

							jsonVar4.Key = types.StringValue(jsonVarItem4.Key)
							jsonVar4.Value = types.StringValue(jsonVarItem4.Value)

							backends2.File.Format.JSON = append(backends2.File.Format.JSON, jsonVar4)
						}
						backends2.File.Format.OmitEmptyValues = types.BoolPointerValue(backendsItem2.File.Format.OmitEmptyValues)
						backends2.File.Format.Plain = types.StringPointerValue(backendsItem2.File.Format.Plain)
						backends2.File.Format.Type = types.StringValue(string(backendsItem2.File.Format.Type))
					}
					backends2.File.Path = types.StringValue(backendsItem2.File.Path)
				}
				if backendsItem2.OpenTelemetry == nil {
					backends2.OpenTelemetry = nil
				} else {
					backends2.OpenTelemetry = &tfTypes.MeshAccessLogItemSpecFromOpenTelemetry{}
					backends2.OpenTelemetry.Attributes = []tfTypes.JSON{}

					for _, attributesItem2 := range backendsItem2.OpenTelemetry.Attributes {
						var attributes2 tfTypes.JSON

						attributes2.Key = types.StringValue(attributesItem2.Key)
						attributes2.Value = types.StringValue(attributesItem2.Value)

						backends2.OpenTelemetry.Attributes = append(backends2.OpenTelemetry.Attributes, attributes2)
					}
					if backendsItem2.OpenTelemetry.Body == nil {
						backends2.OpenTelemetry.Body = jsontypes.NewNormalizedNull()
					} else {
						bodyResult2, _ := json.Marshal(backendsItem2.OpenTelemetry.Body)
						backends2.OpenTelemetry.Body = jsontypes.NewNormalizedValue(string(bodyResult2))
					}
					backends2.OpenTelemetry.Endpoint = types.StringValue(backendsItem2.OpenTelemetry.Endpoint)
				}
				if backendsItem2.TCP == nil {
					backends2.TCP = nil
				} else {
					backends2.TCP = &tfTypes.MeshAccessLogItemSpecFromTCP{}
					backends2.TCP.Address = types.StringValue(backendsItem2.TCP.Address)
					if backendsItem2.TCP.Format == nil {
						backends2.TCP.Format = nil
					} else {
						backends2.TCP.Format = &tfTypes.Format{}
						backends2.TCP.Format.JSON = []tfTypes.JSON{}

						for _, jsonVarItem5 := range backendsItem2.TCP.Format.JSON {
							var jsonVar5 tfTypes.JSON

							jsonVar5.Key = types.StringValue(jsonVarItem5.Key)
							jsonVar5.Value = types.StringValue(jsonVarItem5.Value)

							backends2.TCP.Format.JSON = append(backends2.TCP.Format.JSON, jsonVar5)
						}
						backends2.TCP.Format.OmitEmptyValues = types.BoolPointerValue(backendsItem2.TCP.Format.OmitEmptyValues)
						backends2.TCP.Format.Plain = types.StringPointerValue(backendsItem2.TCP.Format.Plain)
						backends2.TCP.Format.Type = types.StringValue(string(backendsItem2.TCP.Format.Type))
					}
				}
				backends2.Type = types.StringValue(string(backendsItem2.Type))

				to.Default.Backends = append(to.Default.Backends, backends2)
			}
			to.TargetRef.Kind = types.StringValue(string(toItem.TargetRef.Kind))
			if len(toItem.TargetRef.Labels) > 0 {
				to.TargetRef.Labels = make(map[string]types.String, len(toItem.TargetRef.Labels))
				for key4, value4 := range toItem.TargetRef.Labels {
					to.TargetRef.Labels[key4] = types.StringValue(value4)
				}
			}
			to.TargetRef.Mesh = types.StringPointerValue(toItem.TargetRef.Mesh)
			to.TargetRef.Name = types.StringPointerValue(toItem.TargetRef.Name)
			to.TargetRef.Namespace = types.StringPointerValue(toItem.TargetRef.Namespace)
			to.TargetRef.ProxyTypes = make([]types.String, 0, len(toItem.TargetRef.ProxyTypes))
			for _, v := range toItem.TargetRef.ProxyTypes {
				to.TargetRef.ProxyTypes = append(to.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			to.TargetRef.SectionName = types.StringPointerValue(toItem.TargetRef.SectionName)
			if len(toItem.TargetRef.Tags) > 0 {
				to.TargetRef.Tags = make(map[string]types.String, len(toItem.TargetRef.Tags))
				for key5, value5 := range toItem.TargetRef.Tags {
					to.TargetRef.Tags[key5] = types.StringValue(value5)
				}
			}

			r.Spec.To = append(r.Spec.To, to)
		}
		r.Type = types.StringValue(string(resp.Type))
	}

	return diags
}

func (r *MeshAccessLogResourceModel) ToOperationsDeleteMeshAccessLogRequest(ctx context.Context) (*operations.DeleteMeshAccessLogRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var mesh string
	mesh = r.Mesh.ValueString()

	var name string
	name = r.Name.ValueString()

	out := operations.DeleteMeshAccessLogRequest{
		Mesh: mesh,
		Name: name,
	}

	return &out, diags
}

func (r *MeshAccessLogResourceModel) ToOperationsGetMeshAccessLogRequest(ctx context.Context) (*operations.GetMeshAccessLogRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var mesh string
	mesh = r.Mesh.ValueString()

	var name string
	name = r.Name.ValueString()

	out := operations.GetMeshAccessLogRequest{
		Mesh: mesh,
		Name: name,
	}

	return &out, diags
}

func (r *MeshAccessLogResourceModel) ToOperationsPutMeshAccessLogRequest(ctx context.Context) (*operations.PutMeshAccessLogRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var mesh string
	mesh = r.Mesh.ValueString()

	var name string
	name = r.Name.ValueString()

	meshAccessLogItem, meshAccessLogItemDiags := r.ToSharedMeshAccessLogItemInput(ctx)
	diags.Append(meshAccessLogItemDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PutMeshAccessLogRequest{
		Mesh:              mesh,
		Name:              name,
		MeshAccessLogItem: *meshAccessLogItem,
	}

	return &out, diags
}

func (r *MeshAccessLogResourceModel) ToSharedMeshAccessLogItemInput(ctx context.Context) (*shared.MeshAccessLogItemInput, diag.Diagnostics) {
	var diags diag.Diagnostics

	typeVar := shared.Type(r.Type.ValueString())
	mesh := new(string)
	if !r.Mesh.IsUnknown() && !r.Mesh.IsNull() {
		*mesh = r.Mesh.ValueString()
	} else {
		mesh = nil
	}
	var name string
	name = r.Name.ValueString()

	var labels map[string]string
	if !r.Labels.IsUnknown() && !r.Labels.IsNull() {
		diags.Append(r.Labels.ElementsAs(ctx, &labels, true)...)
	}
	from := make([]shared.From, 0, len(r.Spec.From))
	for _, fromItem := range r.Spec.From {
		backends := make([]shared.MeshAccessLogItemSpecFromBackends, 0, len(fromItem.Default.Backends))
		for _, backendsItem := range fromItem.Default.Backends {
			var file *shared.File
			if backendsItem.File != nil {
				var format *shared.Format
				if backendsItem.File.Format != nil {
					jsonVar := make([]shared.JSON, 0, len(backendsItem.File.Format.JSON))
					for _, jsonItem := range backendsItem.File.Format.JSON {
						var key string
						key = jsonItem.Key.ValueString()

						var value string
						value = jsonItem.Value.ValueString()

						jsonVar = append(jsonVar, shared.JSON{
							Key:   key,
							Value: value,
						})
					}
					omitEmptyValues := new(bool)
					if !backendsItem.File.Format.OmitEmptyValues.IsUnknown() && !backendsItem.File.Format.OmitEmptyValues.IsNull() {
						*omitEmptyValues = backendsItem.File.Format.OmitEmptyValues.ValueBool()
					} else {
						omitEmptyValues = nil
					}
					plain := new(string)
					if !backendsItem.File.Format.Plain.IsUnknown() && !backendsItem.File.Format.Plain.IsNull() {
						*plain = backendsItem.File.Format.Plain.ValueString()
					} else {
						plain = nil
					}
					typeVar1 := shared.MeshAccessLogItemSpecFromType(backendsItem.File.Format.Type.ValueString())
					format = &shared.Format{
						JSON:            jsonVar,
						OmitEmptyValues: omitEmptyValues,
						Plain:           plain,
						Type:            typeVar1,
					}
				}
				var path string
				path = backendsItem.File.Path.ValueString()

				file = &shared.File{
					Format: format,
					Path:   path,
				}
			}
			var openTelemetry *shared.MeshAccessLogItemSpecFromOpenTelemetry
			if backendsItem.OpenTelemetry != nil {
				attributes := make([]shared.Attributes, 0, len(backendsItem.OpenTelemetry.Attributes))
				for _, attributesItem := range backendsItem.OpenTelemetry.Attributes {
					var key1 string
					key1 = attributesItem.Key.ValueString()

					var value1 string
					value1 = attributesItem.Value.ValueString()

					attributes = append(attributes, shared.Attributes{
						Key:   key1,
						Value: value1,
					})
				}
				var body interface{}
				if !backendsItem.OpenTelemetry.Body.IsUnknown() && !backendsItem.OpenTelemetry.Body.IsNull() {
					_ = json.Unmarshal([]byte(backendsItem.OpenTelemetry.Body.ValueString()), &body)
				}
				var endpoint string
				endpoint = backendsItem.OpenTelemetry.Endpoint.ValueString()

				openTelemetry = &shared.MeshAccessLogItemSpecFromOpenTelemetry{
					Attributes: attributes,
					Body:       body,
					Endpoint:   endpoint,
				}
			}
			var tcp *shared.MeshAccessLogItemSpecFromTCP
			if backendsItem.TCP != nil {
				var address string
				address = backendsItem.TCP.Address.ValueString()

				var format1 *shared.MeshAccessLogItemFormat
				if backendsItem.TCP.Format != nil {
					jsonVar1 := make([]shared.MeshAccessLogItemJSON, 0, len(backendsItem.TCP.Format.JSON))
					for _, jsonItem1 := range backendsItem.TCP.Format.JSON {
						var key2 string
						key2 = jsonItem1.Key.ValueString()

						var value2 string
						value2 = jsonItem1.Value.ValueString()

						jsonVar1 = append(jsonVar1, shared.MeshAccessLogItemJSON{
							Key:   key2,
							Value: value2,
						})
					}
					omitEmptyValues1 := new(bool)
					if !backendsItem.TCP.Format.OmitEmptyValues.IsUnknown() && !backendsItem.TCP.Format.OmitEmptyValues.IsNull() {
						*omitEmptyValues1 = backendsItem.TCP.Format.OmitEmptyValues.ValueBool()
					} else {
						omitEmptyValues1 = nil
					}
					plain1 := new(string)
					if !backendsItem.TCP.Format.Plain.IsUnknown() && !backendsItem.TCP.Format.Plain.IsNull() {
						*plain1 = backendsItem.TCP.Format.Plain.ValueString()
					} else {
						plain1 = nil
					}
					typeVar2 := shared.MeshAccessLogItemSpecFromDefaultType(backendsItem.TCP.Format.Type.ValueString())
					format1 = &shared.MeshAccessLogItemFormat{
						JSON:            jsonVar1,
						OmitEmptyValues: omitEmptyValues1,
						Plain:           plain1,
						Type:            typeVar2,
					}
				}
				tcp = &shared.MeshAccessLogItemSpecFromTCP{
					Address: address,
					Format:  format1,
				}
			}
			type1 := shared.MeshAccessLogItemType(backendsItem.Type.ValueString())
			backends = append(backends, shared.MeshAccessLogItemSpecFromBackends{
				File:          file,
				OpenTelemetry: openTelemetry,
				TCP:           tcp,
				Type:          type1,
			})
		}
		defaultVar := shared.MeshAccessLogItemSpecFromDefault{
			Backends: backends,
		}
		kind := shared.MeshAccessLogItemKind(fromItem.TargetRef.Kind.ValueString())
		labels1 := make(map[string]string)
		for labelsKey, labelsValue := range fromItem.TargetRef.Labels {
			var labelsInst string
			labelsInst = labelsValue.ValueString()

			labels1[labelsKey] = labelsInst
		}
		mesh1 := new(string)
		if !fromItem.TargetRef.Mesh.IsUnknown() && !fromItem.TargetRef.Mesh.IsNull() {
			*mesh1 = fromItem.TargetRef.Mesh.ValueString()
		} else {
			mesh1 = nil
		}
		name1 := new(string)
		if !fromItem.TargetRef.Name.IsUnknown() && !fromItem.TargetRef.Name.IsNull() {
			*name1 = fromItem.TargetRef.Name.ValueString()
		} else {
			name1 = nil
		}
		namespace := new(string)
		if !fromItem.TargetRef.Namespace.IsUnknown() && !fromItem.TargetRef.Namespace.IsNull() {
			*namespace = fromItem.TargetRef.Namespace.ValueString()
		} else {
			namespace = nil
		}
		proxyTypes := make([]shared.MeshAccessLogItemProxyTypes, 0, len(fromItem.TargetRef.ProxyTypes))
		for _, proxyTypesItem := range fromItem.TargetRef.ProxyTypes {
			proxyTypes = append(proxyTypes, shared.MeshAccessLogItemProxyTypes(proxyTypesItem.ValueString()))
		}
		sectionName := new(string)
		if !fromItem.TargetRef.SectionName.IsUnknown() && !fromItem.TargetRef.SectionName.IsNull() {
			*sectionName = fromItem.TargetRef.SectionName.ValueString()
		} else {
			sectionName = nil
		}
		tags := make(map[string]string)
		for tagsKey, tagsValue := range fromItem.TargetRef.Tags {
			var tagsInst string
			tagsInst = tagsValue.ValueString()

			tags[tagsKey] = tagsInst
		}
		targetRef := shared.MeshAccessLogItemTargetRef{
			Kind:        kind,
			Labels:      labels1,
			Mesh:        mesh1,
			Name:        name1,
			Namespace:   namespace,
			ProxyTypes:  proxyTypes,
			SectionName: sectionName,
			Tags:        tags,
		}
		from = append(from, shared.From{
			Default:   defaultVar,
			TargetRef: targetRef,
		})
	}
	rules := make([]shared.Rules, 0, len(r.Spec.Rules))
	for _, rulesItem := range r.Spec.Rules {
		backends1 := make([]shared.MeshAccessLogItemBackends, 0, len(rulesItem.Default.Backends))
		for _, backendsItem1 := range rulesItem.Default.Backends {
			var file1 *shared.MeshAccessLogItemFile
			if backendsItem1.File != nil {
				var format2 *shared.MeshAccessLogItemSpecFormat
				if backendsItem1.File.Format != nil {
					jsonVar2 := make([]shared.MeshAccessLogItemSpecJSON, 0, len(backendsItem1.File.Format.JSON))
					for _, jsonItem2 := range backendsItem1.File.Format.JSON {
						var key3 string
						key3 = jsonItem2.Key.ValueString()

						var value3 string
						value3 = jsonItem2.Value.ValueString()

						jsonVar2 = append(jsonVar2, shared.MeshAccessLogItemSpecJSON{
							Key:   key3,
							Value: value3,
						})
					}
					omitEmptyValues2 := new(bool)
					if !backendsItem1.File.Format.OmitEmptyValues.IsUnknown() && !backendsItem1.File.Format.OmitEmptyValues.IsNull() {
						*omitEmptyValues2 = backendsItem1.File.Format.OmitEmptyValues.ValueBool()
					} else {
						omitEmptyValues2 = nil
					}
					plain2 := new(string)
					if !backendsItem1.File.Format.Plain.IsUnknown() && !backendsItem1.File.Format.Plain.IsNull() {
						*plain2 = backendsItem1.File.Format.Plain.ValueString()
					} else {
						plain2 = nil
					}
					typeVar3 := shared.MeshAccessLogItemSpecRulesType(backendsItem1.File.Format.Type.ValueString())
					format2 = &shared.MeshAccessLogItemSpecFormat{
						JSON:            jsonVar2,
						OmitEmptyValues: omitEmptyValues2,
						Plain:           plain2,
						Type:            typeVar3,
					}
				}
				var path1 string
				path1 = backendsItem1.File.Path.ValueString()

				file1 = &shared.MeshAccessLogItemFile{
					Format: format2,
					Path:   path1,
				}
			}
			var openTelemetry1 *shared.MeshAccessLogItemOpenTelemetry
			if backendsItem1.OpenTelemetry != nil {
				attributes1 := make([]shared.MeshAccessLogItemAttributes, 0, len(backendsItem1.OpenTelemetry.Attributes))
				for _, attributesItem1 := range backendsItem1.OpenTelemetry.Attributes {
					var key4 string
					key4 = attributesItem1.Key.ValueString()

					var value4 string
					value4 = attributesItem1.Value.ValueString()

					attributes1 = append(attributes1, shared.MeshAccessLogItemAttributes{
						Key:   key4,
						Value: value4,
					})
				}
				var body1 interface{}
				if !backendsItem1.OpenTelemetry.Body.IsUnknown() && !backendsItem1.OpenTelemetry.Body.IsNull() {
					_ = json.Unmarshal([]byte(backendsItem1.OpenTelemetry.Body.ValueString()), &body1)
				}
				var endpoint1 string
				endpoint1 = backendsItem1.OpenTelemetry.Endpoint.ValueString()

				openTelemetry1 = &shared.MeshAccessLogItemOpenTelemetry{
					Attributes: attributes1,
					Body:       body1,
					Endpoint:   endpoint1,
				}
			}
			var tcp1 *shared.MeshAccessLogItemTCP
			if backendsItem1.TCP != nil {
				var address1 string
				address1 = backendsItem1.TCP.Address.ValueString()

				var format3 *shared.MeshAccessLogItemSpecRulesFormat
				if backendsItem1.TCP.Format != nil {
					jsonVar3 := make([]shared.MeshAccessLogItemSpecRulesJSON, 0, len(backendsItem1.TCP.Format.JSON))
					for _, jsonItem3 := range backendsItem1.TCP.Format.JSON {
						var key5 string
						key5 = jsonItem3.Key.ValueString()

						var value5 string
						value5 = jsonItem3.Value.ValueString()

						jsonVar3 = append(jsonVar3, shared.MeshAccessLogItemSpecRulesJSON{
							Key:   key5,
							Value: value5,
						})
					}
					omitEmptyValues3 := new(bool)
					if !backendsItem1.TCP.Format.OmitEmptyValues.IsUnknown() && !backendsItem1.TCP.Format.OmitEmptyValues.IsNull() {
						*omitEmptyValues3 = backendsItem1.TCP.Format.OmitEmptyValues.ValueBool()
					} else {
						omitEmptyValues3 = nil
					}
					plain3 := new(string)
					if !backendsItem1.TCP.Format.Plain.IsUnknown() && !backendsItem1.TCP.Format.Plain.IsNull() {
						*plain3 = backendsItem1.TCP.Format.Plain.ValueString()
					} else {
						plain3 = nil
					}
					typeVar4 := shared.MeshAccessLogItemSpecRulesDefaultType(backendsItem1.TCP.Format.Type.ValueString())
					format3 = &shared.MeshAccessLogItemSpecRulesFormat{
						JSON:            jsonVar3,
						OmitEmptyValues: omitEmptyValues3,
						Plain:           plain3,
						Type:            typeVar4,
					}
				}
				tcp1 = &shared.MeshAccessLogItemTCP{
					Address: address1,
					Format:  format3,
				}
			}
			type2 := shared.MeshAccessLogItemSpecType(backendsItem1.Type.ValueString())
			backends1 = append(backends1, shared.MeshAccessLogItemBackends{
				File:          file1,
				OpenTelemetry: openTelemetry1,
				TCP:           tcp1,
				Type:          type2,
			})
		}
		default1 := shared.MeshAccessLogItemDefault{
			Backends: backends1,
		}
		rules = append(rules, shared.Rules{
			Default: default1,
		})
	}
	var targetRef1 *shared.TargetRef
	if r.Spec.TargetRef != nil {
		kind1 := shared.Kind(r.Spec.TargetRef.Kind.ValueString())
		labels2 := make(map[string]string)
		for labelsKey1, labelsValue1 := range r.Spec.TargetRef.Labels {
			var labelsInst1 string
			labelsInst1 = labelsValue1.ValueString()

			labels2[labelsKey1] = labelsInst1
		}
		mesh2 := new(string)
		if !r.Spec.TargetRef.Mesh.IsUnknown() && !r.Spec.TargetRef.Mesh.IsNull() {
			*mesh2 = r.Spec.TargetRef.Mesh.ValueString()
		} else {
			mesh2 = nil
		}
		name2 := new(string)
		if !r.Spec.TargetRef.Name.IsUnknown() && !r.Spec.TargetRef.Name.IsNull() {
			*name2 = r.Spec.TargetRef.Name.ValueString()
		} else {
			name2 = nil
		}
		namespace1 := new(string)
		if !r.Spec.TargetRef.Namespace.IsUnknown() && !r.Spec.TargetRef.Namespace.IsNull() {
			*namespace1 = r.Spec.TargetRef.Namespace.ValueString()
		} else {
			namespace1 = nil
		}
		proxyTypes1 := make([]shared.ProxyTypes, 0, len(r.Spec.TargetRef.ProxyTypes))
		for _, proxyTypesItem1 := range r.Spec.TargetRef.ProxyTypes {
			proxyTypes1 = append(proxyTypes1, shared.ProxyTypes(proxyTypesItem1.ValueString()))
		}
		sectionName1 := new(string)
		if !r.Spec.TargetRef.SectionName.IsUnknown() && !r.Spec.TargetRef.SectionName.IsNull() {
			*sectionName1 = r.Spec.TargetRef.SectionName.ValueString()
		} else {
			sectionName1 = nil
		}
		tags1 := make(map[string]string)
		for tagsKey1, tagsValue1 := range r.Spec.TargetRef.Tags {
			var tagsInst1 string
			tagsInst1 = tagsValue1.ValueString()

			tags1[tagsKey1] = tagsInst1
		}
		targetRef1 = &shared.TargetRef{
			Kind:        kind1,
			Labels:      labels2,
			Mesh:        mesh2,
			Name:        name2,
			Namespace:   namespace1,
			ProxyTypes:  proxyTypes1,
			SectionName: sectionName1,
			Tags:        tags1,
		}
	}
	to := make([]shared.To, 0, len(r.Spec.To))
	for _, toItem := range r.Spec.To {
		backends2 := make([]shared.MeshAccessLogItemSpecBackends, 0, len(toItem.Default.Backends))
		for _, backendsItem2 := range toItem.Default.Backends {
			var file2 *shared.MeshAccessLogItemSpecFile
			if backendsItem2.File != nil {
				var format4 *shared.MeshAccessLogItemSpecToFormat
				if backendsItem2.File.Format != nil {
					jsonVar4 := make([]shared.MeshAccessLogItemSpecToJSON, 0, len(backendsItem2.File.Format.JSON))
					for _, jsonItem4 := range backendsItem2.File.Format.JSON {
						var key6 string
						key6 = jsonItem4.Key.ValueString()

						var value6 string
						value6 = jsonItem4.Value.ValueString()

						jsonVar4 = append(jsonVar4, shared.MeshAccessLogItemSpecToJSON{
							Key:   key6,
							Value: value6,
						})
					}
					omitEmptyValues4 := new(bool)
					if !backendsItem2.File.Format.OmitEmptyValues.IsUnknown() && !backendsItem2.File.Format.OmitEmptyValues.IsNull() {
						*omitEmptyValues4 = backendsItem2.File.Format.OmitEmptyValues.ValueBool()
					} else {
						omitEmptyValues4 = nil
					}
					plain4 := new(string)
					if !backendsItem2.File.Format.Plain.IsUnknown() && !backendsItem2.File.Format.Plain.IsNull() {
						*plain4 = backendsItem2.File.Format.Plain.ValueString()
					} else {
						plain4 = nil
					}
					typeVar5 := shared.MeshAccessLogItemSpecToDefaultBackendsType(backendsItem2.File.Format.Type.ValueString())
					format4 = &shared.MeshAccessLogItemSpecToFormat{
						JSON:            jsonVar4,
						OmitEmptyValues: omitEmptyValues4,
						Plain:           plain4,
						Type:            typeVar5,
					}
				}
				var path2 string
				path2 = backendsItem2.File.Path.ValueString()

				file2 = &shared.MeshAccessLogItemSpecFile{
					Format: format4,
					Path:   path2,
				}
			}
			var openTelemetry2 *shared.MeshAccessLogItemSpecOpenTelemetry
			if backendsItem2.OpenTelemetry != nil {
				attributes2 := make([]shared.MeshAccessLogItemSpecAttributes, 0, len(backendsItem2.OpenTelemetry.Attributes))
				for _, attributesItem2 := range backendsItem2.OpenTelemetry.Attributes {
					var key7 string
					key7 = attributesItem2.Key.ValueString()

					var value7 string
					value7 = attributesItem2.Value.ValueString()

					attributes2 = append(attributes2, shared.MeshAccessLogItemSpecAttributes{
						Key:   key7,
						Value: value7,
					})
				}
				var body2 interface{}
				if !backendsItem2.OpenTelemetry.Body.IsUnknown() && !backendsItem2.OpenTelemetry.Body.IsNull() {
					_ = json.Unmarshal([]byte(backendsItem2.OpenTelemetry.Body.ValueString()), &body2)
				}
				var endpoint2 string
				endpoint2 = backendsItem2.OpenTelemetry.Endpoint.ValueString()

				openTelemetry2 = &shared.MeshAccessLogItemSpecOpenTelemetry{
					Attributes: attributes2,
					Body:       body2,
					Endpoint:   endpoint2,
				}
			}
			var tcp2 *shared.MeshAccessLogItemSpecTCP
			if backendsItem2.TCP != nil {
				var address2 string
				address2 = backendsItem2.TCP.Address.ValueString()

				var format5 *shared.MeshAccessLogItemSpecToDefaultFormat
				if backendsItem2.TCP.Format != nil {
					jsonVar5 := make([]shared.MeshAccessLogItemSpecToDefaultJSON, 0, len(backendsItem2.TCP.Format.JSON))
					for _, jsonItem5 := range backendsItem2.TCP.Format.JSON {
						var key8 string
						key8 = jsonItem5.Key.ValueString()

						var value8 string
						value8 = jsonItem5.Value.ValueString()

						jsonVar5 = append(jsonVar5, shared.MeshAccessLogItemSpecToDefaultJSON{
							Key:   key8,
							Value: value8,
						})
					}
					omitEmptyValues5 := new(bool)
					if !backendsItem2.TCP.Format.OmitEmptyValues.IsUnknown() && !backendsItem2.TCP.Format.OmitEmptyValues.IsNull() {
						*omitEmptyValues5 = backendsItem2.TCP.Format.OmitEmptyValues.ValueBool()
					} else {
						omitEmptyValues5 = nil
					}
					plain5 := new(string)
					if !backendsItem2.TCP.Format.Plain.IsUnknown() && !backendsItem2.TCP.Format.Plain.IsNull() {
						*plain5 = backendsItem2.TCP.Format.Plain.ValueString()
					} else {
						plain5 = nil
					}
					typeVar6 := shared.MeshAccessLogItemSpecToDefaultType(backendsItem2.TCP.Format.Type.ValueString())
					format5 = &shared.MeshAccessLogItemSpecToDefaultFormat{
						JSON:            jsonVar5,
						OmitEmptyValues: omitEmptyValues5,
						Plain:           plain5,
						Type:            typeVar6,
					}
				}
				tcp2 = &shared.MeshAccessLogItemSpecTCP{
					Address: address2,
					Format:  format5,
				}
			}
			type3 := shared.MeshAccessLogItemSpecToType(backendsItem2.Type.ValueString())
			backends2 = append(backends2, shared.MeshAccessLogItemSpecBackends{
				File:          file2,
				OpenTelemetry: openTelemetry2,
				TCP:           tcp2,
				Type:          type3,
			})
		}
		default2 := shared.MeshAccessLogItemSpecDefault{
			Backends: backends2,
		}
		kind2 := shared.MeshAccessLogItemSpecKind(toItem.TargetRef.Kind.ValueString())
		labels3 := make(map[string]string)
		for labelsKey2, labelsValue2 := range toItem.TargetRef.Labels {
			var labelsInst2 string
			labelsInst2 = labelsValue2.ValueString()

			labels3[labelsKey2] = labelsInst2
		}
		mesh3 := new(string)
		if !toItem.TargetRef.Mesh.IsUnknown() && !toItem.TargetRef.Mesh.IsNull() {
			*mesh3 = toItem.TargetRef.Mesh.ValueString()
		} else {
			mesh3 = nil
		}
		name3 := new(string)
		if !toItem.TargetRef.Name.IsUnknown() && !toItem.TargetRef.Name.IsNull() {
			*name3 = toItem.TargetRef.Name.ValueString()
		} else {
			name3 = nil
		}
		namespace2 := new(string)
		if !toItem.TargetRef.Namespace.IsUnknown() && !toItem.TargetRef.Namespace.IsNull() {
			*namespace2 = toItem.TargetRef.Namespace.ValueString()
		} else {
			namespace2 = nil
		}
		proxyTypes2 := make([]shared.MeshAccessLogItemSpecProxyTypes, 0, len(toItem.TargetRef.ProxyTypes))
		for _, proxyTypesItem2 := range toItem.TargetRef.ProxyTypes {
			proxyTypes2 = append(proxyTypes2, shared.MeshAccessLogItemSpecProxyTypes(proxyTypesItem2.ValueString()))
		}
		sectionName2 := new(string)
		if !toItem.TargetRef.SectionName.IsUnknown() && !toItem.TargetRef.SectionName.IsNull() {
			*sectionName2 = toItem.TargetRef.SectionName.ValueString()
		} else {
			sectionName2 = nil
		}
		tags2 := make(map[string]string)
		for tagsKey2, tagsValue2 := range toItem.TargetRef.Tags {
			var tagsInst2 string
			tagsInst2 = tagsValue2.ValueString()

			tags2[tagsKey2] = tagsInst2
		}
		targetRef2 := shared.MeshAccessLogItemSpecTargetRef{
			Kind:        kind2,
			Labels:      labels3,
			Mesh:        mesh3,
			Name:        name3,
			Namespace:   namespace2,
			ProxyTypes:  proxyTypes2,
			SectionName: sectionName2,
			Tags:        tags2,
		}
		to = append(to, shared.To{
			Default:   default2,
			TargetRef: targetRef2,
		})
	}
	spec := shared.Spec{
		From:      from,
		Rules:     rules,
		TargetRef: targetRef1,
		To:        to,
	}
	out := shared.MeshAccessLogItemInput{
		Type:   typeVar,
		Mesh:   mesh,
		Name:   name,
		Labels: labels,
		Spec:   spec,
	}

	return &out, diags
}
