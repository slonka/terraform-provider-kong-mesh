// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/Kong/shared-speakeasy/customtypes/kumalabels"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-kong-mesh/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-kong-mesh/internal/provider/types"
	"github.com/kong/terraform-provider-kong-mesh/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-kong-mesh/internal/sdk/models/shared"
)

func (r *MeshPassthroughResourceModel) RefreshFromSharedMeshPassthroughCreateOrUpdateSuccessResponse(ctx context.Context, resp *shared.MeshPassthroughCreateOrUpdateSuccessResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Warnings = make([]types.String, 0, len(resp.Warnings))
		for _, v := range resp.Warnings {
			r.Warnings = append(r.Warnings, types.StringValue(v))
		}
	}

	return diags
}

func (r *MeshPassthroughResourceModel) RefreshFromSharedMeshPassthroughItem(ctx context.Context, resp *shared.MeshPassthroughItem) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreationTime))
		labelsValue, labelsDiags := types.MapValueFrom(ctx, types.StringType, resp.Labels)
		diags.Append(labelsDiags...)
		labelsValuable, labelsDiags := kumalabels.KumaLabelsMapType{MapType: types.MapType{ElemType: types.StringType}}.ValueFromMap(ctx, labelsValue)
		diags.Append(labelsDiags...)
		r.Labels, _ = labelsValuable.(kumalabels.KumaLabelsMapValue)
		r.Mesh = types.StringPointerValue(resp.Mesh)
		r.ModificationTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.ModificationTime))
		r.Name = types.StringValue(resp.Name)
		if resp.Spec.Default == nil {
			r.Spec.Default = nil
		} else {
			r.Spec.Default = &tfTypes.MeshPassthroughItemDefault{}
			r.Spec.Default.AppendMatch = []tfTypes.AppendMatch{}

			for _, appendMatchItem := range resp.Spec.Default.AppendMatch {
				var appendMatch tfTypes.AppendMatch

				appendMatch.Port = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(appendMatchItem.Port))
				if appendMatchItem.Protocol != nil {
					appendMatch.Protocol = types.StringValue(string(*appendMatchItem.Protocol))
				} else {
					appendMatch.Protocol = types.StringNull()
				}
				appendMatch.Type = types.StringValue(string(appendMatchItem.Type))
				appendMatch.Value = types.StringValue(appendMatchItem.Value)

				r.Spec.Default.AppendMatch = append(r.Spec.Default.AppendMatch, appendMatch)
			}
			if resp.Spec.Default.PassthroughMode != nil {
				r.Spec.Default.PassthroughMode = types.StringValue(string(*resp.Spec.Default.PassthroughMode))
			} else {
				r.Spec.Default.PassthroughMode = types.StringNull()
			}
		}
		if resp.Spec.TargetRef == nil {
			r.Spec.TargetRef = nil
		} else {
			r.Spec.TargetRef = &tfTypes.MeshAccessLogItemTargetRef{}
			r.Spec.TargetRef.Kind = types.StringValue(string(resp.Spec.TargetRef.Kind))
			if len(resp.Spec.TargetRef.Labels) > 0 {
				r.Spec.TargetRef.Labels = make(map[string]types.String, len(resp.Spec.TargetRef.Labels))
				for key, value := range resp.Spec.TargetRef.Labels {
					r.Spec.TargetRef.Labels[key] = types.StringValue(value)
				}
			}
			r.Spec.TargetRef.Mesh = types.StringPointerValue(resp.Spec.TargetRef.Mesh)
			r.Spec.TargetRef.Name = types.StringPointerValue(resp.Spec.TargetRef.Name)
			r.Spec.TargetRef.Namespace = types.StringPointerValue(resp.Spec.TargetRef.Namespace)
			r.Spec.TargetRef.ProxyTypes = make([]types.String, 0, len(resp.Spec.TargetRef.ProxyTypes))
			for _, v := range resp.Spec.TargetRef.ProxyTypes {
				r.Spec.TargetRef.ProxyTypes = append(r.Spec.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			r.Spec.TargetRef.SectionName = types.StringPointerValue(resp.Spec.TargetRef.SectionName)
			if len(resp.Spec.TargetRef.Tags) > 0 {
				r.Spec.TargetRef.Tags = make(map[string]types.String, len(resp.Spec.TargetRef.Tags))
				for key1, value1 := range resp.Spec.TargetRef.Tags {
					r.Spec.TargetRef.Tags[key1] = types.StringValue(value1)
				}
			}
		}
		r.Type = types.StringValue(string(resp.Type))
	}

	return diags
}

func (r *MeshPassthroughResourceModel) ToOperationsDeleteMeshPassthroughRequest(ctx context.Context) (*operations.DeleteMeshPassthroughRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var mesh string
	mesh = r.Mesh.ValueString()

	var name string
	name = r.Name.ValueString()

	out := operations.DeleteMeshPassthroughRequest{
		Mesh: mesh,
		Name: name,
	}

	return &out, diags
}

func (r *MeshPassthroughResourceModel) ToOperationsGetMeshPassthroughRequest(ctx context.Context) (*operations.GetMeshPassthroughRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var mesh string
	mesh = r.Mesh.ValueString()

	var name string
	name = r.Name.ValueString()

	out := operations.GetMeshPassthroughRequest{
		Mesh: mesh,
		Name: name,
	}

	return &out, diags
}

func (r *MeshPassthroughResourceModel) ToOperationsPutMeshPassthroughRequest(ctx context.Context) (*operations.PutMeshPassthroughRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var mesh string
	mesh = r.Mesh.ValueString()

	var name string
	name = r.Name.ValueString()

	meshPassthroughItem, meshPassthroughItemDiags := r.ToSharedMeshPassthroughItemInput(ctx)
	diags.Append(meshPassthroughItemDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PutMeshPassthroughRequest{
		Mesh:                mesh,
		Name:                name,
		MeshPassthroughItem: *meshPassthroughItem,
	}

	return &out, diags
}

func (r *MeshPassthroughResourceModel) ToSharedMeshPassthroughItemInput(ctx context.Context) (*shared.MeshPassthroughItemInput, diag.Diagnostics) {
	var diags diag.Diagnostics

	typeVar := shared.MeshPassthroughItemType(r.Type.ValueString())
	mesh := new(string)
	if !r.Mesh.IsUnknown() && !r.Mesh.IsNull() {
		*mesh = r.Mesh.ValueString()
	} else {
		mesh = nil
	}
	var name string
	name = r.Name.ValueString()

	var labels map[string]string
	if !r.Labels.IsUnknown() && !r.Labels.IsNull() {
		diags.Append(r.Labels.ElementsAs(ctx, &labels, true)...)
	}
	var defaultVar *shared.MeshPassthroughItemDefault
	if r.Spec.Default != nil {
		appendMatch := make([]shared.AppendMatch, 0, len(r.Spec.Default.AppendMatch))
		for _, appendMatchItem := range r.Spec.Default.AppendMatch {
			port := new(int)
			if !appendMatchItem.Port.IsUnknown() && !appendMatchItem.Port.IsNull() {
				*port = int(appendMatchItem.Port.ValueInt32())
			} else {
				port = nil
			}
			protocol := new(shared.MeshPassthroughItemProtocol)
			if !appendMatchItem.Protocol.IsUnknown() && !appendMatchItem.Protocol.IsNull() {
				*protocol = shared.MeshPassthroughItemProtocol(appendMatchItem.Protocol.ValueString())
			} else {
				protocol = nil
			}
			type1 := shared.MeshPassthroughItemSpecType(appendMatchItem.Type.ValueString())
			var value string
			value = appendMatchItem.Value.ValueString()

			appendMatch = append(appendMatch, shared.AppendMatch{
				Port:     port,
				Protocol: protocol,
				Type:     type1,
				Value:    value,
			})
		}
		passthroughMode := new(shared.PassthroughMode)
		if !r.Spec.Default.PassthroughMode.IsUnknown() && !r.Spec.Default.PassthroughMode.IsNull() {
			*passthroughMode = shared.PassthroughMode(r.Spec.Default.PassthroughMode.ValueString())
		} else {
			passthroughMode = nil
		}
		defaultVar = &shared.MeshPassthroughItemDefault{
			AppendMatch:     appendMatch,
			PassthroughMode: passthroughMode,
		}
	}
	var targetRef *shared.MeshPassthroughItemTargetRef
	if r.Spec.TargetRef != nil {
		kind := shared.MeshPassthroughItemKind(r.Spec.TargetRef.Kind.ValueString())
		labels1 := make(map[string]string)
		for labelsKey, labelsValue := range r.Spec.TargetRef.Labels {
			var labelsInst string
			labelsInst = labelsValue.ValueString()

			labels1[labelsKey] = labelsInst
		}
		mesh1 := new(string)
		if !r.Spec.TargetRef.Mesh.IsUnknown() && !r.Spec.TargetRef.Mesh.IsNull() {
			*mesh1 = r.Spec.TargetRef.Mesh.ValueString()
		} else {
			mesh1 = nil
		}
		name1 := new(string)
		if !r.Spec.TargetRef.Name.IsUnknown() && !r.Spec.TargetRef.Name.IsNull() {
			*name1 = r.Spec.TargetRef.Name.ValueString()
		} else {
			name1 = nil
		}
		namespace := new(string)
		if !r.Spec.TargetRef.Namespace.IsUnknown() && !r.Spec.TargetRef.Namespace.IsNull() {
			*namespace = r.Spec.TargetRef.Namespace.ValueString()
		} else {
			namespace = nil
		}
		proxyTypes := make([]shared.MeshPassthroughItemProxyTypes, 0, len(r.Spec.TargetRef.ProxyTypes))
		for _, proxyTypesItem := range r.Spec.TargetRef.ProxyTypes {
			proxyTypes = append(proxyTypes, shared.MeshPassthroughItemProxyTypes(proxyTypesItem.ValueString()))
		}
		sectionName := new(string)
		if !r.Spec.TargetRef.SectionName.IsUnknown() && !r.Spec.TargetRef.SectionName.IsNull() {
			*sectionName = r.Spec.TargetRef.SectionName.ValueString()
		} else {
			sectionName = nil
		}
		tags := make(map[string]string)
		for tagsKey, tagsValue := range r.Spec.TargetRef.Tags {
			var tagsInst string
			tagsInst = tagsValue.ValueString()

			tags[tagsKey] = tagsInst
		}
		targetRef = &shared.MeshPassthroughItemTargetRef{
			Kind:        kind,
			Labels:      labels1,
			Mesh:        mesh1,
			Name:        name1,
			Namespace:   namespace,
			ProxyTypes:  proxyTypes,
			SectionName: sectionName,
			Tags:        tags,
		}
	}
	spec := shared.MeshPassthroughItemSpec{
		Default:   defaultVar,
		TargetRef: targetRef,
	}
	out := shared.MeshPassthroughItemInput{
		Type:   typeVar,
		Mesh:   mesh,
		Name:   name,
		Labels: labels,
		Spec:   spec,
	}

	return &out, diags
}
