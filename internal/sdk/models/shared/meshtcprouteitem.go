// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-mesh/internal/sdk/internal/utils"
	"time"
)

// MeshTCPRouteItemType - the type of the resource
type MeshTCPRouteItemType string

const (
	MeshTCPRouteItemTypeMeshTCPRoute MeshTCPRouteItemType = "MeshTCPRoute"
)

func (e MeshTCPRouteItemType) ToPointer() *MeshTCPRouteItemType {
	return &e
}
func (e *MeshTCPRouteItemType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MeshTCPRoute":
		*e = MeshTCPRouteItemType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshTCPRouteItemType: %v", v)
	}
}

// MeshTCPRouteItemKind - Kind of the referenced resource
type MeshTCPRouteItemKind string

const (
	MeshTCPRouteItemKindMesh                 MeshTCPRouteItemKind = "Mesh"
	MeshTCPRouteItemKindMeshSubset           MeshTCPRouteItemKind = "MeshSubset"
	MeshTCPRouteItemKindMeshGateway          MeshTCPRouteItemKind = "MeshGateway"
	MeshTCPRouteItemKindMeshService          MeshTCPRouteItemKind = "MeshService"
	MeshTCPRouteItemKindMeshExternalService  MeshTCPRouteItemKind = "MeshExternalService"
	MeshTCPRouteItemKindMeshMultiZoneService MeshTCPRouteItemKind = "MeshMultiZoneService"
	MeshTCPRouteItemKindMeshServiceSubset    MeshTCPRouteItemKind = "MeshServiceSubset"
	MeshTCPRouteItemKindMeshHTTPRoute        MeshTCPRouteItemKind = "MeshHTTPRoute"
	MeshTCPRouteItemKindDataplane            MeshTCPRouteItemKind = "Dataplane"
)

func (e MeshTCPRouteItemKind) ToPointer() *MeshTCPRouteItemKind {
	return &e
}
func (e *MeshTCPRouteItemKind) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Mesh":
		fallthrough
	case "MeshSubset":
		fallthrough
	case "MeshGateway":
		fallthrough
	case "MeshService":
		fallthrough
	case "MeshExternalService":
		fallthrough
	case "MeshMultiZoneService":
		fallthrough
	case "MeshServiceSubset":
		fallthrough
	case "MeshHTTPRoute":
		fallthrough
	case "Dataplane":
		*e = MeshTCPRouteItemKind(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshTCPRouteItemKind: %v", v)
	}
}

type MeshTCPRouteItemProxyTypes string

const (
	MeshTCPRouteItemProxyTypesSidecar MeshTCPRouteItemProxyTypes = "Sidecar"
	MeshTCPRouteItemProxyTypesGateway MeshTCPRouteItemProxyTypes = "Gateway"
)

func (e MeshTCPRouteItemProxyTypes) ToPointer() *MeshTCPRouteItemProxyTypes {
	return &e
}
func (e *MeshTCPRouteItemProxyTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Sidecar":
		fallthrough
	case "Gateway":
		*e = MeshTCPRouteItemProxyTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshTCPRouteItemProxyTypes: %v", v)
	}
}

// MeshTCPRouteItemTargetRef - TargetRef is a reference to the resource the policy takes an effect on.
// The resource could be either a real store object or virtual resource
// defined in-place.
type MeshTCPRouteItemTargetRef struct {
	// Kind of the referenced resource
	Kind MeshTCPRouteItemKind `json:"kind"`
	// Labels are used to select group of MeshServices that match labels. Either Labels or
	// Name and Namespace can be used.
	Labels map[string]string `json:"labels,omitempty"`
	// Mesh is reserved for future use to identify cross mesh resources.
	Mesh *string `json:"mesh,omitempty"`
	// Name of the referenced resource. Can only be used with kinds: `MeshService`,
	// `MeshServiceSubset` and `MeshGatewayRoute`
	Name *string `json:"name,omitempty"`
	// Namespace specifies the namespace of target resource. If empty only resources in policy namespace
	// will be targeted.
	Namespace *string `json:"namespace,omitempty"`
	// ProxyTypes specifies the data plane types that are subject to the policy. When not specified,
	// all data plane types are targeted by the policy.
	ProxyTypes []MeshTCPRouteItemProxyTypes `json:"proxyTypes,omitempty"`
	// SectionName is used to target specific section of resource.
	// For example, you can target port from MeshService.ports[] by its name. Only traffic to this port will be affected.
	SectionName *string `json:"sectionName,omitempty"`
	// Tags used to select a subset of proxies by tags. Can only be used with kinds
	// `MeshSubset` and `MeshServiceSubset`
	Tags map[string]string `json:"tags,omitempty"`
}

func (m *MeshTCPRouteItemTargetRef) GetKind() MeshTCPRouteItemKind {
	if m == nil {
		return MeshTCPRouteItemKind("")
	}
	return m.Kind
}

func (m *MeshTCPRouteItemTargetRef) GetLabels() map[string]string {
	if m == nil {
		return nil
	}
	return m.Labels
}

func (m *MeshTCPRouteItemTargetRef) GetMesh() *string {
	if m == nil {
		return nil
	}
	return m.Mesh
}

func (m *MeshTCPRouteItemTargetRef) GetName() *string {
	if m == nil {
		return nil
	}
	return m.Name
}

func (m *MeshTCPRouteItemTargetRef) GetNamespace() *string {
	if m == nil {
		return nil
	}
	return m.Namespace
}

func (m *MeshTCPRouteItemTargetRef) GetProxyTypes() []MeshTCPRouteItemProxyTypes {
	if m == nil {
		return nil
	}
	return m.ProxyTypes
}

func (m *MeshTCPRouteItemTargetRef) GetSectionName() *string {
	if m == nil {
		return nil
	}
	return m.SectionName
}

func (m *MeshTCPRouteItemTargetRef) GetTags() map[string]string {
	if m == nil {
		return nil
	}
	return m.Tags
}

// MeshTCPRouteItemSpecToKind - Kind of the referenced resource
type MeshTCPRouteItemSpecToKind string

const (
	MeshTCPRouteItemSpecToKindMesh                 MeshTCPRouteItemSpecToKind = "Mesh"
	MeshTCPRouteItemSpecToKindMeshSubset           MeshTCPRouteItemSpecToKind = "MeshSubset"
	MeshTCPRouteItemSpecToKindMeshGateway          MeshTCPRouteItemSpecToKind = "MeshGateway"
	MeshTCPRouteItemSpecToKindMeshService          MeshTCPRouteItemSpecToKind = "MeshService"
	MeshTCPRouteItemSpecToKindMeshExternalService  MeshTCPRouteItemSpecToKind = "MeshExternalService"
	MeshTCPRouteItemSpecToKindMeshMultiZoneService MeshTCPRouteItemSpecToKind = "MeshMultiZoneService"
	MeshTCPRouteItemSpecToKindMeshServiceSubset    MeshTCPRouteItemSpecToKind = "MeshServiceSubset"
	MeshTCPRouteItemSpecToKindMeshHTTPRoute        MeshTCPRouteItemSpecToKind = "MeshHTTPRoute"
	MeshTCPRouteItemSpecToKindDataplane            MeshTCPRouteItemSpecToKind = "Dataplane"
)

func (e MeshTCPRouteItemSpecToKind) ToPointer() *MeshTCPRouteItemSpecToKind {
	return &e
}
func (e *MeshTCPRouteItemSpecToKind) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Mesh":
		fallthrough
	case "MeshSubset":
		fallthrough
	case "MeshGateway":
		fallthrough
	case "MeshService":
		fallthrough
	case "MeshExternalService":
		fallthrough
	case "MeshMultiZoneService":
		fallthrough
	case "MeshServiceSubset":
		fallthrough
	case "MeshHTTPRoute":
		fallthrough
	case "Dataplane":
		*e = MeshTCPRouteItemSpecToKind(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshTCPRouteItemSpecToKind: %v", v)
	}
}

type MeshTCPRouteItemSpecToProxyTypes string

const (
	MeshTCPRouteItemSpecToProxyTypesSidecar MeshTCPRouteItemSpecToProxyTypes = "Sidecar"
	MeshTCPRouteItemSpecToProxyTypesGateway MeshTCPRouteItemSpecToProxyTypes = "Gateway"
)

func (e MeshTCPRouteItemSpecToProxyTypes) ToPointer() *MeshTCPRouteItemSpecToProxyTypes {
	return &e
}
func (e *MeshTCPRouteItemSpecToProxyTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Sidecar":
		fallthrough
	case "Gateway":
		*e = MeshTCPRouteItemSpecToProxyTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshTCPRouteItemSpecToProxyTypes: %v", v)
	}
}

// MeshTCPRouteItemBackendRefs - BackendRef defines where to forward traffic.
type MeshTCPRouteItemBackendRefs struct {
	// Kind of the referenced resource
	Kind MeshTCPRouteItemSpecToKind `json:"kind"`
	// Labels are used to select group of MeshServices that match labels. Either Labels or
	// Name and Namespace can be used.
	Labels map[string]string `json:"labels,omitempty"`
	// Mesh is reserved for future use to identify cross mesh resources.
	Mesh *string `json:"mesh,omitempty"`
	// Name of the referenced resource. Can only be used with kinds: `MeshService`,
	// `MeshServiceSubset` and `MeshGatewayRoute`
	Name *string `json:"name,omitempty"`
	// Namespace specifies the namespace of target resource. If empty only resources in policy namespace
	// will be targeted.
	Namespace *string `json:"namespace,omitempty"`
	// Port is only supported when this ref refers to a real MeshService object
	Port *int `json:"port,omitempty"`
	// ProxyTypes specifies the data plane types that are subject to the policy. When not specified,
	// all data plane types are targeted by the policy.
	ProxyTypes []MeshTCPRouteItemSpecToProxyTypes `json:"proxyTypes,omitempty"`
	// SectionName is used to target specific section of resource.
	// For example, you can target port from MeshService.ports[] by its name. Only traffic to this port will be affected.
	SectionName *string `json:"sectionName,omitempty"`
	// Tags used to select a subset of proxies by tags. Can only be used with kinds
	// `MeshSubset` and `MeshServiceSubset`
	Tags   map[string]string `json:"tags,omitempty"`
	Weight *int64            `default:"1" json:"weight"`
}

func (m MeshTCPRouteItemBackendRefs) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MeshTCPRouteItemBackendRefs) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, []string{"kind"}); err != nil {
		return err
	}
	return nil
}

func (m *MeshTCPRouteItemBackendRefs) GetKind() MeshTCPRouteItemSpecToKind {
	if m == nil {
		return MeshTCPRouteItemSpecToKind("")
	}
	return m.Kind
}

func (m *MeshTCPRouteItemBackendRefs) GetLabels() map[string]string {
	if m == nil {
		return nil
	}
	return m.Labels
}

func (m *MeshTCPRouteItemBackendRefs) GetMesh() *string {
	if m == nil {
		return nil
	}
	return m.Mesh
}

func (m *MeshTCPRouteItemBackendRefs) GetName() *string {
	if m == nil {
		return nil
	}
	return m.Name
}

func (m *MeshTCPRouteItemBackendRefs) GetNamespace() *string {
	if m == nil {
		return nil
	}
	return m.Namespace
}

func (m *MeshTCPRouteItemBackendRefs) GetPort() *int {
	if m == nil {
		return nil
	}
	return m.Port
}

func (m *MeshTCPRouteItemBackendRefs) GetProxyTypes() []MeshTCPRouteItemSpecToProxyTypes {
	if m == nil {
		return nil
	}
	return m.ProxyTypes
}

func (m *MeshTCPRouteItemBackendRefs) GetSectionName() *string {
	if m == nil {
		return nil
	}
	return m.SectionName
}

func (m *MeshTCPRouteItemBackendRefs) GetTags() map[string]string {
	if m == nil {
		return nil
	}
	return m.Tags
}

func (m *MeshTCPRouteItemBackendRefs) GetWeight() *int64 {
	if m == nil {
		return nil
	}
	return m.Weight
}

// MeshTCPRouteItemDefault - Default holds routing rules that can be merged with rules from other
// policies.
type MeshTCPRouteItemDefault struct {
	BackendRefs []MeshTCPRouteItemBackendRefs `json:"backendRefs,omitempty"`
}

func (m *MeshTCPRouteItemDefault) GetBackendRefs() []MeshTCPRouteItemBackendRefs {
	if m == nil {
		return nil
	}
	return m.BackendRefs
}

type MeshTCPRouteItemRules struct {
	// Default holds routing rules that can be merged with rules from other
	// policies.
	Default MeshTCPRouteItemDefault `json:"default"`
}

func (m *MeshTCPRouteItemRules) GetDefault() MeshTCPRouteItemDefault {
	if m == nil {
		return MeshTCPRouteItemDefault{}
	}
	return m.Default
}

// MeshTCPRouteItemSpecKind - Kind of the referenced resource
type MeshTCPRouteItemSpecKind string

const (
	MeshTCPRouteItemSpecKindMesh                 MeshTCPRouteItemSpecKind = "Mesh"
	MeshTCPRouteItemSpecKindMeshSubset           MeshTCPRouteItemSpecKind = "MeshSubset"
	MeshTCPRouteItemSpecKindMeshGateway          MeshTCPRouteItemSpecKind = "MeshGateway"
	MeshTCPRouteItemSpecKindMeshService          MeshTCPRouteItemSpecKind = "MeshService"
	MeshTCPRouteItemSpecKindMeshExternalService  MeshTCPRouteItemSpecKind = "MeshExternalService"
	MeshTCPRouteItemSpecKindMeshMultiZoneService MeshTCPRouteItemSpecKind = "MeshMultiZoneService"
	MeshTCPRouteItemSpecKindMeshServiceSubset    MeshTCPRouteItemSpecKind = "MeshServiceSubset"
	MeshTCPRouteItemSpecKindMeshHTTPRoute        MeshTCPRouteItemSpecKind = "MeshHTTPRoute"
	MeshTCPRouteItemSpecKindDataplane            MeshTCPRouteItemSpecKind = "Dataplane"
)

func (e MeshTCPRouteItemSpecKind) ToPointer() *MeshTCPRouteItemSpecKind {
	return &e
}
func (e *MeshTCPRouteItemSpecKind) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Mesh":
		fallthrough
	case "MeshSubset":
		fallthrough
	case "MeshGateway":
		fallthrough
	case "MeshService":
		fallthrough
	case "MeshExternalService":
		fallthrough
	case "MeshMultiZoneService":
		fallthrough
	case "MeshServiceSubset":
		fallthrough
	case "MeshHTTPRoute":
		fallthrough
	case "Dataplane":
		*e = MeshTCPRouteItemSpecKind(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshTCPRouteItemSpecKind: %v", v)
	}
}

type MeshTCPRouteItemSpecProxyTypes string

const (
	MeshTCPRouteItemSpecProxyTypesSidecar MeshTCPRouteItemSpecProxyTypes = "Sidecar"
	MeshTCPRouteItemSpecProxyTypesGateway MeshTCPRouteItemSpecProxyTypes = "Gateway"
)

func (e MeshTCPRouteItemSpecProxyTypes) ToPointer() *MeshTCPRouteItemSpecProxyTypes {
	return &e
}
func (e *MeshTCPRouteItemSpecProxyTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Sidecar":
		fallthrough
	case "Gateway":
		*e = MeshTCPRouteItemSpecProxyTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshTCPRouteItemSpecProxyTypes: %v", v)
	}
}

// MeshTCPRouteItemSpecTargetRef - TargetRef is a reference to the resource that represents a group of
// destinations.
type MeshTCPRouteItemSpecTargetRef struct {
	// Kind of the referenced resource
	Kind MeshTCPRouteItemSpecKind `json:"kind"`
	// Labels are used to select group of MeshServices that match labels. Either Labels or
	// Name and Namespace can be used.
	Labels map[string]string `json:"labels,omitempty"`
	// Mesh is reserved for future use to identify cross mesh resources.
	Mesh *string `json:"mesh,omitempty"`
	// Name of the referenced resource. Can only be used with kinds: `MeshService`,
	// `MeshServiceSubset` and `MeshGatewayRoute`
	Name *string `json:"name,omitempty"`
	// Namespace specifies the namespace of target resource. If empty only resources in policy namespace
	// will be targeted.
	Namespace *string `json:"namespace,omitempty"`
	// ProxyTypes specifies the data plane types that are subject to the policy. When not specified,
	// all data plane types are targeted by the policy.
	ProxyTypes []MeshTCPRouteItemSpecProxyTypes `json:"proxyTypes,omitempty"`
	// SectionName is used to target specific section of resource.
	// For example, you can target port from MeshService.ports[] by its name. Only traffic to this port will be affected.
	SectionName *string `json:"sectionName,omitempty"`
	// Tags used to select a subset of proxies by tags. Can only be used with kinds
	// `MeshSubset` and `MeshServiceSubset`
	Tags map[string]string `json:"tags,omitempty"`
}

func (m *MeshTCPRouteItemSpecTargetRef) GetKind() MeshTCPRouteItemSpecKind {
	if m == nil {
		return MeshTCPRouteItemSpecKind("")
	}
	return m.Kind
}

func (m *MeshTCPRouteItemSpecTargetRef) GetLabels() map[string]string {
	if m == nil {
		return nil
	}
	return m.Labels
}

func (m *MeshTCPRouteItemSpecTargetRef) GetMesh() *string {
	if m == nil {
		return nil
	}
	return m.Mesh
}

func (m *MeshTCPRouteItemSpecTargetRef) GetName() *string {
	if m == nil {
		return nil
	}
	return m.Name
}

func (m *MeshTCPRouteItemSpecTargetRef) GetNamespace() *string {
	if m == nil {
		return nil
	}
	return m.Namespace
}

func (m *MeshTCPRouteItemSpecTargetRef) GetProxyTypes() []MeshTCPRouteItemSpecProxyTypes {
	if m == nil {
		return nil
	}
	return m.ProxyTypes
}

func (m *MeshTCPRouteItemSpecTargetRef) GetSectionName() *string {
	if m == nil {
		return nil
	}
	return m.SectionName
}

func (m *MeshTCPRouteItemSpecTargetRef) GetTags() map[string]string {
	if m == nil {
		return nil
	}
	return m.Tags
}

type MeshTCPRouteItemTo struct {
	// Rules contains the routing rules applies to a combination of top-level
	// targetRef and the targetRef in this entry.
	Rules []MeshTCPRouteItemRules `json:"rules"`
	// TargetRef is a reference to the resource that represents a group of
	// destinations.
	TargetRef MeshTCPRouteItemSpecTargetRef `json:"targetRef"`
}

func (m *MeshTCPRouteItemTo) GetRules() []MeshTCPRouteItemRules {
	if m == nil {
		return []MeshTCPRouteItemRules{}
	}
	return m.Rules
}

func (m *MeshTCPRouteItemTo) GetTargetRef() MeshTCPRouteItemSpecTargetRef {
	if m == nil {
		return MeshTCPRouteItemSpecTargetRef{}
	}
	return m.TargetRef
}

// MeshTCPRouteItemSpec - Spec is the specification of the Kuma MeshTCPRoute resource.
type MeshTCPRouteItemSpec struct {
	// TargetRef is a reference to the resource the policy takes an effect on.
	// The resource could be either a real store object or virtual resource
	// defined in-place.
	TargetRef *MeshTCPRouteItemTargetRef `json:"targetRef,omitempty"`
	// To list makes a match between the consumed services and corresponding
	// configurations
	To []MeshTCPRouteItemTo `json:"to,omitempty"`
}

func (m *MeshTCPRouteItemSpec) GetTargetRef() *MeshTCPRouteItemTargetRef {
	if m == nil {
		return nil
	}
	return m.TargetRef
}

func (m *MeshTCPRouteItemSpec) GetTo() []MeshTCPRouteItemTo {
	if m == nil {
		return nil
	}
	return m.To
}

// MeshTCPRouteItem - Successful response
type MeshTCPRouteItem struct {
	// the type of the resource
	Type MeshTCPRouteItemType `json:"type"`
	// Mesh is the name of the Kuma mesh this resource belongs to. It may be omitted for cluster-scoped resources.
	Mesh *string `default:"default" json:"mesh"`
	// Name of the Kuma resource
	Name string `json:"name"`
	// The labels to help identity resources
	Labels map[string]string `json:"labels,omitempty"`
	// Spec is the specification of the Kuma MeshTCPRoute resource.
	Spec MeshTCPRouteItemSpec `json:"spec"`
	// Time at which the resource was created
	CreationTime *time.Time `json:"creationTime,omitempty"`
	// Time at which the resource was updated
	ModificationTime *time.Time `json:"modificationTime,omitempty"`
}

func (m MeshTCPRouteItem) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MeshTCPRouteItem) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, []string{"type", "name", "spec"}); err != nil {
		return err
	}
	return nil
}

func (m *MeshTCPRouteItem) GetType() MeshTCPRouteItemType {
	if m == nil {
		return MeshTCPRouteItemType("")
	}
	return m.Type
}

func (m *MeshTCPRouteItem) GetMesh() *string {
	if m == nil {
		return nil
	}
	return m.Mesh
}

func (m *MeshTCPRouteItem) GetName() string {
	if m == nil {
		return ""
	}
	return m.Name
}

func (m *MeshTCPRouteItem) GetLabels() map[string]string {
	if m == nil {
		return nil
	}
	return m.Labels
}

func (m *MeshTCPRouteItem) GetSpec() MeshTCPRouteItemSpec {
	if m == nil {
		return MeshTCPRouteItemSpec{}
	}
	return m.Spec
}

func (m *MeshTCPRouteItem) GetCreationTime() *time.Time {
	if m == nil {
		return nil
	}
	return m.CreationTime
}

func (m *MeshTCPRouteItem) GetModificationTime() *time.Time {
	if m == nil {
		return nil
	}
	return m.ModificationTime
}

type MeshTCPRouteItemInput struct {
	// the type of the resource
	Type MeshTCPRouteItemType `json:"type"`
	// Mesh is the name of the Kuma mesh this resource belongs to. It may be omitted for cluster-scoped resources.
	Mesh *string `default:"default" json:"mesh"`
	// Name of the Kuma resource
	Name string `json:"name"`
	// The labels to help identity resources
	Labels map[string]string `json:"labels,omitempty"`
	// Spec is the specification of the Kuma MeshTCPRoute resource.
	Spec MeshTCPRouteItemSpec `json:"spec"`
}

func (m MeshTCPRouteItemInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MeshTCPRouteItemInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, []string{"type", "name", "spec"}); err != nil {
		return err
	}
	return nil
}

func (m *MeshTCPRouteItemInput) GetType() MeshTCPRouteItemType {
	if m == nil {
		return MeshTCPRouteItemType("")
	}
	return m.Type
}

func (m *MeshTCPRouteItemInput) GetMesh() *string {
	if m == nil {
		return nil
	}
	return m.Mesh
}

func (m *MeshTCPRouteItemInput) GetName() string {
	if m == nil {
		return ""
	}
	return m.Name
}

func (m *MeshTCPRouteItemInput) GetLabels() map[string]string {
	if m == nil {
		return nil
	}
	return m.Labels
}

func (m *MeshTCPRouteItemInput) GetSpec() MeshTCPRouteItemSpec {
	if m == nil {
		return MeshTCPRouteItemSpec{}
	}
	return m.Spec
}
