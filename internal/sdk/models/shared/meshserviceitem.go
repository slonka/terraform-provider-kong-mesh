// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-kong-mesh/internal/sdk/internal/utils"
	"time"
)

// MeshServiceItemType - the type of the resource
type MeshServiceItemType string

const (
	MeshServiceItemTypeMeshService MeshServiceItemType = "MeshService"
)

func (e MeshServiceItemType) ToPointer() *MeshServiceItemType {
	return &e
}
func (e *MeshServiceItemType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MeshService":
		*e = MeshServiceItemType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshServiceItemType: %v", v)
	}
}

type MeshServiceItemSpecType string

const (
	MeshServiceItemSpecTypeServiceTag MeshServiceItemSpecType = "ServiceTag"
	MeshServiceItemSpecTypeSpiffeID   MeshServiceItemSpecType = "SpiffeID"
)

func (e MeshServiceItemSpecType) ToPointer() *MeshServiceItemSpecType {
	return &e
}
func (e *MeshServiceItemSpecType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ServiceTag":
		fallthrough
	case "SpiffeID":
		*e = MeshServiceItemSpecType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshServiceItemSpecType: %v", v)
	}
}

type Identities struct {
	Type  MeshServiceItemSpecType `json:"type"`
	Value string                  `json:"value"`
}

func (i *Identities) GetType() MeshServiceItemSpecType {
	if i == nil {
		return MeshServiceItemSpecType("")
	}
	return i.Type
}

func (i *Identities) GetValue() string {
	if i == nil {
		return ""
	}
	return i.Value
}

type TargetPortType string

const (
	TargetPortTypeInteger TargetPortType = "integer"
	TargetPortTypeStr     TargetPortType = "str"
)

type TargetPort struct {
	Integer *int64  `queryParam:"inline,name=targetPort"`
	Str     *string `queryParam:"inline,name=targetPort"`

	Type TargetPortType
}

func CreateTargetPortInteger(integer int64) TargetPort {
	typ := TargetPortTypeInteger

	return TargetPort{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateTargetPortStr(str string) TargetPort {
	typ := TargetPortTypeStr

	return TargetPort{
		Str:  &str,
		Type: typ,
	}
}

func (u *TargetPort) UnmarshalJSON(data []byte) error {

	var candidates []utils.UnionCandidate

	// Collect all valid candidates
	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, nil); err == nil {
		candidates = append(candidates, utils.UnionCandidate{
			Type:  TargetPortTypeInteger,
			Value: &integer,
		})
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		candidates = append(candidates, utils.UnionCandidate{
			Type:  TargetPortTypeStr,
			Value: &str,
		})
	}

	if len(candidates) == 0 {
		return fmt.Errorf("could not unmarshal `%s` into any supported union types for TargetPort", string(data))
	}

	// Pick the best candidate using multi-stage filtering
	best := utils.PickBestCandidate(candidates)
	if best == nil {
		return fmt.Errorf("could not unmarshal `%s` into any supported union types for TargetPort", string(data))
	}

	// Set the union type and value based on the best candidate
	u.Type = best.Type.(TargetPortType)
	switch best.Type {
	case TargetPortTypeInteger:
		u.Integer = best.Value.(*int64)
		return nil
	case TargetPortTypeStr:
		u.Str = best.Value.(*string)
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TargetPort", string(data))
}

func (u TargetPort) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type TargetPort: all fields are null")
}

type MeshServiceItemPorts struct {
	// Protocol identifies a protocol supported by a service.
	AppProtocol *string     `default:"tcp" json:"appProtocol"`
	Name        *string     `json:"name,omitempty"`
	Port        int         `json:"port"`
	TargetPort  *TargetPort `json:"targetPort,omitempty"`
}

func (m MeshServiceItemPorts) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MeshServiceItemPorts) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, []string{"port"}); err != nil {
		return err
	}
	return nil
}

func (m *MeshServiceItemPorts) GetAppProtocol() *string {
	if m == nil {
		return nil
	}
	return m.AppProtocol
}

func (m *MeshServiceItemPorts) GetName() *string {
	if m == nil {
		return nil
	}
	return m.Name
}

func (m *MeshServiceItemPorts) GetPort() int {
	if m == nil {
		return 0
	}
	return m.Port
}

func (m *MeshServiceItemPorts) GetTargetPort() *TargetPort {
	if m == nil {
		return nil
	}
	return m.TargetPort
}

type DataplaneRef struct {
	Name *string `json:"name,omitempty"`
}

func (d *DataplaneRef) GetName() *string {
	if d == nil {
		return nil
	}
	return d.Name
}

type MeshServiceItemSelector struct {
	DataplaneRef  *DataplaneRef     `json:"dataplaneRef,omitempty"`
	DataplaneTags map[string]string `json:"dataplaneTags,omitempty"`
}

func (m *MeshServiceItemSelector) GetDataplaneRef() *DataplaneRef {
	if m == nil {
		return nil
	}
	return m.DataplaneRef
}

func (m *MeshServiceItemSelector) GetDataplaneTags() map[string]string {
	if m == nil {
		return nil
	}
	return m.DataplaneTags
}

// State of MeshService. Available if there is at least one healthy endpoint. Otherwise, Unavailable.
// It's used for cross zone communication to check if we should send traffic to it, when MeshService is aggregated into MeshMultiZoneService.
type State string

const (
	StateAvailable   State = "Available"
	StateUnavailable State = "Unavailable"
)

func (e State) ToPointer() *State {
	return &e
}
func (e *State) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Available":
		fallthrough
	case "Unavailable":
		*e = State(v)
		return nil
	default:
		return fmt.Errorf("invalid value for State: %v", v)
	}
}

// MeshServiceItemSpec - Spec is the specification of the Kuma MeshService resource.
type MeshServiceItemSpec struct {
	Identities []Identities             `json:"identities,omitempty"`
	Ports      []MeshServiceItemPorts   `json:"ports,omitempty"`
	Selector   *MeshServiceItemSelector `json:"selector,omitempty"`
	// State of MeshService. Available if there is at least one healthy endpoint. Otherwise, Unavailable.
	// It's used for cross zone communication to check if we should send traffic to it, when MeshService is aggregated into MeshMultiZoneService.
	State *State `default:"Unavailable" json:"state"`
}

func (m MeshServiceItemSpec) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MeshServiceItemSpec) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (m *MeshServiceItemSpec) GetIdentities() []Identities {
	if m == nil {
		return nil
	}
	return m.Identities
}

func (m *MeshServiceItemSpec) GetPorts() []MeshServiceItemPorts {
	if m == nil {
		return nil
	}
	return m.Ports
}

func (m *MeshServiceItemSpec) GetSelector() *MeshServiceItemSelector {
	if m == nil {
		return nil
	}
	return m.Selector
}

func (m *MeshServiceItemSpec) GetState() *State {
	if m == nil {
		return nil
	}
	return m.State
}

type MeshServiceItemHostnameGeneratorRef struct {
	CoreName string `json:"coreName"`
}

func (m *MeshServiceItemHostnameGeneratorRef) GetCoreName() string {
	if m == nil {
		return ""
	}
	return m.CoreName
}

type MeshServiceItemAddresses struct {
	Hostname             *string                              `json:"hostname,omitempty"`
	HostnameGeneratorRef *MeshServiceItemHostnameGeneratorRef `json:"hostnameGeneratorRef,omitempty"`
	Origin               *string                              `json:"origin,omitempty"`
}

func (m *MeshServiceItemAddresses) GetHostname() *string {
	if m == nil {
		return nil
	}
	return m.Hostname
}

func (m *MeshServiceItemAddresses) GetHostnameGeneratorRef() *MeshServiceItemHostnameGeneratorRef {
	if m == nil {
		return nil
	}
	return m.HostnameGeneratorRef
}

func (m *MeshServiceItemAddresses) GetOrigin() *string {
	if m == nil {
		return nil
	}
	return m.Origin
}

// DataplaneProxies - Data plane proxies statistics selected by this MeshService.
type DataplaneProxies struct {
	// Number of data plane proxies connected to the zone control plane
	Connected *int64 `json:"connected,omitempty"`
	// Number of data plane proxies with all healthy inbounds selected by this MeshService.
	Healthy *int64 `json:"healthy,omitempty"`
	// Total number of data plane proxies.
	Total *int64 `json:"total,omitempty"`
}

func (d *DataplaneProxies) GetConnected() *int64 {
	if d == nil {
		return nil
	}
	return d.Connected
}

func (d *DataplaneProxies) GetHealthy() *int64 {
	if d == nil {
		return nil
	}
	return d.Healthy
}

func (d *DataplaneProxies) GetTotal() *int64 {
	if d == nil {
		return nil
	}
	return d.Total
}

// MeshServiceItemStatusHostnameGeneratorsStatus - status of the condition, one of True, False, Unknown.
type MeshServiceItemStatusHostnameGeneratorsStatus string

const (
	MeshServiceItemStatusHostnameGeneratorsStatusTrue    MeshServiceItemStatusHostnameGeneratorsStatus = "True"
	MeshServiceItemStatusHostnameGeneratorsStatusFalse   MeshServiceItemStatusHostnameGeneratorsStatus = "False"
	MeshServiceItemStatusHostnameGeneratorsStatusUnknown MeshServiceItemStatusHostnameGeneratorsStatus = "Unknown"
)

func (e MeshServiceItemStatusHostnameGeneratorsStatus) ToPointer() *MeshServiceItemStatusHostnameGeneratorsStatus {
	return &e
}
func (e *MeshServiceItemStatusHostnameGeneratorsStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "True":
		fallthrough
	case "False":
		fallthrough
	case "Unknown":
		*e = MeshServiceItemStatusHostnameGeneratorsStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshServiceItemStatusHostnameGeneratorsStatus: %v", v)
	}
}

type MeshServiceItemConditions struct {
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message string `json:"message"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason string `json:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status MeshServiceItemStatusHostnameGeneratorsStatus `json:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type string `json:"type"`
}

func (m *MeshServiceItemConditions) GetMessage() string {
	if m == nil {
		return ""
	}
	return m.Message
}

func (m *MeshServiceItemConditions) GetReason() string {
	if m == nil {
		return ""
	}
	return m.Reason
}

func (m *MeshServiceItemConditions) GetStatus() MeshServiceItemStatusHostnameGeneratorsStatus {
	if m == nil {
		return MeshServiceItemStatusHostnameGeneratorsStatus("")
	}
	return m.Status
}

func (m *MeshServiceItemConditions) GetType() string {
	if m == nil {
		return ""
	}
	return m.Type
}

type MeshServiceItemStatusHostnameGeneratorRef struct {
	CoreName string `json:"coreName"`
}

func (m *MeshServiceItemStatusHostnameGeneratorRef) GetCoreName() string {
	if m == nil {
		return ""
	}
	return m.CoreName
}

type MeshServiceItemHostnameGenerators struct {
	// Conditions is an array of hostname generator conditions.
	Conditions           []MeshServiceItemConditions               `json:"conditions,omitempty"`
	HostnameGeneratorRef MeshServiceItemStatusHostnameGeneratorRef `json:"hostnameGeneratorRef"`
}

func (m *MeshServiceItemHostnameGenerators) GetConditions() []MeshServiceItemConditions {
	if m == nil {
		return nil
	}
	return m.Conditions
}

func (m *MeshServiceItemHostnameGenerators) GetHostnameGeneratorRef() MeshServiceItemStatusHostnameGeneratorRef {
	if m == nil {
		return MeshServiceItemStatusHostnameGeneratorRef{}
	}
	return m.HostnameGeneratorRef
}

type MeshServiceItemStatusStatus string

const (
	MeshServiceItemStatusStatusReady    MeshServiceItemStatusStatus = "Ready"
	MeshServiceItemStatusStatusNotReady MeshServiceItemStatusStatus = "NotReady"
)

func (e MeshServiceItemStatusStatus) ToPointer() *MeshServiceItemStatusStatus {
	return &e
}
func (e *MeshServiceItemStatusStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Ready":
		fallthrough
	case "NotReady":
		*e = MeshServiceItemStatusStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshServiceItemStatusStatus: %v", v)
	}
}

type MeshServiceItemTLS struct {
	Status *MeshServiceItemStatusStatus `json:"status,omitempty"`
}

func (m *MeshServiceItemTLS) GetStatus() *MeshServiceItemStatusStatus {
	if m == nil {
		return nil
	}
	return m.Status
}

type MeshServiceItemVips struct {
	IP *string `json:"ip,omitempty"`
}

func (m *MeshServiceItemVips) GetIP() *string {
	if m == nil {
		return nil
	}
	return m.IP
}

// MeshServiceItemStatus - Status is the current status of the Kuma MeshService resource.
type MeshServiceItemStatus struct {
	Addresses []MeshServiceItemAddresses `json:"addresses,omitempty"`
	// Data plane proxies statistics selected by this MeshService.
	DataplaneProxies   *DataplaneProxies                   `json:"dataplaneProxies,omitempty"`
	HostnameGenerators []MeshServiceItemHostnameGenerators `json:"hostnameGenerators,omitempty"`
	TLS                *MeshServiceItemTLS                 `json:"tls,omitempty"`
	Vips               []MeshServiceItemVips               `json:"vips,omitempty"`
}

func (m *MeshServiceItemStatus) GetAddresses() []MeshServiceItemAddresses {
	if m == nil {
		return nil
	}
	return m.Addresses
}

func (m *MeshServiceItemStatus) GetDataplaneProxies() *DataplaneProxies {
	if m == nil {
		return nil
	}
	return m.DataplaneProxies
}

func (m *MeshServiceItemStatus) GetHostnameGenerators() []MeshServiceItemHostnameGenerators {
	if m == nil {
		return nil
	}
	return m.HostnameGenerators
}

func (m *MeshServiceItemStatus) GetTLS() *MeshServiceItemTLS {
	if m == nil {
		return nil
	}
	return m.TLS
}

func (m *MeshServiceItemStatus) GetVips() []MeshServiceItemVips {
	if m == nil {
		return nil
	}
	return m.Vips
}

// MeshServiceItem - Successful response
type MeshServiceItem struct {
	// the type of the resource
	Type MeshServiceItemType `json:"type"`
	// Mesh is the name of the Kuma mesh this resource belongs to. It may be omitted for cluster-scoped resources.
	Mesh *string `default:"default" json:"mesh"`
	// Name of the Kuma resource
	Name string `json:"name"`
	// The labels to help identity resources
	Labels map[string]string `json:"labels,omitempty"`
	// Spec is the specification of the Kuma MeshService resource.
	Spec MeshServiceItemSpec `json:"spec"`
	// Time at which the resource was created
	CreationTime *time.Time `json:"creationTime,omitempty"`
	// Time at which the resource was updated
	ModificationTime *time.Time `json:"modificationTime,omitempty"`
	// Status is the current status of the Kuma MeshService resource.
	Status *MeshServiceItemStatus `json:"status,omitempty"`
}

func (m MeshServiceItem) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MeshServiceItem) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, []string{"type", "name", "spec"}); err != nil {
		return err
	}
	return nil
}

func (m *MeshServiceItem) GetType() MeshServiceItemType {
	if m == nil {
		return MeshServiceItemType("")
	}
	return m.Type
}

func (m *MeshServiceItem) GetMesh() *string {
	if m == nil {
		return nil
	}
	return m.Mesh
}

func (m *MeshServiceItem) GetName() string {
	if m == nil {
		return ""
	}
	return m.Name
}

func (m *MeshServiceItem) GetLabels() map[string]string {
	if m == nil {
		return nil
	}
	return m.Labels
}

func (m *MeshServiceItem) GetSpec() MeshServiceItemSpec {
	if m == nil {
		return MeshServiceItemSpec{}
	}
	return m.Spec
}

func (m *MeshServiceItem) GetCreationTime() *time.Time {
	if m == nil {
		return nil
	}
	return m.CreationTime
}

func (m *MeshServiceItem) GetModificationTime() *time.Time {
	if m == nil {
		return nil
	}
	return m.ModificationTime
}

func (m *MeshServiceItem) GetStatus() *MeshServiceItemStatus {
	if m == nil {
		return nil
	}
	return m.Status
}

type MeshServiceItemInput struct {
	// the type of the resource
	Type MeshServiceItemType `json:"type"`
	// Mesh is the name of the Kuma mesh this resource belongs to. It may be omitted for cluster-scoped resources.
	Mesh *string `default:"default" json:"mesh"`
	// Name of the Kuma resource
	Name string `json:"name"`
	// The labels to help identity resources
	Labels map[string]string `json:"labels,omitempty"`
	// Spec is the specification of the Kuma MeshService resource.
	Spec MeshServiceItemSpec `json:"spec"`
}

func (m MeshServiceItemInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MeshServiceItemInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, []string{"type", "name", "spec"}); err != nil {
		return err
	}
	return nil
}

func (m *MeshServiceItemInput) GetType() MeshServiceItemType {
	if m == nil {
		return MeshServiceItemType("")
	}
	return m.Type
}

func (m *MeshServiceItemInput) GetMesh() *string {
	if m == nil {
		return nil
	}
	return m.Mesh
}

func (m *MeshServiceItemInput) GetName() string {
	if m == nil {
		return ""
	}
	return m.Name
}

func (m *MeshServiceItemInput) GetLabels() map[string]string {
	if m == nil {
		return nil
	}
	return m.Labels
}

func (m *MeshServiceItemInput) GetSpec() MeshServiceItemSpec {
	if m == nil {
		return MeshServiceItemSpec{}
	}
	return m.Spec
}
