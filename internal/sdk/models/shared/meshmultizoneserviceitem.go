// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-mesh/internal/sdk/internal/utils"
	"time"
)

// MeshMultiZoneServiceItemType - the type of the resource
type MeshMultiZoneServiceItemType string

const (
	MeshMultiZoneServiceItemTypeMeshMultiZoneService MeshMultiZoneServiceItemType = "MeshMultiZoneService"
)

func (e MeshMultiZoneServiceItemType) ToPointer() *MeshMultiZoneServiceItemType {
	return &e
}
func (e *MeshMultiZoneServiceItemType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MeshMultiZoneService":
		*e = MeshMultiZoneServiceItemType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshMultiZoneServiceItemType: %v", v)
	}
}

type Ports struct {
	// Protocol identifies a protocol supported by a service.
	AppProtocol *string `default:"tcp" json:"appProtocol"`
	Name        *string `json:"name,omitempty"`
	Port        int     `json:"port"`
}

func (p Ports) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *Ports) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"port"}); err != nil {
		return err
	}
	return nil
}

func (p *Ports) GetAppProtocol() *string {
	if p == nil {
		return nil
	}
	return p.AppProtocol
}

func (p *Ports) GetName() *string {
	if p == nil {
		return nil
	}
	return p.Name
}

func (p *Ports) GetPort() int {
	if p == nil {
		return 0
	}
	return p.Port
}

// MeshMultiZoneServiceItemMeshService - MeshService selects MeshServices
type MeshMultiZoneServiceItemMeshService struct {
	MatchLabels map[string]string `json:"matchLabels,omitempty"`
}

func (m *MeshMultiZoneServiceItemMeshService) GetMatchLabels() map[string]string {
	if m == nil {
		return nil
	}
	return m.MatchLabels
}

// MeshMultiZoneServiceItemSelector - Selector is a way to select multiple MeshServices
type MeshMultiZoneServiceItemSelector struct {
	// MeshService selects MeshServices
	MeshService MeshMultiZoneServiceItemMeshService `json:"meshService"`
}

func (m *MeshMultiZoneServiceItemSelector) GetMeshService() MeshMultiZoneServiceItemMeshService {
	if m == nil {
		return MeshMultiZoneServiceItemMeshService{}
	}
	return m.MeshService
}

// MeshMultiZoneServiceItemSpec - Spec is the specification of the Kuma MeshMultiZoneService resource.
type MeshMultiZoneServiceItemSpec struct {
	// Ports is a list of ports from selected MeshServices
	Ports []Ports `json:"ports"`
	// Selector is a way to select multiple MeshServices
	Selector MeshMultiZoneServiceItemSelector `json:"selector"`
}

func (m *MeshMultiZoneServiceItemSpec) GetPorts() []Ports {
	if m == nil {
		return []Ports{}
	}
	return m.Ports
}

func (m *MeshMultiZoneServiceItemSpec) GetSelector() MeshMultiZoneServiceItemSelector {
	if m == nil {
		return MeshMultiZoneServiceItemSelector{}
	}
	return m.Selector
}

type MeshMultiZoneServiceItemHostnameGeneratorRef struct {
	CoreName string `json:"coreName"`
}

func (m *MeshMultiZoneServiceItemHostnameGeneratorRef) GetCoreName() string {
	if m == nil {
		return ""
	}
	return m.CoreName
}

type MeshMultiZoneServiceItemAddresses struct {
	Hostname             *string                                       `json:"hostname,omitempty"`
	HostnameGeneratorRef *MeshMultiZoneServiceItemHostnameGeneratorRef `json:"hostnameGeneratorRef,omitempty"`
	Origin               *string                                       `json:"origin,omitempty"`
}

func (m *MeshMultiZoneServiceItemAddresses) GetHostname() *string {
	if m == nil {
		return nil
	}
	return m.Hostname
}

func (m *MeshMultiZoneServiceItemAddresses) GetHostnameGeneratorRef() *MeshMultiZoneServiceItemHostnameGeneratorRef {
	if m == nil {
		return nil
	}
	return m.HostnameGeneratorRef
}

func (m *MeshMultiZoneServiceItemAddresses) GetOrigin() *string {
	if m == nil {
		return nil
	}
	return m.Origin
}

// MeshMultiZoneServiceItemStatusStatus - status of the condition, one of True, False, Unknown.
type MeshMultiZoneServiceItemStatusStatus string

const (
	MeshMultiZoneServiceItemStatusStatusTrue    MeshMultiZoneServiceItemStatusStatus = "True"
	MeshMultiZoneServiceItemStatusStatusFalse   MeshMultiZoneServiceItemStatusStatus = "False"
	MeshMultiZoneServiceItemStatusStatusUnknown MeshMultiZoneServiceItemStatusStatus = "Unknown"
)

func (e MeshMultiZoneServiceItemStatusStatus) ToPointer() *MeshMultiZoneServiceItemStatusStatus {
	return &e
}
func (e *MeshMultiZoneServiceItemStatusStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "True":
		fallthrough
	case "False":
		fallthrough
	case "Unknown":
		*e = MeshMultiZoneServiceItemStatusStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshMultiZoneServiceItemStatusStatus: %v", v)
	}
}

type MeshMultiZoneServiceItemConditions struct {
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message string `json:"message"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason string `json:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status MeshMultiZoneServiceItemStatusStatus `json:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type string `json:"type"`
}

func (m *MeshMultiZoneServiceItemConditions) GetMessage() string {
	if m == nil {
		return ""
	}
	return m.Message
}

func (m *MeshMultiZoneServiceItemConditions) GetReason() string {
	if m == nil {
		return ""
	}
	return m.Reason
}

func (m *MeshMultiZoneServiceItemConditions) GetStatus() MeshMultiZoneServiceItemStatusStatus {
	if m == nil {
		return MeshMultiZoneServiceItemStatusStatus("")
	}
	return m.Status
}

func (m *MeshMultiZoneServiceItemConditions) GetType() string {
	if m == nil {
		return ""
	}
	return m.Type
}

type MeshMultiZoneServiceItemStatusHostnameGeneratorRef struct {
	CoreName string `json:"coreName"`
}

func (m *MeshMultiZoneServiceItemStatusHostnameGeneratorRef) GetCoreName() string {
	if m == nil {
		return ""
	}
	return m.CoreName
}

type MeshMultiZoneServiceItemHostnameGenerators struct {
	// Conditions is an array of hostname generator conditions.
	Conditions           []MeshMultiZoneServiceItemConditions               `json:"conditions,omitempty"`
	HostnameGeneratorRef MeshMultiZoneServiceItemStatusHostnameGeneratorRef `json:"hostnameGeneratorRef"`
}

func (m *MeshMultiZoneServiceItemHostnameGenerators) GetConditions() []MeshMultiZoneServiceItemConditions {
	if m == nil {
		return nil
	}
	return m.Conditions
}

func (m *MeshMultiZoneServiceItemHostnameGenerators) GetHostnameGeneratorRef() MeshMultiZoneServiceItemStatusHostnameGeneratorRef {
	if m == nil {
		return MeshMultiZoneServiceItemStatusHostnameGeneratorRef{}
	}
	return m.HostnameGeneratorRef
}

type MeshMultiZoneServiceItemMeshServices struct {
	Mesh string `json:"mesh"`
	// Name is a core name of MeshService
	Name      string `json:"name"`
	Namespace string `json:"namespace"`
	Zone      string `json:"zone"`
}

func (m *MeshMultiZoneServiceItemMeshServices) GetMesh() string {
	if m == nil {
		return ""
	}
	return m.Mesh
}

func (m *MeshMultiZoneServiceItemMeshServices) GetName() string {
	if m == nil {
		return ""
	}
	return m.Name
}

func (m *MeshMultiZoneServiceItemMeshServices) GetNamespace() string {
	if m == nil {
		return ""
	}
	return m.Namespace
}

func (m *MeshMultiZoneServiceItemMeshServices) GetZone() string {
	if m == nil {
		return ""
	}
	return m.Zone
}

type Vips struct {
	IP *string `json:"ip,omitempty"`
}

func (v *Vips) GetIP() *string {
	if v == nil {
		return nil
	}
	return v.IP
}

// MeshMultiZoneServiceItemStatus - Status is the current status of the Kuma MeshMultiZoneService resource.
type MeshMultiZoneServiceItemStatus struct {
	// Addresses is a list of addresses generated by HostnameGenerator
	Addresses []MeshMultiZoneServiceItemAddresses `json:"addresses,omitempty"`
	// Status of hostnames generator applied on this resource
	HostnameGenerators []MeshMultiZoneServiceItemHostnameGenerators `json:"hostnameGenerators,omitempty"`
	// MeshServices is a list of matched MeshServices
	MeshServices []MeshMultiZoneServiceItemMeshServices `json:"meshServices,omitempty"`
	// VIPs is a list of assigned Kuma VIPs.
	Vips []Vips `json:"vips,omitempty"`
}

func (m *MeshMultiZoneServiceItemStatus) GetAddresses() []MeshMultiZoneServiceItemAddresses {
	if m == nil {
		return nil
	}
	return m.Addresses
}

func (m *MeshMultiZoneServiceItemStatus) GetHostnameGenerators() []MeshMultiZoneServiceItemHostnameGenerators {
	if m == nil {
		return nil
	}
	return m.HostnameGenerators
}

func (m *MeshMultiZoneServiceItemStatus) GetMeshServices() []MeshMultiZoneServiceItemMeshServices {
	if m == nil {
		return nil
	}
	return m.MeshServices
}

func (m *MeshMultiZoneServiceItemStatus) GetVips() []Vips {
	if m == nil {
		return nil
	}
	return m.Vips
}

// MeshMultiZoneServiceItem - Successful response
type MeshMultiZoneServiceItem struct {
	// the type of the resource
	Type MeshMultiZoneServiceItemType `json:"type"`
	// Mesh is the name of the Kuma mesh this resource belongs to. It may be omitted for cluster-scoped resources.
	Mesh *string `default:"default" json:"mesh"`
	// Name of the Kuma resource
	Name string `json:"name"`
	// The labels to help identity resources
	Labels map[string]string `json:"labels,omitempty"`
	// Spec is the specification of the Kuma MeshMultiZoneService resource.
	Spec MeshMultiZoneServiceItemSpec `json:"spec"`
	// Time at which the resource was created
	CreationTime *time.Time `json:"creationTime,omitempty"`
	// Time at which the resource was updated
	ModificationTime *time.Time `json:"modificationTime,omitempty"`
	// Status is the current status of the Kuma MeshMultiZoneService resource.
	Status *MeshMultiZoneServiceItemStatus `json:"status,omitempty"`
}

func (m MeshMultiZoneServiceItem) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MeshMultiZoneServiceItem) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, []string{"type", "name", "spec"}); err != nil {
		return err
	}
	return nil
}

func (m *MeshMultiZoneServiceItem) GetType() MeshMultiZoneServiceItemType {
	if m == nil {
		return MeshMultiZoneServiceItemType("")
	}
	return m.Type
}

func (m *MeshMultiZoneServiceItem) GetMesh() *string {
	if m == nil {
		return nil
	}
	return m.Mesh
}

func (m *MeshMultiZoneServiceItem) GetName() string {
	if m == nil {
		return ""
	}
	return m.Name
}

func (m *MeshMultiZoneServiceItem) GetLabels() map[string]string {
	if m == nil {
		return nil
	}
	return m.Labels
}

func (m *MeshMultiZoneServiceItem) GetSpec() MeshMultiZoneServiceItemSpec {
	if m == nil {
		return MeshMultiZoneServiceItemSpec{}
	}
	return m.Spec
}

func (m *MeshMultiZoneServiceItem) GetCreationTime() *time.Time {
	if m == nil {
		return nil
	}
	return m.CreationTime
}

func (m *MeshMultiZoneServiceItem) GetModificationTime() *time.Time {
	if m == nil {
		return nil
	}
	return m.ModificationTime
}

func (m *MeshMultiZoneServiceItem) GetStatus() *MeshMultiZoneServiceItemStatus {
	if m == nil {
		return nil
	}
	return m.Status
}

type MeshMultiZoneServiceItemInput struct {
	// the type of the resource
	Type MeshMultiZoneServiceItemType `json:"type"`
	// Mesh is the name of the Kuma mesh this resource belongs to. It may be omitted for cluster-scoped resources.
	Mesh *string `default:"default" json:"mesh"`
	// Name of the Kuma resource
	Name string `json:"name"`
	// The labels to help identity resources
	Labels map[string]string `json:"labels,omitempty"`
	// Spec is the specification of the Kuma MeshMultiZoneService resource.
	Spec MeshMultiZoneServiceItemSpec `json:"spec"`
}

func (m MeshMultiZoneServiceItemInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MeshMultiZoneServiceItemInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, []string{"type", "name", "spec"}); err != nil {
		return err
	}
	return nil
}

func (m *MeshMultiZoneServiceItemInput) GetType() MeshMultiZoneServiceItemType {
	if m == nil {
		return MeshMultiZoneServiceItemType("")
	}
	return m.Type
}

func (m *MeshMultiZoneServiceItemInput) GetMesh() *string {
	if m == nil {
		return nil
	}
	return m.Mesh
}

func (m *MeshMultiZoneServiceItemInput) GetName() string {
	if m == nil {
		return ""
	}
	return m.Name
}

func (m *MeshMultiZoneServiceItemInput) GetLabels() map[string]string {
	if m == nil {
		return nil
	}
	return m.Labels
}

func (m *MeshMultiZoneServiceItemInput) GetSpec() MeshMultiZoneServiceItemSpec {
	if m == nil {
		return MeshMultiZoneServiceItemSpec{}
	}
	return m.Spec
}
