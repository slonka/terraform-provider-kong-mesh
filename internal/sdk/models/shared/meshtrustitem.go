// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-mesh/internal/sdk/internal/utils"
	"time"
)

// MeshTrustItemType - the type of the resource
type MeshTrustItemType string

const (
	MeshTrustItemTypeMeshTrust MeshTrustItemType = "MeshTrust"
)

func (e MeshTrustItemType) ToPointer() *MeshTrustItemType {
	return &e
}
func (e *MeshTrustItemType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MeshTrust":
		*e = MeshTrustItemType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshTrustItemType: %v", v)
	}
}

// Pem contains the PEM-encoded CA bundle if the Type is set to a PEM-based format.
type Pem struct {
	// Value holds the PEM-encoded CA bundle as a string.
	Value string `json:"value"`
}

func (p *Pem) GetValue() string {
	if p == nil {
		return ""
	}
	return p.Value
}

// MeshTrustItemSpecType - Type specifies the format or source type of the CA bundle.
type MeshTrustItemSpecType string

const (
	MeshTrustItemSpecTypePem MeshTrustItemSpecType = "Pem"
)

func (e MeshTrustItemSpecType) ToPointer() *MeshTrustItemSpecType {
	return &e
}
func (e *MeshTrustItemSpecType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Pem":
		*e = MeshTrustItemSpecType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshTrustItemSpecType: %v", v)
	}
}

type CaBundles struct {
	// Pem contains the PEM-encoded CA bundle if the Type is set to a PEM-based format.
	Pem *Pem `json:"pem,omitempty"`
	// Type specifies the format or source type of the CA bundle.
	Type MeshTrustItemSpecType `json:"type"`
}

func (c *CaBundles) GetPem() *Pem {
	if c == nil {
		return nil
	}
	return c.Pem
}

func (c *CaBundles) GetType() MeshTrustItemSpecType {
	if c == nil {
		return MeshTrustItemSpecType("")
	}
	return c.Type
}

// Origin specifies whether the resource was created from a MeshIdentity.
type Origin struct {
	// Resource identifier
	Kri *string `json:"kri,omitempty"`
}

func (o *Origin) GetKri() *string {
	if o == nil {
		return nil
	}
	return o.Kri
}

// MeshTrustItemSpec - Spec is the specification of the Kuma MeshTrust resource.
type MeshTrustItemSpec struct {
	// CABundles contains a list of CA bundles supported by this TrustDomain.
	// At least one CA bundle must be specified.
	CaBundles []CaBundles `json:"caBundles"`
	// Origin specifies whether the resource was created from a MeshIdentity.
	Origin *Origin `json:"origin,omitempty"`
	// TrustDomain is the trust domain associated with this resource.
	TrustDomain string `json:"trustDomain"`
}

func (m *MeshTrustItemSpec) GetCaBundles() []CaBundles {
	if m == nil {
		return []CaBundles{}
	}
	return m.CaBundles
}

func (m *MeshTrustItemSpec) GetOrigin() *Origin {
	if m == nil {
		return nil
	}
	return m.Origin
}

func (m *MeshTrustItemSpec) GetTrustDomain() string {
	if m == nil {
		return ""
	}
	return m.TrustDomain
}

// MeshTrustItem - Successful response
type MeshTrustItem struct {
	// the type of the resource
	Type MeshTrustItemType `json:"type"`
	// Mesh is the name of the Kuma mesh this resource belongs to. It may be omitted for cluster-scoped resources.
	Mesh *string `default:"default" json:"mesh"`
	// Name of the Kuma resource
	Name string `json:"name"`
	// The labels to help identity resources
	Labels map[string]string `json:"labels,omitempty"`
	// Spec is the specification of the Kuma MeshTrust resource.
	Spec MeshTrustItemSpec `json:"spec"`
	// Time at which the resource was created
	CreationTime *time.Time `json:"creationTime,omitempty"`
	// Time at which the resource was updated
	ModificationTime *time.Time `json:"modificationTime,omitempty"`
}

func (m MeshTrustItem) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MeshTrustItem) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, []string{"type", "name", "spec"}); err != nil {
		return err
	}
	return nil
}

func (m *MeshTrustItem) GetType() MeshTrustItemType {
	if m == nil {
		return MeshTrustItemType("")
	}
	return m.Type
}

func (m *MeshTrustItem) GetMesh() *string {
	if m == nil {
		return nil
	}
	return m.Mesh
}

func (m *MeshTrustItem) GetName() string {
	if m == nil {
		return ""
	}
	return m.Name
}

func (m *MeshTrustItem) GetLabels() map[string]string {
	if m == nil {
		return nil
	}
	return m.Labels
}

func (m *MeshTrustItem) GetSpec() MeshTrustItemSpec {
	if m == nil {
		return MeshTrustItemSpec{}
	}
	return m.Spec
}

func (m *MeshTrustItem) GetCreationTime() *time.Time {
	if m == nil {
		return nil
	}
	return m.CreationTime
}

func (m *MeshTrustItem) GetModificationTime() *time.Time {
	if m == nil {
		return nil
	}
	return m.ModificationTime
}

type MeshTrustItemInput struct {
	// the type of the resource
	Type MeshTrustItemType `json:"type"`
	// Mesh is the name of the Kuma mesh this resource belongs to. It may be omitted for cluster-scoped resources.
	Mesh *string `default:"default" json:"mesh"`
	// Name of the Kuma resource
	Name string `json:"name"`
	// The labels to help identity resources
	Labels map[string]string `json:"labels,omitempty"`
	// Spec is the specification of the Kuma MeshTrust resource.
	Spec MeshTrustItemSpec `json:"spec"`
}

func (m MeshTrustItemInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MeshTrustItemInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, []string{"type", "name", "spec"}); err != nil {
		return err
	}
	return nil
}

func (m *MeshTrustItemInput) GetType() MeshTrustItemType {
	if m == nil {
		return MeshTrustItemType("")
	}
	return m.Type
}

func (m *MeshTrustItemInput) GetMesh() *string {
	if m == nil {
		return nil
	}
	return m.Mesh
}

func (m *MeshTrustItemInput) GetName() string {
	if m == nil {
		return ""
	}
	return m.Name
}

func (m *MeshTrustItemInput) GetLabels() map[string]string {
	if m == nil {
		return nil
	}
	return m.Labels
}

func (m *MeshTrustItemInput) GetSpec() MeshTrustItemSpec {
	if m == nil {
		return MeshTrustItemSpec{}
	}
	return m.Spec
}
